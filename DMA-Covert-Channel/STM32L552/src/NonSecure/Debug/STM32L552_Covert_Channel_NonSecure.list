
STM32L552_Covert_Channel_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005430  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08045628  08045628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804574c  0804574c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0804574c  0804574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045754  08045754  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08045754  08045754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08045758  08045758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20030000  0804575c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20030070  080457cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20030200  080457cc  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154c6  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d4b  00000000  00000000  0003556c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00039478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7fa  00000000  00000000  0003a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151e2  00000000  00000000  00065cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001106d4  00000000  00000000  0007aedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b5b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000514c  00000000  00000000  0018b604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20030070 	.word	0x20030070
 8040214:	00000000 	.word	0x00000000
 8040218:	080455f0 	.word	0x080455f0

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20030074 	.word	0x20030074
 8040234:	080455f0 	.word	0x080455f0

08040238 <__aeabi_uldivmod>:
 8040238:	b953      	cbnz	r3, 8040250 <__aeabi_uldivmod+0x18>
 804023a:	b94a      	cbnz	r2, 8040250 <__aeabi_uldivmod+0x18>
 804023c:	2900      	cmp	r1, #0
 804023e:	bf08      	it	eq
 8040240:	2800      	cmpeq	r0, #0
 8040242:	bf1c      	itt	ne
 8040244:	f04f 31ff 	movne.w	r1, #4294967295
 8040248:	f04f 30ff 	movne.w	r0, #4294967295
 804024c:	f000 b980 	b.w	8040550 <__aeabi_idiv0>
 8040250:	f1ad 0c08 	sub.w	ip, sp, #8
 8040254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040258:	f000 f806 	bl	8040268 <__udivmoddi4>
 804025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040264:	b004      	add	sp, #16
 8040266:	4770      	bx	lr

08040268 <__udivmoddi4>:
 8040268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804026c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 804026e:	4604      	mov	r4, r0
 8040270:	4688      	mov	r8, r1
 8040272:	2b00      	cmp	r3, #0
 8040274:	f040 8084 	bne.w	8040380 <__udivmoddi4+0x118>
 8040278:	428a      	cmp	r2, r1
 804027a:	4617      	mov	r7, r2
 804027c:	d943      	bls.n	8040306 <__udivmoddi4+0x9e>
 804027e:	fab2 f282 	clz	r2, r2
 8040282:	b142      	cbz	r2, 8040296 <__udivmoddi4+0x2e>
 8040284:	f1c2 0020 	rsb	r0, r2, #32
 8040288:	4091      	lsls	r1, r2
 804028a:	4097      	lsls	r7, r2
 804028c:	fa24 f000 	lsr.w	r0, r4, r0
 8040290:	4094      	lsls	r4, r2
 8040292:	ea40 0801 	orr.w	r8, r0, r1
 8040296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 804029a:	0c23      	lsrs	r3, r4, #16
 804029c:	fa1f fe87 	uxth.w	lr, r7
 80402a0:	fbb8 f6fc 	udiv	r6, r8, ip
 80402a4:	fb0c 8116 	mls	r1, ip, r6, r8
 80402a8:	fb06 f00e 	mul.w	r0, r6, lr
 80402ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80402b0:	4298      	cmp	r0, r3
 80402b2:	d907      	bls.n	80402c4 <__udivmoddi4+0x5c>
 80402b4:	18fb      	adds	r3, r7, r3
 80402b6:	f106 31ff 	add.w	r1, r6, #4294967295
 80402ba:	d202      	bcs.n	80402c2 <__udivmoddi4+0x5a>
 80402bc:	4298      	cmp	r0, r3
 80402be:	f200 8131 	bhi.w	8040524 <__udivmoddi4+0x2bc>
 80402c2:	460e      	mov	r6, r1
 80402c4:	1a19      	subs	r1, r3, r0
 80402c6:	b2a3      	uxth	r3, r4
 80402c8:	fbb1 f0fc 	udiv	r0, r1, ip
 80402cc:	fb0c 1110 	mls	r1, ip, r0, r1
 80402d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80402d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80402d8:	45a6      	cmp	lr, r4
 80402da:	d907      	bls.n	80402ec <__udivmoddi4+0x84>
 80402dc:	193c      	adds	r4, r7, r4
 80402de:	f100 33ff 	add.w	r3, r0, #4294967295
 80402e2:	d202      	bcs.n	80402ea <__udivmoddi4+0x82>
 80402e4:	45a6      	cmp	lr, r4
 80402e6:	f200 811a 	bhi.w	804051e <__udivmoddi4+0x2b6>
 80402ea:	4618      	mov	r0, r3
 80402ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402f0:	eba4 040e 	sub.w	r4, r4, lr
 80402f4:	2600      	movs	r6, #0
 80402f6:	b11d      	cbz	r5, 8040300 <__udivmoddi4+0x98>
 80402f8:	40d4      	lsrs	r4, r2
 80402fa:	2300      	movs	r3, #0
 80402fc:	e9c5 4300 	strd	r4, r3, [r5]
 8040300:	4631      	mov	r1, r6
 8040302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040306:	b902      	cbnz	r2, 804030a <__udivmoddi4+0xa2>
 8040308:	deff      	udf	#255	; 0xff
 804030a:	fab2 f282 	clz	r2, r2
 804030e:	2a00      	cmp	r2, #0
 8040310:	d152      	bne.n	80403b8 <__udivmoddi4+0x150>
 8040312:	1bcb      	subs	r3, r1, r7
 8040314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040318:	fa1f f887 	uxth.w	r8, r7
 804031c:	2601      	movs	r6, #1
 804031e:	0c21      	lsrs	r1, r4, #16
 8040320:	fbb3 fcfe 	udiv	ip, r3, lr
 8040324:	fb0e 301c 	mls	r0, lr, ip, r3
 8040328:	fb08 f90c 	mul.w	r9, r8, ip
 804032c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040330:	4589      	cmp	r9, r1
 8040332:	d90b      	bls.n	804034c <__udivmoddi4+0xe4>
 8040334:	1879      	adds	r1, r7, r1
 8040336:	f10c 33ff 	add.w	r3, ip, #4294967295
 804033a:	bf2c      	ite	cs
 804033c:	2001      	movcs	r0, #1
 804033e:	2000      	movcc	r0, #0
 8040340:	4589      	cmp	r9, r1
 8040342:	d902      	bls.n	804034a <__udivmoddi4+0xe2>
 8040344:	2800      	cmp	r0, #0
 8040346:	f000 80f0 	beq.w	804052a <__udivmoddi4+0x2c2>
 804034a:	469c      	mov	ip, r3
 804034c:	eba1 0109 	sub.w	r1, r1, r9
 8040350:	b2a3      	uxth	r3, r4
 8040352:	fbb1 f0fe 	udiv	r0, r1, lr
 8040356:	fb0e 1110 	mls	r1, lr, r0, r1
 804035a:	fb08 f800 	mul.w	r8, r8, r0
 804035e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040362:	45a0      	cmp	r8, r4
 8040364:	d907      	bls.n	8040376 <__udivmoddi4+0x10e>
 8040366:	193c      	adds	r4, r7, r4
 8040368:	f100 33ff 	add.w	r3, r0, #4294967295
 804036c:	d202      	bcs.n	8040374 <__udivmoddi4+0x10c>
 804036e:	45a0      	cmp	r8, r4
 8040370:	f200 80d2 	bhi.w	8040518 <__udivmoddi4+0x2b0>
 8040374:	4618      	mov	r0, r3
 8040376:	eba4 0408 	sub.w	r4, r4, r8
 804037a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 804037e:	e7ba      	b.n	80402f6 <__udivmoddi4+0x8e>
 8040380:	428b      	cmp	r3, r1
 8040382:	d909      	bls.n	8040398 <__udivmoddi4+0x130>
 8040384:	2d00      	cmp	r5, #0
 8040386:	f000 80be 	beq.w	8040506 <__udivmoddi4+0x29e>
 804038a:	2600      	movs	r6, #0
 804038c:	e9c5 0100 	strd	r0, r1, [r5]
 8040390:	4630      	mov	r0, r6
 8040392:	4631      	mov	r1, r6
 8040394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040398:	fab3 f683 	clz	r6, r3
 804039c:	2e00      	cmp	r6, #0
 804039e:	d14d      	bne.n	804043c <__udivmoddi4+0x1d4>
 80403a0:	428b      	cmp	r3, r1
 80403a2:	f0c0 80b3 	bcc.w	804050c <__udivmoddi4+0x2a4>
 80403a6:	4282      	cmp	r2, r0
 80403a8:	f240 80b0 	bls.w	804050c <__udivmoddi4+0x2a4>
 80403ac:	4630      	mov	r0, r6
 80403ae:	2d00      	cmp	r5, #0
 80403b0:	d0a6      	beq.n	8040300 <__udivmoddi4+0x98>
 80403b2:	e9c5 4800 	strd	r4, r8, [r5]
 80403b6:	e7a3      	b.n	8040300 <__udivmoddi4+0x98>
 80403b8:	4097      	lsls	r7, r2
 80403ba:	f1c2 0320 	rsb	r3, r2, #32
 80403be:	fa01 f002 	lsl.w	r0, r1, r2
 80403c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403c6:	40d9      	lsrs	r1, r3
 80403c8:	fa24 f303 	lsr.w	r3, r4, r3
 80403cc:	fa1f f887 	uxth.w	r8, r7
 80403d0:	4094      	lsls	r4, r2
 80403d2:	4303      	orrs	r3, r0
 80403d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80403d8:	0c1e      	lsrs	r6, r3, #16
 80403da:	fb0e 1110 	mls	r1, lr, r0, r1
 80403de:	fb00 fc08 	mul.w	ip, r0, r8
 80403e2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80403e6:	458c      	cmp	ip, r1
 80403e8:	d90e      	bls.n	8040408 <__udivmoddi4+0x1a0>
 80403ea:	1879      	adds	r1, r7, r1
 80403ec:	f100 36ff 	add.w	r6, r0, #4294967295
 80403f0:	bf2c      	ite	cs
 80403f2:	f04f 0901 	movcs.w	r9, #1
 80403f6:	f04f 0900 	movcc.w	r9, #0
 80403fa:	458c      	cmp	ip, r1
 80403fc:	d903      	bls.n	8040406 <__udivmoddi4+0x19e>
 80403fe:	f1b9 0f00 	cmp.w	r9, #0
 8040402:	f000 8096 	beq.w	8040532 <__udivmoddi4+0x2ca>
 8040406:	4630      	mov	r0, r6
 8040408:	eba1 010c 	sub.w	r1, r1, ip
 804040c:	b29b      	uxth	r3, r3
 804040e:	fbb1 f6fe 	udiv	r6, r1, lr
 8040412:	fb0e 1116 	mls	r1, lr, r6, r1
 8040416:	fb06 fc08 	mul.w	ip, r6, r8
 804041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 804041e:	458c      	cmp	ip, r1
 8040420:	d907      	bls.n	8040432 <__udivmoddi4+0x1ca>
 8040422:	1879      	adds	r1, r7, r1
 8040424:	f106 33ff 	add.w	r3, r6, #4294967295
 8040428:	d202      	bcs.n	8040430 <__udivmoddi4+0x1c8>
 804042a:	458c      	cmp	ip, r1
 804042c:	f200 8088 	bhi.w	8040540 <__udivmoddi4+0x2d8>
 8040430:	461e      	mov	r6, r3
 8040432:	eba1 030c 	sub.w	r3, r1, ip
 8040436:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 804043a:	e770      	b.n	804031e <__udivmoddi4+0xb6>
 804043c:	f1c6 0720 	rsb	r7, r6, #32
 8040440:	fa03 f406 	lsl.w	r4, r3, r6
 8040444:	fa02 fc06 	lsl.w	ip, r2, r6
 8040448:	fa01 fe06 	lsl.w	lr, r1, r6
 804044c:	40fa      	lsrs	r2, r7
 804044e:	fa20 f807 	lsr.w	r8, r0, r7
 8040452:	40f9      	lsrs	r1, r7
 8040454:	fa00 f306 	lsl.w	r3, r0, r6
 8040458:	4322      	orrs	r2, r4
 804045a:	ea48 040e 	orr.w	r4, r8, lr
 804045e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8040462:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8040466:	fa1f f982 	uxth.w	r9, r2
 804046a:	fbb1 faf8 	udiv	sl, r1, r8
 804046e:	fb08 111a 	mls	r1, r8, sl, r1
 8040472:	fb0a f009 	mul.w	r0, sl, r9
 8040476:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 804047a:	4570      	cmp	r0, lr
 804047c:	d90e      	bls.n	804049c <__udivmoddi4+0x234>
 804047e:	eb12 0e0e 	adds.w	lr, r2, lr
 8040482:	f10a 31ff 	add.w	r1, sl, #4294967295
 8040486:	bf2c      	ite	cs
 8040488:	f04f 0b01 	movcs.w	fp, #1
 804048c:	f04f 0b00 	movcc.w	fp, #0
 8040490:	4570      	cmp	r0, lr
 8040492:	d902      	bls.n	804049a <__udivmoddi4+0x232>
 8040494:	f1bb 0f00 	cmp.w	fp, #0
 8040498:	d04e      	beq.n	8040538 <__udivmoddi4+0x2d0>
 804049a:	468a      	mov	sl, r1
 804049c:	ebae 0e00 	sub.w	lr, lr, r0
 80404a0:	b2a4      	uxth	r4, r4
 80404a2:	fbbe f0f8 	udiv	r0, lr, r8
 80404a6:	fb08 ee10 	mls	lr, r8, r0, lr
 80404aa:	fb00 f909 	mul.w	r9, r0, r9
 80404ae:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80404b2:	45f1      	cmp	r9, lr
 80404b4:	d907      	bls.n	80404c6 <__udivmoddi4+0x25e>
 80404b6:	eb12 0e0e 	adds.w	lr, r2, lr
 80404ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80404be:	d201      	bcs.n	80404c4 <__udivmoddi4+0x25c>
 80404c0:	45f1      	cmp	r9, lr
 80404c2:	d840      	bhi.n	8040546 <__udivmoddi4+0x2de>
 80404c4:	4608      	mov	r0, r1
 80404c6:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80404ca:	ebae 0e09 	sub.w	lr, lr, r9
 80404ce:	fba0 890c 	umull	r8, r9, r0, ip
 80404d2:	45ce      	cmp	lr, r9
 80404d4:	4641      	mov	r1, r8
 80404d6:	464c      	mov	r4, r9
 80404d8:	d302      	bcc.n	80404e0 <__udivmoddi4+0x278>
 80404da:	d106      	bne.n	80404ea <__udivmoddi4+0x282>
 80404dc:	4543      	cmp	r3, r8
 80404de:	d204      	bcs.n	80404ea <__udivmoddi4+0x282>
 80404e0:	3801      	subs	r0, #1
 80404e2:	ebb8 010c 	subs.w	r1, r8, ip
 80404e6:	eb69 0402 	sbc.w	r4, r9, r2
 80404ea:	b37d      	cbz	r5, 804054c <__udivmoddi4+0x2e4>
 80404ec:	1a5a      	subs	r2, r3, r1
 80404ee:	eb6e 0e04 	sbc.w	lr, lr, r4
 80404f2:	40f2      	lsrs	r2, r6
 80404f4:	fa0e f707 	lsl.w	r7, lr, r7
 80404f8:	fa2e f306 	lsr.w	r3, lr, r6
 80404fc:	2600      	movs	r6, #0
 80404fe:	4317      	orrs	r7, r2
 8040500:	e9c5 7300 	strd	r7, r3, [r5]
 8040504:	e6fc      	b.n	8040300 <__udivmoddi4+0x98>
 8040506:	462e      	mov	r6, r5
 8040508:	4628      	mov	r0, r5
 804050a:	e6f9      	b.n	8040300 <__udivmoddi4+0x98>
 804050c:	1a84      	subs	r4, r0, r2
 804050e:	eb61 0103 	sbc.w	r1, r1, r3
 8040512:	2001      	movs	r0, #1
 8040514:	4688      	mov	r8, r1
 8040516:	e74a      	b.n	80403ae <__udivmoddi4+0x146>
 8040518:	3802      	subs	r0, #2
 804051a:	443c      	add	r4, r7
 804051c:	e72b      	b.n	8040376 <__udivmoddi4+0x10e>
 804051e:	3802      	subs	r0, #2
 8040520:	443c      	add	r4, r7
 8040522:	e6e3      	b.n	80402ec <__udivmoddi4+0x84>
 8040524:	3e02      	subs	r6, #2
 8040526:	443b      	add	r3, r7
 8040528:	e6cc      	b.n	80402c4 <__udivmoddi4+0x5c>
 804052a:	f1ac 0c02 	sub.w	ip, ip, #2
 804052e:	4439      	add	r1, r7
 8040530:	e70c      	b.n	804034c <__udivmoddi4+0xe4>
 8040532:	3802      	subs	r0, #2
 8040534:	4439      	add	r1, r7
 8040536:	e767      	b.n	8040408 <__udivmoddi4+0x1a0>
 8040538:	f1aa 0a02 	sub.w	sl, sl, #2
 804053c:	4496      	add	lr, r2
 804053e:	e7ad      	b.n	804049c <__udivmoddi4+0x234>
 8040540:	3e02      	subs	r6, #2
 8040542:	4439      	add	r1, r7
 8040544:	e775      	b.n	8040432 <__udivmoddi4+0x1ca>
 8040546:	3802      	subs	r0, #2
 8040548:	4496      	add	lr, r2
 804054a:	e7bc      	b.n	80404c6 <__udivmoddi4+0x25e>
 804054c:	462e      	mov	r6, r5
 804054e:	e6d7      	b.n	8040300 <__udivmoddi4+0x98>

08040550 <__aeabi_idiv0>:
 8040550:	4770      	bx	lr
 8040552:	bf00      	nop

08040554 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8040554:	b580      	push	{r7, lr}
 8040556:	b082      	sub	sp, #8
 8040558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 804055a:	4b28      	ldr	r3, [pc, #160]	; (80405fc <MX_DMA_Init+0xa8>)
 804055c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804055e:	4a27      	ldr	r2, [pc, #156]	; (80405fc <MX_DMA_Init+0xa8>)
 8040560:	f043 0304 	orr.w	r3, r3, #4
 8040564:	6493      	str	r3, [r2, #72]	; 0x48
 8040566:	4b25      	ldr	r3, [pc, #148]	; (80405fc <MX_DMA_Init+0xa8>)
 8040568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804056a:	f003 0304 	and.w	r3, r3, #4
 804056e:	607b      	str	r3, [r7, #4]
 8040570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8040572:	4b22      	ldr	r3, [pc, #136]	; (80405fc <MX_DMA_Init+0xa8>)
 8040574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040576:	4a21      	ldr	r2, [pc, #132]	; (80405fc <MX_DMA_Init+0xa8>)
 8040578:	f043 0301 	orr.w	r3, r3, #1
 804057c:	6493      	str	r3, [r2, #72]	; 0x48
 804057e:	4b1f      	ldr	r3, [pc, #124]	; (80405fc <MX_DMA_Init+0xa8>)
 8040580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040582:	f003 0301 	and.w	r3, r3, #1
 8040586:	603b      	str	r3, [r7, #0]
 8040588:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 804058a:	4b1d      	ldr	r3, [pc, #116]	; (8040600 <MX_DMA_Init+0xac>)
 804058c:	4a1d      	ldr	r2, [pc, #116]	; (8040604 <MX_DMA_Init+0xb0>)
 804058e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 8040590:	4b1b      	ldr	r3, [pc, #108]	; (8040600 <MX_DMA_Init+0xac>)
 8040592:	2200      	movs	r2, #0
 8040594:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8040596:	4b1a      	ldr	r3, [pc, #104]	; (8040600 <MX_DMA_Init+0xac>)
 8040598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 804059c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_DISABLE;
 804059e:	4b18      	ldr	r3, [pc, #96]	; (8040600 <MX_DMA_Init+0xac>)
 80405a0:	2200      	movs	r2, #0
 80405a2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 80405a4:	4b16      	ldr	r3, [pc, #88]	; (8040600 <MX_DMA_Init+0xac>)
 80405a6:	2200      	movs	r2, #0
 80405a8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80405aa:	4b15      	ldr	r3, [pc, #84]	; (8040600 <MX_DMA_Init+0xac>)
 80405ac:	2200      	movs	r2, #0
 80405ae:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80405b0:	4b13      	ldr	r3, [pc, #76]	; (8040600 <MX_DMA_Init+0xac>)
 80405b2:	2200      	movs	r2, #0
 80405b4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 80405b6:	4b12      	ldr	r3, [pc, #72]	; (8040600 <MX_DMA_Init+0xac>)
 80405b8:	2200      	movs	r2, #0
 80405ba:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80405bc:	4b10      	ldr	r3, [pc, #64]	; (8040600 <MX_DMA_Init+0xac>)
 80405be:	2200      	movs	r2, #0
 80405c0:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80405c2:	480f      	ldr	r0, [pc, #60]	; (8040600 <MX_DMA_Init+0xac>)
 80405c4:	f000 fd10 	bl	8040fe8 <HAL_DMA_Init>
 80405c8:	4603      	mov	r3, r0
 80405ca:	2b00      	cmp	r3, #0
 80405cc:	d001      	beq.n	80405d2 <MX_DMA_Init+0x7e>
  {
    Error_Handler();
 80405ce:	f000 f964 	bl	804089a <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80405d2:	2110      	movs	r1, #16
 80405d4:	480a      	ldr	r0, [pc, #40]	; (8040600 <MX_DMA_Init+0xac>)
 80405d6:	f000 ff22 	bl	804141e <HAL_DMA_ConfigChannelAttributes>
 80405da:	4603      	mov	r3, r0
 80405dc:	2b00      	cmp	r3, #0
 80405de:	d001      	beq.n	80405e4 <MX_DMA_Init+0x90>
  {
    Error_Handler();
 80405e0:	f000 f95b 	bl	804089a <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80405e4:	2200      	movs	r2, #0
 80405e6:	2100      	movs	r1, #0
 80405e8:	201d      	movs	r0, #29
 80405ea:	f000 fcc8 	bl	8040f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80405ee:	201d      	movs	r0, #29
 80405f0:	f000 fcdf 	bl	8040fb2 <HAL_NVIC_EnableIRQ>

}
 80405f4:	bf00      	nop
 80405f6:	3708      	adds	r7, #8
 80405f8:	46bd      	mov	sp, r7
 80405fa:	bd80      	pop	{r7, pc}
 80405fc:	40021000 	.word	0x40021000
 8040600:	200300a8 	.word	0x200300a8
 8040604:	40020008 	.word	0x40020008

08040608 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8040608:	b580      	push	{r7, lr}
 804060a:	b082      	sub	sp, #8
 804060c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 804060e:	4b09      	ldr	r3, [pc, #36]	; (8040634 <MX_GPIO_Init+0x2c>)
 8040610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040612:	4a08      	ldr	r2, [pc, #32]	; (8040634 <MX_GPIO_Init+0x2c>)
 8040614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040618:	64d3      	str	r3, [r2, #76]	; 0x4c
 804061a:	4b06      	ldr	r3, [pc, #24]	; (8040634 <MX_GPIO_Init+0x2c>)
 804061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804061e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040622:	607b      	str	r3, [r7, #4]
 8040624:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8040626:	f001 f9b5 	bl	8041994 <HAL_PWREx_EnableVddIO2>

}
 804062a:	bf00      	nop
 804062c:	3708      	adds	r7, #8
 804062e:	46bd      	mov	sp, r7
 8040630:	bd80      	pop	{r7, pc}
 8040632:	bf00      	nop
 8040634:	40021000 	.word	0x40021000

08040638 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8040638:	b480      	push	{r7}
 804063a:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 804063c:	bf00      	nop
 804063e:	46bd      	mov	sp, r7
 8040640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040644:	4770      	bx	lr
	...

08040648 <__io_putchar>:
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stdlib.h"

int __io_putchar(int ch)
{
 8040648:	b580      	push	{r7, lr}
 804064a:	b084      	sub	sp, #16
 804064c:	af00      	add	r7, sp, #0
 804064e:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8040650:	687b      	ldr	r3, [r7, #4]
 8040652:	b2db      	uxtb	r3, r3
 8040654:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&hlpuart1, &*c, 1, 1000);
 8040656:	f107 010c 	add.w	r1, r7, #12
 804065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804065e:	2201      	movs	r2, #1
 8040660:	4803      	ldr	r0, [pc, #12]	; (8040670 <__io_putchar+0x28>)
 8040662:	f003 fa5b 	bl	8043b1c <HAL_UART_Transmit>
 return ch;
 8040666:	687b      	ldr	r3, [r7, #4]
}
 8040668:	4618      	mov	r0, r3
 804066a:	3710      	adds	r7, #16
 804066c:	46bd      	mov	sp, r7
 804066e:	bd80      	pop	{r7, pc}
 8040670:	2003015c 	.word	0x2003015c

08040674 <_write>:

int _write(int file,char *ptr, int len)
{
 8040674:	b580      	push	{r7, lr}
 8040676:	b086      	sub	sp, #24
 8040678:	af00      	add	r7, sp, #0
 804067a:	60f8      	str	r0, [r7, #12]
 804067c:	60b9      	str	r1, [r7, #8]
 804067e:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8040680:	2300      	movs	r3, #0
 8040682:	617b      	str	r3, [r7, #20]
 8040684:	e009      	b.n	804069a <_write+0x26>
 {
 __io_putchar(*ptr++);
 8040686:	68bb      	ldr	r3, [r7, #8]
 8040688:	1c5a      	adds	r2, r3, #1
 804068a:	60ba      	str	r2, [r7, #8]
 804068c:	781b      	ldrb	r3, [r3, #0]
 804068e:	4618      	mov	r0, r3
 8040690:	f7ff ffda 	bl	8040648 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8040694:	697b      	ldr	r3, [r7, #20]
 8040696:	3301      	adds	r3, #1
 8040698:	617b      	str	r3, [r7, #20]
 804069a:	697a      	ldr	r2, [r7, #20]
 804069c:	687b      	ldr	r3, [r7, #4]
 804069e:	429a      	cmp	r2, r3
 80406a0:	dbf1      	blt.n	8040686 <_write+0x12>
 }
return len;
 80406a2:	687b      	ldr	r3, [r7, #4]
}
 80406a4:	4618      	mov	r0, r3
 80406a6:	3718      	adds	r7, #24
 80406a8:	46bd      	mov	sp, r7
 80406aa:	bd80      	pop	{r7, pc}

080406ac <config_DMA_M2M>:
    }
    HUND_LDRS();
  }
}

void config_DMA_M2M(int size){
 80406ac:	b580      	push	{r7, lr}
 80406ae:	b082      	sub	sp, #8
 80406b0:	af00      	add	r7, sp, #0
 80406b2:	6078      	str	r0, [r7, #4]
// Make this vars global. The stack will be destroyed.
  static int src, dst;
  //need to comment __HAL_DMA_ENABLE in function HAL_DMA_Start()
  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)&src,
 80406b4:	4904      	ldr	r1, [pc, #16]	; (80406c8 <config_DMA_M2M+0x1c>)
 80406b6:	4a05      	ldr	r2, [pc, #20]	; (80406cc <config_DMA_M2M+0x20>)
 80406b8:	687b      	ldr	r3, [r7, #4]
 80406ba:	4805      	ldr	r0, [pc, #20]	; (80406d0 <config_DMA_M2M+0x24>)
 80406bc:	f000 fd3c 	bl	8041138 <HAL_DMA_Start_IT>
                    (uint32_t)&dst, size);
}
 80406c0:	bf00      	nop
 80406c2:	3708      	adds	r7, #8
 80406c4:	46bd      	mov	sp, r7
 80406c6:	bd80      	pop	{r7, pc}
 80406c8:	20030094 	.word	0x20030094
 80406cc:	20030098 	.word	0x20030098
 80406d0:	200300a8 	.word	0x200300a8

080406d4 <covert_channel>:

int input_symbol = 0, sample = 0;

__attribute__((optimize(0))) void covert_channel(){
 80406d4:	b580      	push	{r7, lr}
 80406d6:	b082      	sub	sp, #8
 80406d8:	af00      	add	r7, sp, #0
  int *ptr_cnt = 0x40000000+0x24; // TIM2 (32 bits)
 80406da:	4b0d      	ldr	r3, [pc, #52]	; (8040710 <covert_channel+0x3c>)
 80406dc:	607b      	str	r3, [r7, #4]
  // trigger chain of interrupts (DMA transfers)
  config_DMA_M2M(TRASNFER_SIZE);
 80406de:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80406e2:	f7ff ffe3 	bl	80406ac <config_DMA_M2M>
  *ptr_cnt = 0;
 80406e6:	687b      	ldr	r3, [r7, #4]
 80406e8:	2200      	movs	r2, #0
 80406ea:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 80406ec:	4809      	ldr	r0, [pc, #36]	; (8040714 <covert_channel+0x40>)
 80406ee:	f002 feb1 	bl	8043454 <HAL_TIM_Base_Start>
  //start DMA transaction
  //need to comment this line in function HAL_DMA_Start()
  __HAL_DMA_ENABLE(&hdma_memtomem_dma1_channel1);
 80406f2:	4b09      	ldr	r3, [pc, #36]	; (8040718 <covert_channel+0x44>)
 80406f4:	681b      	ldr	r3, [r3, #0]
 80406f6:	681a      	ldr	r2, [r3, #0]
 80406f8:	4b07      	ldr	r3, [pc, #28]	; (8040718 <covert_channel+0x44>)
 80406fa:	681b      	ldr	r3, [r3, #0]
 80406fc:	f042 0201 	orr.w	r2, r2, #1
 8040700:	601a      	str	r2, [r3, #0]
  #ifdef TROJAN_SECURE
    trojan_s(input_symbol);
 8040702:	4b06      	ldr	r3, [pc, #24]	; (804071c <covert_channel+0x48>)
 8040704:	681b      	ldr	r3, [r3, #0]
 8040706:	4618      	mov	r0, r3
 8040708:	f004 ff86 	bl	8045618 <__trojan_s_veneer>
  #else
    trojan(input_symbol);
  #endif
  while(1);
 804070c:	e7fe      	b.n	804070c <covert_channel+0x38>
 804070e:	bf00      	nop
 8040710:	40000024 	.word	0x40000024
 8040714:	20030110 	.word	0x20030110
 8040718:	200300a8 	.word	0x200300a8
 804071c:	2003008c 	.word	0x2003008c

08040720 <DMA1_Channel1_IRQHandler>:
/* 
* The channel is measured in the DMA ISR to avoid accessing the SRAM,which would 
* introduce a lot of noise in the covert-channel. (Remove the need of a flag
* shared between ISR and code, that would generate a lot of SRAM accesses)
*/
__attribute__((optimize(0))) void DMA1_Channel1_IRQHandler(){
 8040720:	b580      	push	{r7, lr}
 8040722:	b082      	sub	sp, #8
 8040724:	af00      	add	r7, sp, #0
  int *ptr_cnt = 0x40000000+0x24; // TIM2 (32 bits)
 8040726:	4b22      	ldr	r3, [pc, #136]	; (80407b0 <DMA1_Channel1_IRQHandler+0x90>)
 8040728:	607b      	str	r3, [r7, #4]
  HAL_TIM_Base_Stop(&htim2);
 804072a:	4822      	ldr	r0, [pc, #136]	; (80407b4 <DMA1_Channel1_IRQHandler+0x94>)
 804072c:	f002 fefa 	bl	8043524 <HAL_TIM_Base_Stop>
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8040730:	4821      	ldr	r0, [pc, #132]	; (80407b8 <DMA1_Channel1_IRQHandler+0x98>)
 8040732:	f000 fd74 	bl	804121e <HAL_DMA_IRQHandler>
  printf("(%d, %d)\r\n", input_symbol, *ptr_cnt);
 8040736:	4b21      	ldr	r3, [pc, #132]	; (80407bc <DMA1_Channel1_IRQHandler+0x9c>)
 8040738:	6819      	ldr	r1, [r3, #0]
 804073a:	687b      	ldr	r3, [r7, #4]
 804073c:	681b      	ldr	r3, [r3, #0]
 804073e:	461a      	mov	r2, r3
 8040740:	481f      	ldr	r0, [pc, #124]	; (80407c0 <DMA1_Channel1_IRQHandler+0xa0>)
 8040742:	f003 fff1 	bl	8044728 <iprintf>
  sample++;
 8040746:	4b1f      	ldr	r3, [pc, #124]	; (80407c4 <DMA1_Channel1_IRQHandler+0xa4>)
 8040748:	681b      	ldr	r3, [r3, #0]
 804074a:	3301      	adds	r3, #1
 804074c:	4a1d      	ldr	r2, [pc, #116]	; (80407c4 <DMA1_Channel1_IRQHandler+0xa4>)
 804074e:	6013      	str	r3, [r2, #0]
  // N_SAMPLES per input symbol
  if(sample >= N_SAMPLES){
 8040750:	4b1c      	ldr	r3, [pc, #112]	; (80407c4 <DMA1_Channel1_IRQHandler+0xa4>)
 8040752:	681b      	ldr	r3, [r3, #0]
 8040754:	2b63      	cmp	r3, #99	; 0x63
 8040756:	dd10      	ble.n	804077a <DMA1_Channel1_IRQHandler+0x5a>
    if(input_symbol < MAX_SYMBOL-1){
 8040758:	4b18      	ldr	r3, [pc, #96]	; (80407bc <DMA1_Channel1_IRQHandler+0x9c>)
 804075a:	681b      	ldr	r3, [r3, #0]
 804075c:	2bfe      	cmp	r3, #254	; 0xfe
 804075e:	dc08      	bgt.n	8040772 <DMA1_Channel1_IRQHandler+0x52>
      input_symbol++;
 8040760:	4b16      	ldr	r3, [pc, #88]	; (80407bc <DMA1_Channel1_IRQHandler+0x9c>)
 8040762:	681b      	ldr	r3, [r3, #0]
 8040764:	3301      	adds	r3, #1
 8040766:	4a15      	ldr	r2, [pc, #84]	; (80407bc <DMA1_Channel1_IRQHandler+0x9c>)
 8040768:	6013      	str	r3, [r2, #0]
      sample = 0;
 804076a:	4b16      	ldr	r3, [pc, #88]	; (80407c4 <DMA1_Channel1_IRQHandler+0xa4>)
 804076c:	2200      	movs	r2, #0
 804076e:	601a      	str	r2, [r3, #0]
 8040770:	e003      	b.n	804077a <DMA1_Channel1_IRQHandler+0x5a>
    }
    else {
      input_symbol = 0;
 8040772:	4b12      	ldr	r3, [pc, #72]	; (80407bc <DMA1_Channel1_IRQHandler+0x9c>)
 8040774:	2200      	movs	r2, #0
 8040776:	601a      	str	r2, [r3, #0]
     // printf("END\r\n");
      return;
 8040778:	e017      	b.n	80407aa <DMA1_Channel1_IRQHandler+0x8a>
    }
  }

  config_DMA_M2M(TRASNFER_SIZE);
 804077a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 804077e:	f7ff ff95 	bl	80406ac <config_DMA_M2M>
  *ptr_cnt = 0;
 8040782:	687b      	ldr	r3, [r7, #4]
 8040784:	2200      	movs	r2, #0
 8040786:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8040788:	480a      	ldr	r0, [pc, #40]	; (80407b4 <DMA1_Channel1_IRQHandler+0x94>)
 804078a:	f002 fe63 	bl	8043454 <HAL_TIM_Base_Start>
  //start DMA transaction
  //need to comment this line in function HAL_DMA_Start()
  __HAL_DMA_ENABLE(&hdma_memtomem_dma1_channel1);
 804078e:	4b0a      	ldr	r3, [pc, #40]	; (80407b8 <DMA1_Channel1_IRQHandler+0x98>)
 8040790:	681b      	ldr	r3, [r3, #0]
 8040792:	681a      	ldr	r2, [r3, #0]
 8040794:	4b08      	ldr	r3, [pc, #32]	; (80407b8 <DMA1_Channel1_IRQHandler+0x98>)
 8040796:	681b      	ldr	r3, [r3, #0]
 8040798:	f042 0201 	orr.w	r2, r2, #1
 804079c:	601a      	str	r2, [r3, #0]
  #ifdef TROJAN_SECURE
    trojan_s(input_symbol);
 804079e:	4b07      	ldr	r3, [pc, #28]	; (80407bc <DMA1_Channel1_IRQHandler+0x9c>)
 80407a0:	681b      	ldr	r3, [r3, #0]
 80407a2:	4618      	mov	r0, r3
 80407a4:	f004 ff38 	bl	8045618 <__trojan_s_veneer>
  #else
    trojan(input_symbol);
  #endif
  return;
 80407a8:	bf00      	nop
  
}
 80407aa:	3708      	adds	r7, #8
 80407ac:	46bd      	mov	sp, r7
 80407ae:	bd80      	pop	{r7, pc}
 80407b0:	40000024 	.word	0x40000024
 80407b4:	20030110 	.word	0x20030110
 80407b8:	200300a8 	.word	0x200300a8
 80407bc:	2003008c 	.word	0x2003008c
 80407c0:	08045628 	.word	0x08045628
 80407c4:	20030090 	.word	0x20030090

080407c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80407c8:	b580      	push	{r7, lr}
 80407ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80407cc:	f000 fa85 	bl	8040cda <HAL_Init>

  /* USER CODE BEGIN Init */
  //DISABLE SYSTICK
  SysTick->CTRL = 0;
 80407d0:	4b08      	ldr	r3, [pc, #32]	; (80407f4 <main+0x2c>)
 80407d2:	2200      	movs	r2, #0
 80407d4:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80407d6:	f000 f80f 	bl	80407f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 80407da:	f7ff ff2d 	bl	8040638 <MX_ICACHE_Init>
  MX_GPIO_Init();
 80407de:	f7ff ff13 	bl	8040608 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80407e2:	f000 f9a5 	bl	8040b30 <MX_LPUART1_UART_Init>
  MX_DMA_Init();
 80407e6:	f7ff feb5 	bl	8040554 <MX_DMA_Init>
  MX_TIM2_Init();
 80407ea:	f000 f935 	bl	8040a58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  covert_channel();
 80407ee:	f7ff ff71 	bl	80406d4 <covert_channel>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80407f2:	e7fe      	b.n	80407f2 <main+0x2a>
 80407f4:	e000e010 	.word	0xe000e010

080407f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80407f8:	b580      	push	{r7, lr}
 80407fa:	b098      	sub	sp, #96	; 0x60
 80407fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80407fe:	f107 0318 	add.w	r3, r7, #24
 8040802:	2248      	movs	r2, #72	; 0x48
 8040804:	2100      	movs	r1, #0
 8040806:	4618      	mov	r0, r3
 8040808:	f003 ff86 	bl	8044718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 804080c:	1d3b      	adds	r3, r7, #4
 804080e:	2200      	movs	r2, #0
 8040810:	601a      	str	r2, [r3, #0]
 8040812:	605a      	str	r2, [r3, #4]
 8040814:	609a      	str	r2, [r3, #8]
 8040816:	60da      	str	r2, [r3, #12]
 8040818:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 804081a:	2000      	movs	r0, #0
 804081c:	f001 f85e 	bl	80418dc <HAL_PWREx_ControlVoltageScaling>
 8040820:	4603      	mov	r3, r0
 8040822:	2b00      	cmp	r3, #0
 8040824:	d001      	beq.n	804082a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8040826:	f000 f838 	bl	804089a <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 804082a:	2310      	movs	r3, #16
 804082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 804082e:	2301      	movs	r3, #1
 8040830:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8040832:	2300      	movs	r3, #0
 8040834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8040836:	2360      	movs	r3, #96	; 0x60
 8040838:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804083a:	2302      	movs	r3, #2
 804083c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 804083e:	2301      	movs	r3, #1
 8040840:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8040842:	2301      	movs	r3, #1
 8040844:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8040846:	2337      	movs	r3, #55	; 0x37
 8040848:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 804084a:	2307      	movs	r3, #7
 804084c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 804084e:	2302      	movs	r3, #2
 8040850:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8040852:	2302      	movs	r3, #2
 8040854:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040856:	f107 0318 	add.w	r3, r7, #24
 804085a:	4618      	mov	r0, r3
 804085c:	f001 f8ce 	bl	80419fc <HAL_RCC_OscConfig>
 8040860:	4603      	mov	r3, r0
 8040862:	2b00      	cmp	r3, #0
 8040864:	d001      	beq.n	804086a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8040866:	f000 f818 	bl	804089a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804086a:	230f      	movs	r3, #15
 804086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804086e:	2303      	movs	r3, #3
 8040870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040872:	2300      	movs	r3, #0
 8040874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8040876:	2300      	movs	r3, #0
 8040878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804087a:	2300      	movs	r3, #0
 804087c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 804087e:	1d3b      	adds	r3, r7, #4
 8040880:	2105      	movs	r1, #5
 8040882:	4618      	mov	r0, r3
 8040884:	f001 fd9c 	bl	80423c0 <HAL_RCC_ClockConfig>
 8040888:	4603      	mov	r3, r0
 804088a:	2b00      	cmp	r3, #0
 804088c:	d001      	beq.n	8040892 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 804088e:	f000 f804 	bl	804089a <Error_Handler>
  }
}
 8040892:	bf00      	nop
 8040894:	3760      	adds	r7, #96	; 0x60
 8040896:	46bd      	mov	sp, r7
 8040898:	bd80      	pop	{r7, pc}

0804089a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 804089a:	b480      	push	{r7}
 804089c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 804089e:	b672      	cpsid	i
}
 80408a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80408a2:	e7fe      	b.n	80408a2 <Error_Handler+0x8>

080408a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80408a4:	b480      	push	{r7}
 80408a6:	b083      	sub	sp, #12
 80408a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80408aa:	4b0f      	ldr	r3, [pc, #60]	; (80408e8 <HAL_MspInit+0x44>)
 80408ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80408ae:	4a0e      	ldr	r2, [pc, #56]	; (80408e8 <HAL_MspInit+0x44>)
 80408b0:	f043 0301 	orr.w	r3, r3, #1
 80408b4:	6613      	str	r3, [r2, #96]	; 0x60
 80408b6:	4b0c      	ldr	r3, [pc, #48]	; (80408e8 <HAL_MspInit+0x44>)
 80408b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80408ba:	f003 0301 	and.w	r3, r3, #1
 80408be:	607b      	str	r3, [r7, #4]
 80408c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80408c2:	4b09      	ldr	r3, [pc, #36]	; (80408e8 <HAL_MspInit+0x44>)
 80408c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80408c6:	4a08      	ldr	r2, [pc, #32]	; (80408e8 <HAL_MspInit+0x44>)
 80408c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80408cc:	6593      	str	r3, [r2, #88]	; 0x58
 80408ce:	4b06      	ldr	r3, [pc, #24]	; (80408e8 <HAL_MspInit+0x44>)
 80408d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80408d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80408d6:	603b      	str	r3, [r7, #0]
 80408d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80408da:	bf00      	nop
 80408dc:	370c      	adds	r7, #12
 80408de:	46bd      	mov	sp, r7
 80408e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408e4:	4770      	bx	lr
 80408e6:	bf00      	nop
 80408e8:	40021000 	.word	0x40021000

080408ec <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80408ec:	b480      	push	{r7}
 80408ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80408f0:	e7fe      	b.n	80408f0 <MemManage_Handler+0x4>

080408f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80408f2:	b480      	push	{r7}
 80408f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80408f6:	e7fe      	b.n	80408f6 <UsageFault_Handler+0x4>

080408f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80408f8:	b480      	push	{r7}
 80408fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80408fc:	bf00      	nop
 80408fe:	46bd      	mov	sp, r7
 8040900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040904:	4770      	bx	lr

08040906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040906:	b480      	push	{r7}
 8040908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804090a:	bf00      	nop
 804090c:	46bd      	mov	sp, r7
 804090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040912:	4770      	bx	lr

08040914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040914:	b580      	push	{r7, lr}
 8040916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040918:	f000 fa36 	bl	8040d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804091c:	bf00      	nop
 804091e:	bd80      	pop	{r7, pc}

08040920 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040920:	b580      	push	{r7, lr}
 8040922:	b086      	sub	sp, #24
 8040924:	af00      	add	r7, sp, #0
 8040926:	60f8      	str	r0, [r7, #12]
 8040928:	60b9      	str	r1, [r7, #8]
 804092a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804092c:	2300      	movs	r3, #0
 804092e:	617b      	str	r3, [r7, #20]
 8040930:	e00a      	b.n	8040948 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8040932:	e000      	b.n	8040936 <_read+0x16>
 8040934:	bf00      	nop
 8040936:	4601      	mov	r1, r0
 8040938:	68bb      	ldr	r3, [r7, #8]
 804093a:	1c5a      	adds	r2, r3, #1
 804093c:	60ba      	str	r2, [r7, #8]
 804093e:	b2ca      	uxtb	r2, r1
 8040940:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040942:	697b      	ldr	r3, [r7, #20]
 8040944:	3301      	adds	r3, #1
 8040946:	617b      	str	r3, [r7, #20]
 8040948:	697a      	ldr	r2, [r7, #20]
 804094a:	687b      	ldr	r3, [r7, #4]
 804094c:	429a      	cmp	r2, r3
 804094e:	dbf0      	blt.n	8040932 <_read+0x12>
	}

return len;
 8040950:	687b      	ldr	r3, [r7, #4]
}
 8040952:	4618      	mov	r0, r3
 8040954:	3718      	adds	r7, #24
 8040956:	46bd      	mov	sp, r7
 8040958:	bd80      	pop	{r7, pc}

0804095a <_close>:
	}
	return len;
}

int _close(int file)
{
 804095a:	b480      	push	{r7}
 804095c:	b083      	sub	sp, #12
 804095e:	af00      	add	r7, sp, #0
 8040960:	6078      	str	r0, [r7, #4]
	return -1;
 8040962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040966:	4618      	mov	r0, r3
 8040968:	370c      	adds	r7, #12
 804096a:	46bd      	mov	sp, r7
 804096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040970:	4770      	bx	lr

08040972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040972:	b480      	push	{r7}
 8040974:	b083      	sub	sp, #12
 8040976:	af00      	add	r7, sp, #0
 8040978:	6078      	str	r0, [r7, #4]
 804097a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 804097c:	683b      	ldr	r3, [r7, #0]
 804097e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040982:	605a      	str	r2, [r3, #4]
	return 0;
 8040984:	2300      	movs	r3, #0
}
 8040986:	4618      	mov	r0, r3
 8040988:	370c      	adds	r7, #12
 804098a:	46bd      	mov	sp, r7
 804098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040990:	4770      	bx	lr

08040992 <_isatty>:

int _isatty(int file)
{
 8040992:	b480      	push	{r7}
 8040994:	b083      	sub	sp, #12
 8040996:	af00      	add	r7, sp, #0
 8040998:	6078      	str	r0, [r7, #4]
	return 1;
 804099a:	2301      	movs	r3, #1
}
 804099c:	4618      	mov	r0, r3
 804099e:	370c      	adds	r7, #12
 80409a0:	46bd      	mov	sp, r7
 80409a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409a6:	4770      	bx	lr

080409a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80409a8:	b480      	push	{r7}
 80409aa:	b085      	sub	sp, #20
 80409ac:	af00      	add	r7, sp, #0
 80409ae:	60f8      	str	r0, [r7, #12]
 80409b0:	60b9      	str	r1, [r7, #8]
 80409b2:	607a      	str	r2, [r7, #4]
	return 0;
 80409b4:	2300      	movs	r3, #0
}
 80409b6:	4618      	mov	r0, r3
 80409b8:	3714      	adds	r7, #20
 80409ba:	46bd      	mov	sp, r7
 80409bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409c0:	4770      	bx	lr
	...

080409c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80409c4:	b580      	push	{r7, lr}
 80409c6:	b086      	sub	sp, #24
 80409c8:	af00      	add	r7, sp, #0
 80409ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80409cc:	4a14      	ldr	r2, [pc, #80]	; (8040a20 <_sbrk+0x5c>)
 80409ce:	4b15      	ldr	r3, [pc, #84]	; (8040a24 <_sbrk+0x60>)
 80409d0:	1ad3      	subs	r3, r2, r3
 80409d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80409d4:	697b      	ldr	r3, [r7, #20]
 80409d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80409d8:	4b13      	ldr	r3, [pc, #76]	; (8040a28 <_sbrk+0x64>)
 80409da:	681b      	ldr	r3, [r3, #0]
 80409dc:	2b00      	cmp	r3, #0
 80409de:	d102      	bne.n	80409e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80409e0:	4b11      	ldr	r3, [pc, #68]	; (8040a28 <_sbrk+0x64>)
 80409e2:	4a12      	ldr	r2, [pc, #72]	; (8040a2c <_sbrk+0x68>)
 80409e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80409e6:	4b10      	ldr	r3, [pc, #64]	; (8040a28 <_sbrk+0x64>)
 80409e8:	681a      	ldr	r2, [r3, #0]
 80409ea:	687b      	ldr	r3, [r7, #4]
 80409ec:	4413      	add	r3, r2
 80409ee:	693a      	ldr	r2, [r7, #16]
 80409f0:	429a      	cmp	r2, r3
 80409f2:	d207      	bcs.n	8040a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80409f4:	f003 fe66 	bl	80446c4 <__errno>
 80409f8:	4603      	mov	r3, r0
 80409fa:	220c      	movs	r2, #12
 80409fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80409fe:	f04f 33ff 	mov.w	r3, #4294967295
 8040a02:	e009      	b.n	8040a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040a04:	4b08      	ldr	r3, [pc, #32]	; (8040a28 <_sbrk+0x64>)
 8040a06:	681b      	ldr	r3, [r3, #0]
 8040a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040a0a:	4b07      	ldr	r3, [pc, #28]	; (8040a28 <_sbrk+0x64>)
 8040a0c:	681a      	ldr	r2, [r3, #0]
 8040a0e:	687b      	ldr	r3, [r7, #4]
 8040a10:	4413      	add	r3, r2
 8040a12:	4a05      	ldr	r2, [pc, #20]	; (8040a28 <_sbrk+0x64>)
 8040a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040a16:	68fb      	ldr	r3, [r7, #12]
}
 8040a18:	4618      	mov	r0, r3
 8040a1a:	3718      	adds	r7, #24
 8040a1c:	46bd      	mov	sp, r7
 8040a1e:	bd80      	pop	{r7, pc}
 8040a20:	20040000 	.word	0x20040000
 8040a24:	00000400 	.word	0x00000400
 8040a28:	2003009c 	.word	0x2003009c
 8040a2c:	20030200 	.word	0x20030200

08040a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8040a30:	b480      	push	{r7}
 8040a32:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8040a34:	bf00      	nop
 8040a36:	46bd      	mov	sp, r7
 8040a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a3c:	4770      	bx	lr
	...

08040a40 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8040a40:	b580      	push	{r7, lr}
 8040a42:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8040a44:	f004 fde0 	bl	8045608 <__SECURE_SystemCoreClockUpdate_veneer>
 8040a48:	4603      	mov	r3, r0
 8040a4a:	4a02      	ldr	r2, [pc, #8]	; (8040a54 <SystemCoreClockUpdate+0x14>)
 8040a4c:	6013      	str	r3, [r2, #0]
}
 8040a4e:	bf00      	nop
 8040a50:	bd80      	pop	{r7, pc}
 8040a52:	bf00      	nop
 8040a54:	20030000 	.word	0x20030000

08040a58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8040a58:	b580      	push	{r7, lr}
 8040a5a:	b088      	sub	sp, #32
 8040a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8040a5e:	f107 0310 	add.w	r3, r7, #16
 8040a62:	2200      	movs	r2, #0
 8040a64:	601a      	str	r2, [r3, #0]
 8040a66:	605a      	str	r2, [r3, #4]
 8040a68:	609a      	str	r2, [r3, #8]
 8040a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040a6c:	1d3b      	adds	r3, r7, #4
 8040a6e:	2200      	movs	r2, #0
 8040a70:	601a      	str	r2, [r3, #0]
 8040a72:	605a      	str	r2, [r3, #4]
 8040a74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8040a76:	4b1e      	ldr	r3, [pc, #120]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040a78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8040a7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8040a7e:	4b1c      	ldr	r3, [pc, #112]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040a80:	2200      	movs	r2, #0
 8040a82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040a84:	4b1a      	ldr	r3, [pc, #104]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040a86:	2200      	movs	r2, #0
 8040a88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8040a8a:	4b19      	ldr	r3, [pc, #100]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8040a90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040a92:	4b17      	ldr	r3, [pc, #92]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040a94:	2200      	movs	r2, #0
 8040a96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040a98:	4b15      	ldr	r3, [pc, #84]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040a9a:	2200      	movs	r2, #0
 8040a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8040a9e:	4814      	ldr	r0, [pc, #80]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040aa0:	f002 fc80 	bl	80433a4 <HAL_TIM_Base_Init>
 8040aa4:	4603      	mov	r3, r0
 8040aa6:	2b00      	cmp	r3, #0
 8040aa8:	d001      	beq.n	8040aae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8040aaa:	f7ff fef6 	bl	804089a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8040aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040ab2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8040ab4:	f107 0310 	add.w	r3, r7, #16
 8040ab8:	4619      	mov	r1, r3
 8040aba:	480d      	ldr	r0, [pc, #52]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040abc:	f002 fd59 	bl	8043572 <HAL_TIM_ConfigClockSource>
 8040ac0:	4603      	mov	r3, r0
 8040ac2:	2b00      	cmp	r3, #0
 8040ac4:	d001      	beq.n	8040aca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8040ac6:	f7ff fee8 	bl	804089a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040aca:	2300      	movs	r3, #0
 8040acc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040ace:	2300      	movs	r3, #0
 8040ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8040ad2:	1d3b      	adds	r3, r7, #4
 8040ad4:	4619      	mov	r1, r3
 8040ad6:	4806      	ldr	r0, [pc, #24]	; (8040af0 <MX_TIM2_Init+0x98>)
 8040ad8:	f002 ff48 	bl	804396c <HAL_TIMEx_MasterConfigSynchronization>
 8040adc:	4603      	mov	r3, r0
 8040ade:	2b00      	cmp	r3, #0
 8040ae0:	d001      	beq.n	8040ae6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8040ae2:	f7ff feda 	bl	804089a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8040ae6:	bf00      	nop
 8040ae8:	3720      	adds	r7, #32
 8040aea:	46bd      	mov	sp, r7
 8040aec:	bd80      	pop	{r7, pc}
 8040aee:	bf00      	nop
 8040af0:	20030110 	.word	0x20030110

08040af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8040af4:	b480      	push	{r7}
 8040af6:	b085      	sub	sp, #20
 8040af8:	af00      	add	r7, sp, #0
 8040afa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8040afc:	687b      	ldr	r3, [r7, #4]
 8040afe:	681b      	ldr	r3, [r3, #0]
 8040b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8040b04:	d10b      	bne.n	8040b1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8040b06:	4b09      	ldr	r3, [pc, #36]	; (8040b2c <HAL_TIM_Base_MspInit+0x38>)
 8040b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040b0a:	4a08      	ldr	r2, [pc, #32]	; (8040b2c <HAL_TIM_Base_MspInit+0x38>)
 8040b0c:	f043 0301 	orr.w	r3, r3, #1
 8040b10:	6593      	str	r3, [r2, #88]	; 0x58
 8040b12:	4b06      	ldr	r3, [pc, #24]	; (8040b2c <HAL_TIM_Base_MspInit+0x38>)
 8040b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040b16:	f003 0301 	and.w	r3, r3, #1
 8040b1a:	60fb      	str	r3, [r7, #12]
 8040b1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8040b1e:	bf00      	nop
 8040b20:	3714      	adds	r7, #20
 8040b22:	46bd      	mov	sp, r7
 8040b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b28:	4770      	bx	lr
 8040b2a:	bf00      	nop
 8040b2c:	40021000 	.word	0x40021000

08040b30 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8040b30:	b580      	push	{r7, lr}
 8040b32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8040b34:	4b22      	ldr	r3, [pc, #136]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b36:	4a23      	ldr	r2, [pc, #140]	; (8040bc4 <MX_LPUART1_UART_Init+0x94>)
 8040b38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8040b3a:	4b21      	ldr	r3, [pc, #132]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040b40:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040b42:	4b1f      	ldr	r3, [pc, #124]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b44:	2200      	movs	r2, #0
 8040b46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8040b48:	4b1d      	ldr	r3, [pc, #116]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b4a:	2200      	movs	r2, #0
 8040b4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8040b4e:	4b1c      	ldr	r3, [pc, #112]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b50:	2200      	movs	r2, #0
 8040b52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8040b54:	4b1a      	ldr	r3, [pc, #104]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b56:	220c      	movs	r2, #12
 8040b58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040b5a:	4b19      	ldr	r3, [pc, #100]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b5c:	2200      	movs	r2, #0
 8040b5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040b60:	4b17      	ldr	r3, [pc, #92]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b62:	2200      	movs	r2, #0
 8040b64:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040b66:	4b16      	ldr	r3, [pc, #88]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b68:	2200      	movs	r2, #0
 8040b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040b6c:	4b14      	ldr	r3, [pc, #80]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b6e:	2200      	movs	r2, #0
 8040b70:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8040b72:	4b13      	ldr	r3, [pc, #76]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b74:	2200      	movs	r2, #0
 8040b76:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8040b78:	4811      	ldr	r0, [pc, #68]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b7a:	f002 ff7f 	bl	8043a7c <HAL_UART_Init>
 8040b7e:	4603      	mov	r3, r0
 8040b80:	2b00      	cmp	r3, #0
 8040b82:	d001      	beq.n	8040b88 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8040b84:	f7ff fe89 	bl	804089a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040b88:	2100      	movs	r1, #0
 8040b8a:	480d      	ldr	r0, [pc, #52]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b8c:	f003 fcd0 	bl	8044530 <HAL_UARTEx_SetTxFifoThreshold>
 8040b90:	4603      	mov	r3, r0
 8040b92:	2b00      	cmp	r3, #0
 8040b94:	d001      	beq.n	8040b9a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8040b96:	f7ff fe80 	bl	804089a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040b9a:	2100      	movs	r1, #0
 8040b9c:	4808      	ldr	r0, [pc, #32]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040b9e:	f003 fd05 	bl	80445ac <HAL_UARTEx_SetRxFifoThreshold>
 8040ba2:	4603      	mov	r3, r0
 8040ba4:	2b00      	cmp	r3, #0
 8040ba6:	d001      	beq.n	8040bac <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040ba8:	f7ff fe77 	bl	804089a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8040bac:	4804      	ldr	r0, [pc, #16]	; (8040bc0 <MX_LPUART1_UART_Init+0x90>)
 8040bae:	f003 fc86 	bl	80444be <HAL_UARTEx_DisableFifoMode>
 8040bb2:	4603      	mov	r3, r0
 8040bb4:	2b00      	cmp	r3, #0
 8040bb6:	d001      	beq.n	8040bbc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040bb8:	f7ff fe6f 	bl	804089a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8040bbc:	bf00      	nop
 8040bbe:	bd80      	pop	{r7, pc}
 8040bc0:	2003015c 	.word	0x2003015c
 8040bc4:	40008000 	.word	0x40008000

08040bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8040bc8:	b580      	push	{r7, lr}
 8040bca:	b0ae      	sub	sp, #184	; 0xb8
 8040bcc:	af00      	add	r7, sp, #0
 8040bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040bd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040bd4:	2200      	movs	r2, #0
 8040bd6:	601a      	str	r2, [r3, #0]
 8040bd8:	605a      	str	r2, [r3, #4]
 8040bda:	609a      	str	r2, [r3, #8]
 8040bdc:	60da      	str	r2, [r3, #12]
 8040bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040be0:	f107 0310 	add.w	r3, r7, #16
 8040be4:	2294      	movs	r2, #148	; 0x94
 8040be6:	2100      	movs	r1, #0
 8040be8:	4618      	mov	r0, r3
 8040bea:	f003 fd95 	bl	8044718 <memset>
  if(uartHandle->Instance==LPUART1)
 8040bee:	687b      	ldr	r3, [r7, #4]
 8040bf0:	681b      	ldr	r3, [r3, #0]
 8040bf2:	4a22      	ldr	r2, [pc, #136]	; (8040c7c <HAL_UART_MspInit+0xb4>)
 8040bf4:	4293      	cmp	r3, r2
 8040bf6:	d13d      	bne.n	8040c74 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8040bf8:	2320      	movs	r3, #32
 8040bfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8040bfc:	2300      	movs	r3, #0
 8040bfe:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040c00:	f107 0310 	add.w	r3, r7, #16
 8040c04:	4618      	mov	r0, r3
 8040c06:	f001 feb7 	bl	8042978 <HAL_RCCEx_PeriphCLKConfig>
 8040c0a:	4603      	mov	r3, r0
 8040c0c:	2b00      	cmp	r3, #0
 8040c0e:	d001      	beq.n	8040c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8040c10:	f7ff fe43 	bl	804089a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8040c14:	4b1a      	ldr	r3, [pc, #104]	; (8040c80 <HAL_UART_MspInit+0xb8>)
 8040c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8040c18:	4a19      	ldr	r2, [pc, #100]	; (8040c80 <HAL_UART_MspInit+0xb8>)
 8040c1a:	f043 0301 	orr.w	r3, r3, #1
 8040c1e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8040c20:	4b17      	ldr	r3, [pc, #92]	; (8040c80 <HAL_UART_MspInit+0xb8>)
 8040c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8040c24:	f003 0301 	and.w	r3, r3, #1
 8040c28:	60fb      	str	r3, [r7, #12]
 8040c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8040c2c:	4b14      	ldr	r3, [pc, #80]	; (8040c80 <HAL_UART_MspInit+0xb8>)
 8040c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c30:	4a13      	ldr	r2, [pc, #76]	; (8040c80 <HAL_UART_MspInit+0xb8>)
 8040c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040c38:	4b11      	ldr	r3, [pc, #68]	; (8040c80 <HAL_UART_MspInit+0xb8>)
 8040c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040c40:	60bb      	str	r3, [r7, #8]
 8040c42:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8040c44:	f000 fea6 	bl	8041994 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8040c48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8040c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040c50:	2302      	movs	r3, #2
 8040c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c56:	2300      	movs	r3, #0
 8040c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c5c:	2300      	movs	r3, #0
 8040c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8040c62:	2308      	movs	r3, #8
 8040c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040c68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040c6c:	4619      	mov	r1, r3
 8040c6e:	4805      	ldr	r0, [pc, #20]	; (8040c84 <HAL_UART_MspInit+0xbc>)
 8040c70:	f000 fca6 	bl	80415c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8040c74:	bf00      	nop
 8040c76:	37b8      	adds	r7, #184	; 0xb8
 8040c78:	46bd      	mov	sp, r7
 8040c7a:	bd80      	pop	{r7, pc}
 8040c7c:	40008000 	.word	0x40008000
 8040c80:	40021000 	.word	0x40021000
 8040c84:	42021800 	.word	0x42021800

08040c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8040c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040cc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040c8c:	f7ff fed0 	bl	8040a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040c90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040c92:	e003      	b.n	8040c9c <LoopCopyDataInit>

08040c94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040c94:	4b0b      	ldr	r3, [pc, #44]	; (8040cc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8040c96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8040c98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8040c9a:	3104      	adds	r1, #4

08040c9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8040c9c:	480a      	ldr	r0, [pc, #40]	; (8040cc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8040c9e:	4b0b      	ldr	r3, [pc, #44]	; (8040ccc <LoopForever+0xe>)
	adds	r2, r0, r1
 8040ca0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040ca2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040ca4:	d3f6      	bcc.n	8040c94 <CopyDataInit>
	ldr	r2, =_sbss
 8040ca6:	4a0a      	ldr	r2, [pc, #40]	; (8040cd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8040ca8:	e002      	b.n	8040cb0 <LoopFillZerobss>

08040caa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8040caa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8040cac:	f842 3b04 	str.w	r3, [r2], #4

08040cb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040cb0:	4b08      	ldr	r3, [pc, #32]	; (8040cd4 <LoopForever+0x16>)
	cmp	r2, r3
 8040cb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040cb4:	d3f9      	bcc.n	8040caa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8040cb6:	f003 fd0b 	bl	80446d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8040cba:	f7ff fd85 	bl	80407c8 <main>

08040cbe <LoopForever>:

LoopForever:
    b LoopForever
 8040cbe:	e7fe      	b.n	8040cbe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040cc0:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8040cc4:	0804575c 	.word	0x0804575c
	ldr	r0, =_sdata
 8040cc8:	20030000 	.word	0x20030000
	ldr	r3, =_edata
 8040ccc:	20030070 	.word	0x20030070
	ldr	r2, =_sbss
 8040cd0:	20030070 	.word	0x20030070
	ldr	r3, = _ebss
 8040cd4:	20030200 	.word	0x20030200

08040cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040cd8:	e7fe      	b.n	8040cd8 <ADC1_2_IRQHandler>

08040cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040cda:	b580      	push	{r7, lr}
 8040cdc:	b082      	sub	sp, #8
 8040cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040ce0:	2300      	movs	r3, #0
 8040ce2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040ce4:	2004      	movs	r0, #4
 8040ce6:	f000 f93f 	bl	8040f68 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8040cea:	f7ff fea9 	bl	8040a40 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040cee:	2007      	movs	r0, #7
 8040cf0:	f000 f80e 	bl	8040d10 <HAL_InitTick>
 8040cf4:	4603      	mov	r3, r0
 8040cf6:	2b00      	cmp	r3, #0
 8040cf8:	d002      	beq.n	8040d00 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8040cfa:	2301      	movs	r3, #1
 8040cfc:	71fb      	strb	r3, [r7, #7]
 8040cfe:	e001      	b.n	8040d04 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040d00:	f7ff fdd0 	bl	80408a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040d04:	79fb      	ldrb	r3, [r7, #7]
}
 8040d06:	4618      	mov	r0, r3
 8040d08:	3708      	adds	r7, #8
 8040d0a:	46bd      	mov	sp, r7
 8040d0c:	bd80      	pop	{r7, pc}
	...

08040d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040d10:	b580      	push	{r7, lr}
 8040d12:	b084      	sub	sp, #16
 8040d14:	af00      	add	r7, sp, #0
 8040d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040d18:	2300      	movs	r3, #0
 8040d1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8040d1c:	4b17      	ldr	r3, [pc, #92]	; (8040d7c <HAL_InitTick+0x6c>)
 8040d1e:	781b      	ldrb	r3, [r3, #0]
 8040d20:	2b00      	cmp	r3, #0
 8040d22:	d023      	beq.n	8040d6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8040d24:	4b16      	ldr	r3, [pc, #88]	; (8040d80 <HAL_InitTick+0x70>)
 8040d26:	681a      	ldr	r2, [r3, #0]
 8040d28:	4b14      	ldr	r3, [pc, #80]	; (8040d7c <HAL_InitTick+0x6c>)
 8040d2a:	781b      	ldrb	r3, [r3, #0]
 8040d2c:	4619      	mov	r1, r3
 8040d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8040d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8040d3a:	4618      	mov	r0, r3
 8040d3c:	f000 f947 	bl	8040fce <HAL_SYSTICK_Config>
 8040d40:	4603      	mov	r3, r0
 8040d42:	2b00      	cmp	r3, #0
 8040d44:	d10f      	bne.n	8040d66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040d46:	687b      	ldr	r3, [r7, #4]
 8040d48:	2b07      	cmp	r3, #7
 8040d4a:	d809      	bhi.n	8040d60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040d4c:	2200      	movs	r2, #0
 8040d4e:	6879      	ldr	r1, [r7, #4]
 8040d50:	f04f 30ff 	mov.w	r0, #4294967295
 8040d54:	f000 f913 	bl	8040f7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040d58:	4a0a      	ldr	r2, [pc, #40]	; (8040d84 <HAL_InitTick+0x74>)
 8040d5a:	687b      	ldr	r3, [r7, #4]
 8040d5c:	6013      	str	r3, [r2, #0]
 8040d5e:	e007      	b.n	8040d70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8040d60:	2301      	movs	r3, #1
 8040d62:	73fb      	strb	r3, [r7, #15]
 8040d64:	e004      	b.n	8040d70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040d66:	2301      	movs	r3, #1
 8040d68:	73fb      	strb	r3, [r7, #15]
 8040d6a:	e001      	b.n	8040d70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040d6c:	2301      	movs	r3, #1
 8040d6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8040d72:	4618      	mov	r0, r3
 8040d74:	3710      	adds	r7, #16
 8040d76:	46bd      	mov	sp, r7
 8040d78:	bd80      	pop	{r7, pc}
 8040d7a:	bf00      	nop
 8040d7c:	20030008 	.word	0x20030008
 8040d80:	20030000 	.word	0x20030000
 8040d84:	20030004 	.word	0x20030004

08040d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040d88:	b480      	push	{r7}
 8040d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040d8c:	4b06      	ldr	r3, [pc, #24]	; (8040da8 <HAL_IncTick+0x20>)
 8040d8e:	781b      	ldrb	r3, [r3, #0]
 8040d90:	461a      	mov	r2, r3
 8040d92:	4b06      	ldr	r3, [pc, #24]	; (8040dac <HAL_IncTick+0x24>)
 8040d94:	681b      	ldr	r3, [r3, #0]
 8040d96:	4413      	add	r3, r2
 8040d98:	4a04      	ldr	r2, [pc, #16]	; (8040dac <HAL_IncTick+0x24>)
 8040d9a:	6013      	str	r3, [r2, #0]
}
 8040d9c:	bf00      	nop
 8040d9e:	46bd      	mov	sp, r7
 8040da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040da4:	4770      	bx	lr
 8040da6:	bf00      	nop
 8040da8:	20030008 	.word	0x20030008
 8040dac:	200301ec 	.word	0x200301ec

08040db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040db0:	b480      	push	{r7}
 8040db2:	af00      	add	r7, sp, #0
  return uwTick;
 8040db4:	4b03      	ldr	r3, [pc, #12]	; (8040dc4 <HAL_GetTick+0x14>)
 8040db6:	681b      	ldr	r3, [r3, #0]
}
 8040db8:	4618      	mov	r0, r3
 8040dba:	46bd      	mov	sp, r7
 8040dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dc0:	4770      	bx	lr
 8040dc2:	bf00      	nop
 8040dc4:	200301ec 	.word	0x200301ec

08040dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040dc8:	b480      	push	{r7}
 8040dca:	b085      	sub	sp, #20
 8040dcc:	af00      	add	r7, sp, #0
 8040dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040dd0:	687b      	ldr	r3, [r7, #4]
 8040dd2:	f003 0307 	and.w	r3, r3, #7
 8040dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040dd8:	4b0c      	ldr	r3, [pc, #48]	; (8040e0c <__NVIC_SetPriorityGrouping+0x44>)
 8040dda:	68db      	ldr	r3, [r3, #12]
 8040ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040dde:	68ba      	ldr	r2, [r7, #8]
 8040de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040de4:	4013      	ands	r3, r2
 8040de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040de8:	68fb      	ldr	r3, [r7, #12]
 8040dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040dec:	68bb      	ldr	r3, [r7, #8]
 8040dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040dfa:	4a04      	ldr	r2, [pc, #16]	; (8040e0c <__NVIC_SetPriorityGrouping+0x44>)
 8040dfc:	68bb      	ldr	r3, [r7, #8]
 8040dfe:	60d3      	str	r3, [r2, #12]
}
 8040e00:	bf00      	nop
 8040e02:	3714      	adds	r7, #20
 8040e04:	46bd      	mov	sp, r7
 8040e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e0a:	4770      	bx	lr
 8040e0c:	e000ed00 	.word	0xe000ed00

08040e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040e10:	b480      	push	{r7}
 8040e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040e14:	4b04      	ldr	r3, [pc, #16]	; (8040e28 <__NVIC_GetPriorityGrouping+0x18>)
 8040e16:	68db      	ldr	r3, [r3, #12]
 8040e18:	0a1b      	lsrs	r3, r3, #8
 8040e1a:	f003 0307 	and.w	r3, r3, #7
}
 8040e1e:	4618      	mov	r0, r3
 8040e20:	46bd      	mov	sp, r7
 8040e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e26:	4770      	bx	lr
 8040e28:	e000ed00 	.word	0xe000ed00

08040e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040e2c:	b480      	push	{r7}
 8040e2e:	b083      	sub	sp, #12
 8040e30:	af00      	add	r7, sp, #0
 8040e32:	4603      	mov	r3, r0
 8040e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040e3a:	2b00      	cmp	r3, #0
 8040e3c:	db0b      	blt.n	8040e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040e3e:	79fb      	ldrb	r3, [r7, #7]
 8040e40:	f003 021f 	and.w	r2, r3, #31
 8040e44:	4907      	ldr	r1, [pc, #28]	; (8040e64 <__NVIC_EnableIRQ+0x38>)
 8040e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040e4a:	095b      	lsrs	r3, r3, #5
 8040e4c:	2001      	movs	r0, #1
 8040e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8040e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040e56:	bf00      	nop
 8040e58:	370c      	adds	r7, #12
 8040e5a:	46bd      	mov	sp, r7
 8040e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e60:	4770      	bx	lr
 8040e62:	bf00      	nop
 8040e64:	e000e100 	.word	0xe000e100

08040e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040e68:	b480      	push	{r7}
 8040e6a:	b083      	sub	sp, #12
 8040e6c:	af00      	add	r7, sp, #0
 8040e6e:	4603      	mov	r3, r0
 8040e70:	6039      	str	r1, [r7, #0]
 8040e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040e78:	2b00      	cmp	r3, #0
 8040e7a:	db0a      	blt.n	8040e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e7c:	683b      	ldr	r3, [r7, #0]
 8040e7e:	b2da      	uxtb	r2, r3
 8040e80:	490c      	ldr	r1, [pc, #48]	; (8040eb4 <__NVIC_SetPriority+0x4c>)
 8040e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040e86:	0152      	lsls	r2, r2, #5
 8040e88:	b2d2      	uxtb	r2, r2
 8040e8a:	440b      	add	r3, r1
 8040e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040e90:	e00a      	b.n	8040ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e92:	683b      	ldr	r3, [r7, #0]
 8040e94:	b2da      	uxtb	r2, r3
 8040e96:	4908      	ldr	r1, [pc, #32]	; (8040eb8 <__NVIC_SetPriority+0x50>)
 8040e98:	79fb      	ldrb	r3, [r7, #7]
 8040e9a:	f003 030f 	and.w	r3, r3, #15
 8040e9e:	3b04      	subs	r3, #4
 8040ea0:	0152      	lsls	r2, r2, #5
 8040ea2:	b2d2      	uxtb	r2, r2
 8040ea4:	440b      	add	r3, r1
 8040ea6:	761a      	strb	r2, [r3, #24]
}
 8040ea8:	bf00      	nop
 8040eaa:	370c      	adds	r7, #12
 8040eac:	46bd      	mov	sp, r7
 8040eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eb2:	4770      	bx	lr
 8040eb4:	e000e100 	.word	0xe000e100
 8040eb8:	e000ed00 	.word	0xe000ed00

08040ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040ebc:	b480      	push	{r7}
 8040ebe:	b089      	sub	sp, #36	; 0x24
 8040ec0:	af00      	add	r7, sp, #0
 8040ec2:	60f8      	str	r0, [r7, #12]
 8040ec4:	60b9      	str	r1, [r7, #8]
 8040ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040ec8:	68fb      	ldr	r3, [r7, #12]
 8040eca:	f003 0307 	and.w	r3, r3, #7
 8040ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040ed0:	69fb      	ldr	r3, [r7, #28]
 8040ed2:	f1c3 0307 	rsb	r3, r3, #7
 8040ed6:	2b03      	cmp	r3, #3
 8040ed8:	bf28      	it	cs
 8040eda:	2303      	movcs	r3, #3
 8040edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040ede:	69fb      	ldr	r3, [r7, #28]
 8040ee0:	3303      	adds	r3, #3
 8040ee2:	2b06      	cmp	r3, #6
 8040ee4:	d902      	bls.n	8040eec <NVIC_EncodePriority+0x30>
 8040ee6:	69fb      	ldr	r3, [r7, #28]
 8040ee8:	3b04      	subs	r3, #4
 8040eea:	e000      	b.n	8040eee <NVIC_EncodePriority+0x32>
 8040eec:	2300      	movs	r3, #0
 8040eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8040ef4:	69bb      	ldr	r3, [r7, #24]
 8040ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8040efa:	43da      	mvns	r2, r3
 8040efc:	68bb      	ldr	r3, [r7, #8]
 8040efe:	401a      	ands	r2, r3
 8040f00:	697b      	ldr	r3, [r7, #20]
 8040f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040f04:	f04f 31ff 	mov.w	r1, #4294967295
 8040f08:	697b      	ldr	r3, [r7, #20]
 8040f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8040f0e:	43d9      	mvns	r1, r3
 8040f10:	687b      	ldr	r3, [r7, #4]
 8040f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040f14:	4313      	orrs	r3, r2
         );
}
 8040f16:	4618      	mov	r0, r3
 8040f18:	3724      	adds	r7, #36	; 0x24
 8040f1a:	46bd      	mov	sp, r7
 8040f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f20:	4770      	bx	lr
	...

08040f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040f24:	b580      	push	{r7, lr}
 8040f26:	b082      	sub	sp, #8
 8040f28:	af00      	add	r7, sp, #0
 8040f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040f2c:	687b      	ldr	r3, [r7, #4]
 8040f2e:	3b01      	subs	r3, #1
 8040f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040f34:	d301      	bcc.n	8040f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040f36:	2301      	movs	r3, #1
 8040f38:	e00f      	b.n	8040f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040f3a:	4a0a      	ldr	r2, [pc, #40]	; (8040f64 <SysTick_Config+0x40>)
 8040f3c:	687b      	ldr	r3, [r7, #4]
 8040f3e:	3b01      	subs	r3, #1
 8040f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040f42:	2107      	movs	r1, #7
 8040f44:	f04f 30ff 	mov.w	r0, #4294967295
 8040f48:	f7ff ff8e 	bl	8040e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040f4c:	4b05      	ldr	r3, [pc, #20]	; (8040f64 <SysTick_Config+0x40>)
 8040f4e:	2200      	movs	r2, #0
 8040f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040f52:	4b04      	ldr	r3, [pc, #16]	; (8040f64 <SysTick_Config+0x40>)
 8040f54:	2207      	movs	r2, #7
 8040f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040f58:	2300      	movs	r3, #0
}
 8040f5a:	4618      	mov	r0, r3
 8040f5c:	3708      	adds	r7, #8
 8040f5e:	46bd      	mov	sp, r7
 8040f60:	bd80      	pop	{r7, pc}
 8040f62:	bf00      	nop
 8040f64:	e000e010 	.word	0xe000e010

08040f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040f68:	b580      	push	{r7, lr}
 8040f6a:	b082      	sub	sp, #8
 8040f6c:	af00      	add	r7, sp, #0
 8040f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040f70:	6878      	ldr	r0, [r7, #4]
 8040f72:	f7ff ff29 	bl	8040dc8 <__NVIC_SetPriorityGrouping>
}
 8040f76:	bf00      	nop
 8040f78:	3708      	adds	r7, #8
 8040f7a:	46bd      	mov	sp, r7
 8040f7c:	bd80      	pop	{r7, pc}

08040f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040f7e:	b580      	push	{r7, lr}
 8040f80:	b086      	sub	sp, #24
 8040f82:	af00      	add	r7, sp, #0
 8040f84:	4603      	mov	r3, r0
 8040f86:	60b9      	str	r1, [r7, #8]
 8040f88:	607a      	str	r2, [r7, #4]
 8040f8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040f8c:	f7ff ff40 	bl	8040e10 <__NVIC_GetPriorityGrouping>
 8040f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040f92:	687a      	ldr	r2, [r7, #4]
 8040f94:	68b9      	ldr	r1, [r7, #8]
 8040f96:	6978      	ldr	r0, [r7, #20]
 8040f98:	f7ff ff90 	bl	8040ebc <NVIC_EncodePriority>
 8040f9c:	4602      	mov	r2, r0
 8040f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040fa2:	4611      	mov	r1, r2
 8040fa4:	4618      	mov	r0, r3
 8040fa6:	f7ff ff5f 	bl	8040e68 <__NVIC_SetPriority>
}
 8040faa:	bf00      	nop
 8040fac:	3718      	adds	r7, #24
 8040fae:	46bd      	mov	sp, r7
 8040fb0:	bd80      	pop	{r7, pc}

08040fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040fb2:	b580      	push	{r7, lr}
 8040fb4:	b082      	sub	sp, #8
 8040fb6:	af00      	add	r7, sp, #0
 8040fb8:	4603      	mov	r3, r0
 8040fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040fc0:	4618      	mov	r0, r3
 8040fc2:	f7ff ff33 	bl	8040e2c <__NVIC_EnableIRQ>
}
 8040fc6:	bf00      	nop
 8040fc8:	3708      	adds	r7, #8
 8040fca:	46bd      	mov	sp, r7
 8040fcc:	bd80      	pop	{r7, pc}

08040fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040fce:	b580      	push	{r7, lr}
 8040fd0:	b082      	sub	sp, #8
 8040fd2:	af00      	add	r7, sp, #0
 8040fd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8040fd6:	6878      	ldr	r0, [r7, #4]
 8040fd8:	f7ff ffa4 	bl	8040f24 <SysTick_Config>
 8040fdc:	4603      	mov	r3, r0
}
 8040fde:	4618      	mov	r0, r3
 8040fe0:	3708      	adds	r7, #8
 8040fe2:	46bd      	mov	sp, r7
 8040fe4:	bd80      	pop	{r7, pc}
	...

08040fe8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8040fe8:	b580      	push	{r7, lr}
 8040fea:	b084      	sub	sp, #16
 8040fec:	af00      	add	r7, sp, #0
 8040fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8040ff0:	687b      	ldr	r3, [r7, #4]
 8040ff2:	2b00      	cmp	r3, #0
 8040ff4:	d101      	bne.n	8040ffa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8040ff6:	2301      	movs	r3, #1
 8040ff8:	e08d      	b.n	8041116 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8040ffa:	687b      	ldr	r3, [r7, #4]
 8040ffc:	681b      	ldr	r3, [r3, #0]
 8040ffe:	461a      	mov	r2, r3
 8041000:	4b47      	ldr	r3, [pc, #284]	; (8041120 <HAL_DMA_Init+0x138>)
 8041002:	429a      	cmp	r2, r3
 8041004:	d80f      	bhi.n	8041026 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8041006:	687b      	ldr	r3, [r7, #4]
 8041008:	681b      	ldr	r3, [r3, #0]
 804100a:	461a      	mov	r2, r3
 804100c:	4b45      	ldr	r3, [pc, #276]	; (8041124 <HAL_DMA_Init+0x13c>)
 804100e:	4413      	add	r3, r2
 8041010:	4a45      	ldr	r2, [pc, #276]	; (8041128 <HAL_DMA_Init+0x140>)
 8041012:	fba2 2303 	umull	r2, r3, r2, r3
 8041016:	091b      	lsrs	r3, r3, #4
 8041018:	009a      	lsls	r2, r3, #2
 804101a:	687b      	ldr	r3, [r7, #4]
 804101c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 804101e:	687b      	ldr	r3, [r7, #4]
 8041020:	4a42      	ldr	r2, [pc, #264]	; (804112c <HAL_DMA_Init+0x144>)
 8041022:	649a      	str	r2, [r3, #72]	; 0x48
 8041024:	e00e      	b.n	8041044 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8041026:	687b      	ldr	r3, [r7, #4]
 8041028:	681b      	ldr	r3, [r3, #0]
 804102a:	461a      	mov	r2, r3
 804102c:	4b40      	ldr	r3, [pc, #256]	; (8041130 <HAL_DMA_Init+0x148>)
 804102e:	4413      	add	r3, r2
 8041030:	4a3d      	ldr	r2, [pc, #244]	; (8041128 <HAL_DMA_Init+0x140>)
 8041032:	fba2 2303 	umull	r2, r3, r2, r3
 8041036:	091b      	lsrs	r3, r3, #4
 8041038:	009a      	lsls	r2, r3, #2
 804103a:	687b      	ldr	r3, [r7, #4]
 804103c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 804103e:	687b      	ldr	r3, [r7, #4]
 8041040:	4a3c      	ldr	r2, [pc, #240]	; (8041134 <HAL_DMA_Init+0x14c>)
 8041042:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8041044:	687b      	ldr	r3, [r7, #4]
 8041046:	2202      	movs	r2, #2
 8041048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 804104c:	687b      	ldr	r3, [r7, #4]
 804104e:	681b      	ldr	r3, [r3, #0]
 8041050:	681b      	ldr	r3, [r3, #0]
 8041052:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8041054:	68fb      	ldr	r3, [r7, #12]
 8041056:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 804105a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 804105e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8041060:	687b      	ldr	r3, [r7, #4]
 8041062:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041064:	687b      	ldr	r3, [r7, #4]
 8041066:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8041068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804106a:	687b      	ldr	r3, [r7, #4]
 804106c:	691b      	ldr	r3, [r3, #16]
 804106e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041070:	687b      	ldr	r3, [r7, #4]
 8041072:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041076:	687b      	ldr	r3, [r7, #4]
 8041078:	699b      	ldr	r3, [r3, #24]
 804107a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 804107c:	687b      	ldr	r3, [r7, #4]
 804107e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8041082:	687b      	ldr	r3, [r7, #4]
 8041084:	6a1b      	ldr	r3, [r3, #32]
 8041086:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8041088:	68fa      	ldr	r2, [r7, #12]
 804108a:	4313      	orrs	r3, r2
 804108c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 804108e:	687b      	ldr	r3, [r7, #4]
 8041090:	681b      	ldr	r3, [r3, #0]
 8041092:	68fa      	ldr	r2, [r7, #12]
 8041094:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8041096:	6878      	ldr	r0, [r7, #4]
 8041098:	f000 fa30 	bl	80414fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 804109c:	687b      	ldr	r3, [r7, #4]
 804109e:	689b      	ldr	r3, [r3, #8]
 80410a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80410a4:	d102      	bne.n	80410ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80410a6:	687b      	ldr	r3, [r7, #4]
 80410a8:	2200      	movs	r2, #0
 80410aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80410ac:	687b      	ldr	r3, [r7, #4]
 80410ae:	685a      	ldr	r2, [r3, #4]
 80410b0:	687b      	ldr	r3, [r7, #4]
 80410b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80410b4:	b2d2      	uxtb	r2, r2
 80410b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80410b8:	687b      	ldr	r3, [r7, #4]
 80410ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80410bc:	687a      	ldr	r2, [r7, #4]
 80410be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80410c0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80410c2:	687b      	ldr	r3, [r7, #4]
 80410c4:	685b      	ldr	r3, [r3, #4]
 80410c6:	2b00      	cmp	r3, #0
 80410c8:	d010      	beq.n	80410ec <HAL_DMA_Init+0x104>
 80410ca:	687b      	ldr	r3, [r7, #4]
 80410cc:	685b      	ldr	r3, [r3, #4]
 80410ce:	2b04      	cmp	r3, #4
 80410d0:	d80c      	bhi.n	80410ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80410d2:	6878      	ldr	r0, [r7, #4]
 80410d4:	f000 fa50 	bl	8041578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80410d8:	687b      	ldr	r3, [r7, #4]
 80410da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80410dc:	2200      	movs	r2, #0
 80410de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80410e0:	687b      	ldr	r3, [r7, #4]
 80410e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80410e4:	687a      	ldr	r2, [r7, #4]
 80410e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80410e8:	605a      	str	r2, [r3, #4]
 80410ea:	e008      	b.n	80410fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80410ec:	687b      	ldr	r3, [r7, #4]
 80410ee:	2200      	movs	r2, #0
 80410f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80410f2:	687b      	ldr	r3, [r7, #4]
 80410f4:	2200      	movs	r2, #0
 80410f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80410f8:	687b      	ldr	r3, [r7, #4]
 80410fa:	2200      	movs	r2, #0
 80410fc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80410fe:	687b      	ldr	r3, [r7, #4]
 8041100:	2200      	movs	r2, #0
 8041102:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8041104:	687b      	ldr	r3, [r7, #4]
 8041106:	2201      	movs	r2, #1
 8041108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 804110c:	687b      	ldr	r3, [r7, #4]
 804110e:	2200      	movs	r2, #0
 8041110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8041114:	2300      	movs	r3, #0
}
 8041116:	4618      	mov	r0, r3
 8041118:	3710      	adds	r7, #16
 804111a:	46bd      	mov	sp, r7
 804111c:	bd80      	pop	{r7, pc}
 804111e:	bf00      	nop
 8041120:	40020407 	.word	0x40020407
 8041124:	bffdfff8 	.word	0xbffdfff8
 8041128:	cccccccd 	.word	0xcccccccd
 804112c:	40020000 	.word	0x40020000
 8041130:	bffdfbf8 	.word	0xbffdfbf8
 8041134:	40020400 	.word	0x40020400

08041138 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8041138:	b580      	push	{r7, lr}
 804113a:	b086      	sub	sp, #24
 804113c:	af00      	add	r7, sp, #0
 804113e:	60f8      	str	r0, [r7, #12]
 8041140:	60b9      	str	r1, [r7, #8]
 8041142:	607a      	str	r2, [r7, #4]
 8041144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041146:	2300      	movs	r3, #0
 8041148:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 804114a:	68fb      	ldr	r3, [r7, #12]
 804114c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8041150:	2b01      	cmp	r3, #1
 8041152:	d101      	bne.n	8041158 <HAL_DMA_Start_IT+0x20>
 8041154:	2302      	movs	r3, #2
 8041156:	e05e      	b.n	8041216 <HAL_DMA_Start_IT+0xde>
 8041158:	68fb      	ldr	r3, [r7, #12]
 804115a:	2201      	movs	r2, #1
 804115c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8041160:	68fb      	ldr	r3, [r7, #12]
 8041162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8041166:	b2db      	uxtb	r3, r3
 8041168:	2b01      	cmp	r3, #1
 804116a:	d14d      	bne.n	8041208 <HAL_DMA_Start_IT+0xd0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 804116c:	68fb      	ldr	r3, [r7, #12]
 804116e:	2202      	movs	r2, #2
 8041170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041174:	68fb      	ldr	r3, [r7, #12]
 8041176:	2200      	movs	r2, #0
 8041178:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 804117a:	68fb      	ldr	r3, [r7, #12]
 804117c:	681b      	ldr	r3, [r3, #0]
 804117e:	681a      	ldr	r2, [r3, #0]
 8041180:	68fb      	ldr	r3, [r7, #12]
 8041182:	681b      	ldr	r3, [r3, #0]
 8041184:	f022 0201 	bic.w	r2, r2, #1
 8041188:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 804118a:	683b      	ldr	r3, [r7, #0]
 804118c:	687a      	ldr	r2, [r7, #4]
 804118e:	68b9      	ldr	r1, [r7, #8]
 8041190:	68f8      	ldr	r0, [r7, #12]
 8041192:	f000 f974 	bl	804147e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8041196:	68fb      	ldr	r3, [r7, #12]
 8041198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804119a:	2b00      	cmp	r3, #0
 804119c:	d008      	beq.n	80411b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 804119e:	68fb      	ldr	r3, [r7, #12]
 80411a0:	681b      	ldr	r3, [r3, #0]
 80411a2:	681a      	ldr	r2, [r3, #0]
 80411a4:	68fb      	ldr	r3, [r7, #12]
 80411a6:	681b      	ldr	r3, [r3, #0]
 80411a8:	f042 020e 	orr.w	r2, r2, #14
 80411ac:	601a      	str	r2, [r3, #0]
 80411ae:	e00f      	b.n	80411d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80411b0:	68fb      	ldr	r3, [r7, #12]
 80411b2:	681b      	ldr	r3, [r3, #0]
 80411b4:	681a      	ldr	r2, [r3, #0]
 80411b6:	68fb      	ldr	r3, [r7, #12]
 80411b8:	681b      	ldr	r3, [r3, #0]
 80411ba:	f022 0204 	bic.w	r2, r2, #4
 80411be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80411c0:	68fb      	ldr	r3, [r7, #12]
 80411c2:	681b      	ldr	r3, [r3, #0]
 80411c4:	681a      	ldr	r2, [r3, #0]
 80411c6:	68fb      	ldr	r3, [r7, #12]
 80411c8:	681b      	ldr	r3, [r3, #0]
 80411ca:	f042 020a 	orr.w	r2, r2, #10
 80411ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80411d0:	68fb      	ldr	r3, [r7, #12]
 80411d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80411d4:	681b      	ldr	r3, [r3, #0]
 80411d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80411da:	2b00      	cmp	r3, #0
 80411dc:	d007      	beq.n	80411ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80411de:	68fb      	ldr	r3, [r7, #12]
 80411e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80411e2:	681a      	ldr	r2, [r3, #0]
 80411e4:	68fb      	ldr	r3, [r7, #12]
 80411e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80411e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80411ec:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80411ee:	68fb      	ldr	r3, [r7, #12]
 80411f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80411f2:	2b00      	cmp	r3, #0
 80411f4:	d00e      	beq.n	8041214 <HAL_DMA_Start_IT+0xdc>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80411f6:	68fb      	ldr	r3, [r7, #12]
 80411f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80411fa:	681a      	ldr	r2, [r3, #0]
 80411fc:	68fb      	ldr	r3, [r7, #12]
 80411fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8041204:	601a      	str	r2, [r3, #0]
 8041206:	e005      	b.n	8041214 <HAL_DMA_Start_IT+0xdc>
//    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041208:	68fb      	ldr	r3, [r7, #12]
 804120a:	2200      	movs	r2, #0
 804120c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8041210:	2302      	movs	r3, #2
 8041212:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8041214:	7dfb      	ldrb	r3, [r7, #23]
}
 8041216:	4618      	mov	r0, r3
 8041218:	3718      	adds	r7, #24
 804121a:	46bd      	mov	sp, r7
 804121c:	bd80      	pop	{r7, pc}

0804121e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 804121e:	b580      	push	{r7, lr}
 8041220:	b084      	sub	sp, #16
 8041222:	af00      	add	r7, sp, #0
 8041224:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8041226:	687b      	ldr	r3, [r7, #4]
 8041228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804122a:	681b      	ldr	r3, [r3, #0]
 804122c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 804122e:	687b      	ldr	r3, [r7, #4]
 8041230:	681b      	ldr	r3, [r3, #0]
 8041232:	681b      	ldr	r3, [r3, #0]
 8041234:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8041236:	687b      	ldr	r3, [r7, #4]
 8041238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804123a:	f003 031c 	and.w	r3, r3, #28
 804123e:	2204      	movs	r2, #4
 8041240:	409a      	lsls	r2, r3
 8041242:	68fb      	ldr	r3, [r7, #12]
 8041244:	4013      	ands	r3, r2
 8041246:	2b00      	cmp	r3, #0
 8041248:	d053      	beq.n	80412f2 <HAL_DMA_IRQHandler+0xd4>
 804124a:	68bb      	ldr	r3, [r7, #8]
 804124c:	f003 0304 	and.w	r3, r3, #4
 8041250:	2b00      	cmp	r3, #0
 8041252:	d04e      	beq.n	80412f2 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8041254:	687b      	ldr	r3, [r7, #4]
 8041256:	681b      	ldr	r3, [r3, #0]
 8041258:	681b      	ldr	r3, [r3, #0]
 804125a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804125e:	2b00      	cmp	r3, #0
 8041260:	d024      	beq.n	80412ac <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8041262:	687b      	ldr	r3, [r7, #4]
 8041264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041266:	f003 021c 	and.w	r2, r3, #28
 804126a:	687b      	ldr	r3, [r7, #4]
 804126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804126e:	2104      	movs	r1, #4
 8041270:	fa01 f202 	lsl.w	r2, r1, r2
 8041274:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8041276:	687b      	ldr	r3, [r7, #4]
 8041278:	681b      	ldr	r3, [r3, #0]
 804127a:	681b      	ldr	r3, [r3, #0]
 804127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041280:	2b00      	cmp	r3, #0
 8041282:	d109      	bne.n	8041298 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8041284:	687b      	ldr	r3, [r7, #4]
 8041286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041288:	2b00      	cmp	r3, #0
 804128a:	f000 80c0 	beq.w	804140e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 804128e:	687b      	ldr	r3, [r7, #4]
 8041290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041292:	6878      	ldr	r0, [r7, #4]
 8041294:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8041296:	e0ba      	b.n	804140e <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8041298:	687b      	ldr	r3, [r7, #4]
 804129a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804129c:	2b00      	cmp	r3, #0
 804129e:	f000 80b6 	beq.w	804140e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80412a2:	687b      	ldr	r3, [r7, #4]
 80412a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80412a6:	6878      	ldr	r0, [r7, #4]
 80412a8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80412aa:	e0b0      	b.n	804140e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80412ac:	687b      	ldr	r3, [r7, #4]
 80412ae:	681b      	ldr	r3, [r3, #0]
 80412b0:	681b      	ldr	r3, [r3, #0]
 80412b2:	f003 0320 	and.w	r3, r3, #32
 80412b6:	2b00      	cmp	r3, #0
 80412b8:	d107      	bne.n	80412ca <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80412ba:	687b      	ldr	r3, [r7, #4]
 80412bc:	681b      	ldr	r3, [r3, #0]
 80412be:	681a      	ldr	r2, [r3, #0]
 80412c0:	687b      	ldr	r3, [r7, #4]
 80412c2:	681b      	ldr	r3, [r3, #0]
 80412c4:	f022 0204 	bic.w	r2, r2, #4
 80412c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80412ca:	687b      	ldr	r3, [r7, #4]
 80412cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80412ce:	f003 021c 	and.w	r2, r3, #28
 80412d2:	687b      	ldr	r3, [r7, #4]
 80412d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80412d6:	2104      	movs	r1, #4
 80412d8:	fa01 f202 	lsl.w	r2, r1, r2
 80412dc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80412de:	687b      	ldr	r3, [r7, #4]
 80412e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80412e2:	2b00      	cmp	r3, #0
 80412e4:	f000 8093 	beq.w	804140e <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80412e8:	687b      	ldr	r3, [r7, #4]
 80412ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80412ec:	6878      	ldr	r0, [r7, #4]
 80412ee:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80412f0:	e08d      	b.n	804140e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80412f2:	687b      	ldr	r3, [r7, #4]
 80412f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80412f6:	f003 031c 	and.w	r3, r3, #28
 80412fa:	2202      	movs	r2, #2
 80412fc:	409a      	lsls	r2, r3
 80412fe:	68fb      	ldr	r3, [r7, #12]
 8041300:	4013      	ands	r3, r2
 8041302:	2b00      	cmp	r3, #0
 8041304:	d04e      	beq.n	80413a4 <HAL_DMA_IRQHandler+0x186>
 8041306:	68bb      	ldr	r3, [r7, #8]
 8041308:	f003 0302 	and.w	r3, r3, #2
 804130c:	2b00      	cmp	r3, #0
 804130e:	d049      	beq.n	80413a4 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8041310:	687b      	ldr	r3, [r7, #4]
 8041312:	681b      	ldr	r3, [r3, #0]
 8041314:	681b      	ldr	r3, [r3, #0]
 8041316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804131a:	2b00      	cmp	r3, #0
 804131c:	d018      	beq.n	8041350 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 804131e:	687b      	ldr	r3, [r7, #4]
 8041320:	681b      	ldr	r3, [r3, #0]
 8041322:	681b      	ldr	r3, [r3, #0]
 8041324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041328:	2b00      	cmp	r3, #0
 804132a:	d108      	bne.n	804133e <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 804132c:	687b      	ldr	r3, [r7, #4]
 804132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041330:	2b00      	cmp	r3, #0
 8041332:	d06e      	beq.n	8041412 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8041334:	687b      	ldr	r3, [r7, #4]
 8041336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041338:	6878      	ldr	r0, [r7, #4]
 804133a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804133c:	e069      	b.n	8041412 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 804133e:	687b      	ldr	r3, [r7, #4]
 8041340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041342:	2b00      	cmp	r3, #0
 8041344:	d065      	beq.n	8041412 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8041346:	687b      	ldr	r3, [r7, #4]
 8041348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804134a:	6878      	ldr	r0, [r7, #4]
 804134c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804134e:	e060      	b.n	8041412 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8041350:	687b      	ldr	r3, [r7, #4]
 8041352:	681b      	ldr	r3, [r3, #0]
 8041354:	681b      	ldr	r3, [r3, #0]
 8041356:	f003 0320 	and.w	r3, r3, #32
 804135a:	2b00      	cmp	r3, #0
 804135c:	d10b      	bne.n	8041376 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 804135e:	687b      	ldr	r3, [r7, #4]
 8041360:	681b      	ldr	r3, [r3, #0]
 8041362:	681a      	ldr	r2, [r3, #0]
 8041364:	687b      	ldr	r3, [r7, #4]
 8041366:	681b      	ldr	r3, [r3, #0]
 8041368:	f022 020a 	bic.w	r2, r2, #10
 804136c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 804136e:	687b      	ldr	r3, [r7, #4]
 8041370:	2201      	movs	r2, #1
 8041372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8041376:	687b      	ldr	r3, [r7, #4]
 8041378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804137a:	f003 021c 	and.w	r2, r3, #28
 804137e:	687b      	ldr	r3, [r7, #4]
 8041380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041382:	2102      	movs	r1, #2
 8041384:	fa01 f202 	lsl.w	r2, r1, r2
 8041388:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 804138a:	687b      	ldr	r3, [r7, #4]
 804138c:	2200      	movs	r2, #0
 804138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8041392:	687b      	ldr	r3, [r7, #4]
 8041394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041396:	2b00      	cmp	r3, #0
 8041398:	d03b      	beq.n	8041412 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 804139a:	687b      	ldr	r3, [r7, #4]
 804139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804139e:	6878      	ldr	r0, [r7, #4]
 80413a0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80413a2:	e036      	b.n	8041412 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80413a4:	687b      	ldr	r3, [r7, #4]
 80413a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80413a8:	f003 031c 	and.w	r3, r3, #28
 80413ac:	2208      	movs	r2, #8
 80413ae:	409a      	lsls	r2, r3
 80413b0:	68fb      	ldr	r3, [r7, #12]
 80413b2:	4013      	ands	r3, r2
 80413b4:	2b00      	cmp	r3, #0
 80413b6:	d02e      	beq.n	8041416 <HAL_DMA_IRQHandler+0x1f8>
 80413b8:	68bb      	ldr	r3, [r7, #8]
 80413ba:	f003 0308 	and.w	r3, r3, #8
 80413be:	2b00      	cmp	r3, #0
 80413c0:	d029      	beq.n	8041416 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80413c2:	687b      	ldr	r3, [r7, #4]
 80413c4:	681b      	ldr	r3, [r3, #0]
 80413c6:	681a      	ldr	r2, [r3, #0]
 80413c8:	687b      	ldr	r3, [r7, #4]
 80413ca:	681b      	ldr	r3, [r3, #0]
 80413cc:	f022 020e 	bic.w	r2, r2, #14
 80413d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80413d2:	687b      	ldr	r3, [r7, #4]
 80413d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80413d6:	f003 021c 	and.w	r2, r3, #28
 80413da:	687b      	ldr	r3, [r7, #4]
 80413dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80413de:	2101      	movs	r1, #1
 80413e0:	fa01 f202 	lsl.w	r2, r1, r2
 80413e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80413e6:	687b      	ldr	r3, [r7, #4]
 80413e8:	2201      	movs	r2, #1
 80413ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80413ec:	687b      	ldr	r3, [r7, #4]
 80413ee:	2201      	movs	r2, #1
 80413f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80413f4:	687b      	ldr	r3, [r7, #4]
 80413f6:	2200      	movs	r2, #0
 80413f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80413fc:	687b      	ldr	r3, [r7, #4]
 80413fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041400:	2b00      	cmp	r3, #0
 8041402:	d008      	beq.n	8041416 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8041404:	687b      	ldr	r3, [r7, #4]
 8041406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041408:	6878      	ldr	r0, [r7, #4]
 804140a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 804140c:	e002      	b.n	8041414 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804140e:	bf00      	nop
 8041410:	e000      	b.n	8041414 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8041412:	bf00      	nop
  return;
 8041414:	bf00      	nop
 8041416:	bf00      	nop
}
 8041418:	3710      	adds	r7, #16
 804141a:	46bd      	mov	sp, r7
 804141c:	bd80      	pop	{r7, pc}

0804141e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 804141e:	b480      	push	{r7}
 8041420:	b085      	sub	sp, #20
 8041422:	af00      	add	r7, sp, #0
 8041424:	6078      	str	r0, [r7, #4]
 8041426:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041428:	2300      	movs	r3, #0
 804142a:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 804142c:	687b      	ldr	r3, [r7, #4]
 804142e:	2b00      	cmp	r3, #0
 8041430:	d103      	bne.n	804143a <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8041432:	2301      	movs	r3, #1
 8041434:	72fb      	strb	r3, [r7, #11]
    return status;
 8041436:	7afb      	ldrb	r3, [r7, #11]
 8041438:	e01b      	b.n	8041472 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 804143a:	687b      	ldr	r3, [r7, #4]
 804143c:	681b      	ldr	r3, [r3, #0]
 804143e:	681b      	ldr	r3, [r3, #0]
 8041440:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8041442:	683b      	ldr	r3, [r7, #0]
 8041444:	f003 0310 	and.w	r3, r3, #16
 8041448:	2b00      	cmp	r3, #0
 804144a:	d00d      	beq.n	8041468 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 804144c:	683b      	ldr	r3, [r7, #0]
 804144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041452:	2b00      	cmp	r3, #0
 8041454:	d004      	beq.n	8041460 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8041456:	68fb      	ldr	r3, [r7, #12]
 8041458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804145c:	60fb      	str	r3, [r7, #12]
 804145e:	e003      	b.n	8041468 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8041460:	68fb      	ldr	r3, [r7, #12]
 8041462:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8041466:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8041468:	687b      	ldr	r3, [r7, #4]
 804146a:	681b      	ldr	r3, [r3, #0]
 804146c:	68fa      	ldr	r2, [r7, #12]
 804146e:	601a      	str	r2, [r3, #0]

  return status;
 8041470:	7afb      	ldrb	r3, [r7, #11]
}
 8041472:	4618      	mov	r0, r3
 8041474:	3714      	adds	r7, #20
 8041476:	46bd      	mov	sp, r7
 8041478:	f85d 7b04 	ldr.w	r7, [sp], #4
 804147c:	4770      	bx	lr

0804147e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 804147e:	b480      	push	{r7}
 8041480:	b085      	sub	sp, #20
 8041482:	af00      	add	r7, sp, #0
 8041484:	60f8      	str	r0, [r7, #12]
 8041486:	60b9      	str	r1, [r7, #8]
 8041488:	607a      	str	r2, [r7, #4]
 804148a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 804148c:	68fb      	ldr	r3, [r7, #12]
 804148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041490:	68fa      	ldr	r2, [r7, #12]
 8041492:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8041494:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8041496:	68fb      	ldr	r3, [r7, #12]
 8041498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804149a:	2b00      	cmp	r3, #0
 804149c:	d004      	beq.n	80414a8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 804149e:	68fb      	ldr	r3, [r7, #12]
 80414a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80414a2:	68fa      	ldr	r2, [r7, #12]
 80414a4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80414a6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80414a8:	68fb      	ldr	r3, [r7, #12]
 80414aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80414ac:	f003 021c 	and.w	r2, r3, #28
 80414b0:	68fb      	ldr	r3, [r7, #12]
 80414b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80414b4:	2101      	movs	r1, #1
 80414b6:	fa01 f202 	lsl.w	r2, r1, r2
 80414ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80414bc:	68fb      	ldr	r3, [r7, #12]
 80414be:	681b      	ldr	r3, [r3, #0]
 80414c0:	683a      	ldr	r2, [r7, #0]
 80414c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80414c4:	68fb      	ldr	r3, [r7, #12]
 80414c6:	689b      	ldr	r3, [r3, #8]
 80414c8:	2b10      	cmp	r3, #16
 80414ca:	d108      	bne.n	80414de <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80414cc:	68fb      	ldr	r3, [r7, #12]
 80414ce:	681b      	ldr	r3, [r3, #0]
 80414d0:	687a      	ldr	r2, [r7, #4]
 80414d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80414d4:	68fb      	ldr	r3, [r7, #12]
 80414d6:	681b      	ldr	r3, [r3, #0]
 80414d8:	68ba      	ldr	r2, [r7, #8]
 80414da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80414dc:	e007      	b.n	80414ee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80414de:	68fb      	ldr	r3, [r7, #12]
 80414e0:	681b      	ldr	r3, [r3, #0]
 80414e2:	68ba      	ldr	r2, [r7, #8]
 80414e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80414e6:	68fb      	ldr	r3, [r7, #12]
 80414e8:	681b      	ldr	r3, [r3, #0]
 80414ea:	687a      	ldr	r2, [r7, #4]
 80414ec:	60da      	str	r2, [r3, #12]
}
 80414ee:	bf00      	nop
 80414f0:	3714      	adds	r7, #20
 80414f2:	46bd      	mov	sp, r7
 80414f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414f8:	4770      	bx	lr
	...

080414fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80414fc:	b480      	push	{r7}
 80414fe:	b085      	sub	sp, #20
 8041500:	af00      	add	r7, sp, #0
 8041502:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8041504:	687b      	ldr	r3, [r7, #4]
 8041506:	681b      	ldr	r3, [r3, #0]
 8041508:	461a      	mov	r2, r3
 804150a:	4b17      	ldr	r3, [pc, #92]	; (8041568 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 804150c:	429a      	cmp	r2, r3
 804150e:	d80a      	bhi.n	8041526 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8041510:	687b      	ldr	r3, [r7, #4]
 8041512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041514:	089b      	lsrs	r3, r3, #2
 8041516:	009b      	lsls	r3, r3, #2
 8041518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 804151c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8041520:	687a      	ldr	r2, [r7, #4]
 8041522:	6513      	str	r3, [r2, #80]	; 0x50
 8041524:	e007      	b.n	8041536 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8041526:	687b      	ldr	r3, [r7, #4]
 8041528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804152a:	089b      	lsrs	r3, r3, #2
 804152c:	009a      	lsls	r2, r3, #2
 804152e:	4b0f      	ldr	r3, [pc, #60]	; (804156c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8041530:	4413      	add	r3, r2
 8041532:	687a      	ldr	r2, [r7, #4]
 8041534:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8041536:	687b      	ldr	r3, [r7, #4]
 8041538:	681b      	ldr	r3, [r3, #0]
 804153a:	b2db      	uxtb	r3, r3
 804153c:	3b08      	subs	r3, #8
 804153e:	4a0c      	ldr	r2, [pc, #48]	; (8041570 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8041540:	fba2 2303 	umull	r2, r3, r2, r3
 8041544:	091b      	lsrs	r3, r3, #4
 8041546:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8041548:	687b      	ldr	r3, [r7, #4]
 804154a:	4a0a      	ldr	r2, [pc, #40]	; (8041574 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 804154c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 804154e:	68fb      	ldr	r3, [r7, #12]
 8041550:	f003 031f 	and.w	r3, r3, #31
 8041554:	2201      	movs	r2, #1
 8041556:	409a      	lsls	r2, r3
 8041558:	687b      	ldr	r3, [r7, #4]
 804155a:	659a      	str	r2, [r3, #88]	; 0x58
}
 804155c:	bf00      	nop
 804155e:	3714      	adds	r7, #20
 8041560:	46bd      	mov	sp, r7
 8041562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041566:	4770      	bx	lr
 8041568:	40020407 	.word	0x40020407
 804156c:	40020820 	.word	0x40020820
 8041570:	cccccccd 	.word	0xcccccccd
 8041574:	40020880 	.word	0x40020880

08041578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8041578:	b480      	push	{r7}
 804157a:	b085      	sub	sp, #20
 804157c:	af00      	add	r7, sp, #0
 804157e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8041580:	687b      	ldr	r3, [r7, #4]
 8041582:	685b      	ldr	r3, [r3, #4]
 8041584:	b2db      	uxtb	r3, r3
 8041586:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8041588:	68fa      	ldr	r2, [r7, #12]
 804158a:	4b0b      	ldr	r3, [pc, #44]	; (80415b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 804158c:	4413      	add	r3, r2
 804158e:	009b      	lsls	r3, r3, #2
 8041590:	461a      	mov	r2, r3
 8041592:	687b      	ldr	r3, [r7, #4]
 8041594:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8041596:	687b      	ldr	r3, [r7, #4]
 8041598:	4a08      	ldr	r2, [pc, #32]	; (80415bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 804159a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 804159c:	68fb      	ldr	r3, [r7, #12]
 804159e:	3b01      	subs	r3, #1
 80415a0:	f003 0303 	and.w	r3, r3, #3
 80415a4:	2201      	movs	r2, #1
 80415a6:	409a      	lsls	r2, r3
 80415a8:	687b      	ldr	r3, [r7, #4]
 80415aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80415ac:	bf00      	nop
 80415ae:	3714      	adds	r7, #20
 80415b0:	46bd      	mov	sp, r7
 80415b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415b6:	4770      	bx	lr
 80415b8:	1000823f 	.word	0x1000823f
 80415bc:	40020940 	.word	0x40020940

080415c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80415c0:	b480      	push	{r7}
 80415c2:	b087      	sub	sp, #28
 80415c4:	af00      	add	r7, sp, #0
 80415c6:	6078      	str	r0, [r7, #4]
 80415c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80415ca:	2300      	movs	r3, #0
 80415cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80415ce:	e158      	b.n	8041882 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80415d0:	683b      	ldr	r3, [r7, #0]
 80415d2:	681a      	ldr	r2, [r3, #0]
 80415d4:	2101      	movs	r1, #1
 80415d6:	697b      	ldr	r3, [r7, #20]
 80415d8:	fa01 f303 	lsl.w	r3, r1, r3
 80415dc:	4013      	ands	r3, r2
 80415de:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80415e0:	68fb      	ldr	r3, [r7, #12]
 80415e2:	2b00      	cmp	r3, #0
 80415e4:	f000 814a 	beq.w	804187c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80415e8:	683b      	ldr	r3, [r7, #0]
 80415ea:	685b      	ldr	r3, [r3, #4]
 80415ec:	2b01      	cmp	r3, #1
 80415ee:	d00b      	beq.n	8041608 <HAL_GPIO_Init+0x48>
 80415f0:	683b      	ldr	r3, [r7, #0]
 80415f2:	685b      	ldr	r3, [r3, #4]
 80415f4:	2b02      	cmp	r3, #2
 80415f6:	d007      	beq.n	8041608 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80415f8:	683b      	ldr	r3, [r7, #0]
 80415fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80415fc:	2b11      	cmp	r3, #17
 80415fe:	d003      	beq.n	8041608 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041600:	683b      	ldr	r3, [r7, #0]
 8041602:	685b      	ldr	r3, [r3, #4]
 8041604:	2b12      	cmp	r3, #18
 8041606:	d130      	bne.n	804166a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041608:	687b      	ldr	r3, [r7, #4]
 804160a:	689b      	ldr	r3, [r3, #8]
 804160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804160e:	697b      	ldr	r3, [r7, #20]
 8041610:	005b      	lsls	r3, r3, #1
 8041612:	2203      	movs	r2, #3
 8041614:	fa02 f303 	lsl.w	r3, r2, r3
 8041618:	43db      	mvns	r3, r3
 804161a:	693a      	ldr	r2, [r7, #16]
 804161c:	4013      	ands	r3, r2
 804161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041620:	683b      	ldr	r3, [r7, #0]
 8041622:	68da      	ldr	r2, [r3, #12]
 8041624:	697b      	ldr	r3, [r7, #20]
 8041626:	005b      	lsls	r3, r3, #1
 8041628:	fa02 f303 	lsl.w	r3, r2, r3
 804162c:	693a      	ldr	r2, [r7, #16]
 804162e:	4313      	orrs	r3, r2
 8041630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8041632:	687b      	ldr	r3, [r7, #4]
 8041634:	693a      	ldr	r2, [r7, #16]
 8041636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041638:	687b      	ldr	r3, [r7, #4]
 804163a:	685b      	ldr	r3, [r3, #4]
 804163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 804163e:	2201      	movs	r2, #1
 8041640:	697b      	ldr	r3, [r7, #20]
 8041642:	fa02 f303 	lsl.w	r3, r2, r3
 8041646:	43db      	mvns	r3, r3
 8041648:	693a      	ldr	r2, [r7, #16]
 804164a:	4013      	ands	r3, r2
 804164c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 804164e:	683b      	ldr	r3, [r7, #0]
 8041650:	685b      	ldr	r3, [r3, #4]
 8041652:	091b      	lsrs	r3, r3, #4
 8041654:	f003 0201 	and.w	r2, r3, #1
 8041658:	697b      	ldr	r3, [r7, #20]
 804165a:	fa02 f303 	lsl.w	r3, r2, r3
 804165e:	693a      	ldr	r2, [r7, #16]
 8041660:	4313      	orrs	r3, r2
 8041662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8041664:	687b      	ldr	r3, [r7, #4]
 8041666:	693a      	ldr	r2, [r7, #16]
 8041668:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 804166a:	687b      	ldr	r3, [r7, #4]
 804166c:	68db      	ldr	r3, [r3, #12]
 804166e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041670:	697b      	ldr	r3, [r7, #20]
 8041672:	005b      	lsls	r3, r3, #1
 8041674:	2203      	movs	r2, #3
 8041676:	fa02 f303 	lsl.w	r3, r2, r3
 804167a:	43db      	mvns	r3, r3
 804167c:	693a      	ldr	r2, [r7, #16]
 804167e:	4013      	ands	r3, r2
 8041680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041682:	683b      	ldr	r3, [r7, #0]
 8041684:	689a      	ldr	r2, [r3, #8]
 8041686:	697b      	ldr	r3, [r7, #20]
 8041688:	005b      	lsls	r3, r3, #1
 804168a:	fa02 f303 	lsl.w	r3, r2, r3
 804168e:	693a      	ldr	r2, [r7, #16]
 8041690:	4313      	orrs	r3, r2
 8041692:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8041694:	687b      	ldr	r3, [r7, #4]
 8041696:	693a      	ldr	r2, [r7, #16]
 8041698:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804169a:	683b      	ldr	r3, [r7, #0]
 804169c:	685b      	ldr	r3, [r3, #4]
 804169e:	2b02      	cmp	r3, #2
 80416a0:	d003      	beq.n	80416aa <HAL_GPIO_Init+0xea>
 80416a2:	683b      	ldr	r3, [r7, #0]
 80416a4:	685b      	ldr	r3, [r3, #4]
 80416a6:	2b12      	cmp	r3, #18
 80416a8:	d123      	bne.n	80416f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80416aa:	697b      	ldr	r3, [r7, #20]
 80416ac:	08da      	lsrs	r2, r3, #3
 80416ae:	687b      	ldr	r3, [r7, #4]
 80416b0:	3208      	adds	r2, #8
 80416b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80416b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80416b8:	697b      	ldr	r3, [r7, #20]
 80416ba:	f003 0307 	and.w	r3, r3, #7
 80416be:	009b      	lsls	r3, r3, #2
 80416c0:	220f      	movs	r2, #15
 80416c2:	fa02 f303 	lsl.w	r3, r2, r3
 80416c6:	43db      	mvns	r3, r3
 80416c8:	693a      	ldr	r2, [r7, #16]
 80416ca:	4013      	ands	r3, r2
 80416cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80416ce:	683b      	ldr	r3, [r7, #0]
 80416d0:	691a      	ldr	r2, [r3, #16]
 80416d2:	697b      	ldr	r3, [r7, #20]
 80416d4:	f003 0307 	and.w	r3, r3, #7
 80416d8:	009b      	lsls	r3, r3, #2
 80416da:	fa02 f303 	lsl.w	r3, r2, r3
 80416de:	693a      	ldr	r2, [r7, #16]
 80416e0:	4313      	orrs	r3, r2
 80416e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80416e4:	697b      	ldr	r3, [r7, #20]
 80416e6:	08da      	lsrs	r2, r3, #3
 80416e8:	687b      	ldr	r3, [r7, #4]
 80416ea:	3208      	adds	r2, #8
 80416ec:	6939      	ldr	r1, [r7, #16]
 80416ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80416f2:	687b      	ldr	r3, [r7, #4]
 80416f4:	681b      	ldr	r3, [r3, #0]
 80416f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80416f8:	697b      	ldr	r3, [r7, #20]
 80416fa:	005b      	lsls	r3, r3, #1
 80416fc:	2203      	movs	r2, #3
 80416fe:	fa02 f303 	lsl.w	r3, r2, r3
 8041702:	43db      	mvns	r3, r3
 8041704:	693a      	ldr	r2, [r7, #16]
 8041706:	4013      	ands	r3, r2
 8041708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 804170a:	683b      	ldr	r3, [r7, #0]
 804170c:	685b      	ldr	r3, [r3, #4]
 804170e:	f003 0203 	and.w	r2, r3, #3
 8041712:	697b      	ldr	r3, [r7, #20]
 8041714:	005b      	lsls	r3, r3, #1
 8041716:	fa02 f303 	lsl.w	r3, r2, r3
 804171a:	693a      	ldr	r2, [r7, #16]
 804171c:	4313      	orrs	r3, r2
 804171e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8041720:	687b      	ldr	r3, [r7, #4]
 8041722:	693a      	ldr	r2, [r7, #16]
 8041724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8041726:	683b      	ldr	r3, [r7, #0]
 8041728:	685b      	ldr	r3, [r3, #4]
 804172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804172e:	2b00      	cmp	r3, #0
 8041730:	f000 80a4 	beq.w	804187c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8041734:	4a5a      	ldr	r2, [pc, #360]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 8041736:	697b      	ldr	r3, [r7, #20]
 8041738:	089b      	lsrs	r3, r3, #2
 804173a:	3318      	adds	r3, #24
 804173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041740:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8041742:	697b      	ldr	r3, [r7, #20]
 8041744:	f003 0303 	and.w	r3, r3, #3
 8041748:	00db      	lsls	r3, r3, #3
 804174a:	220f      	movs	r2, #15
 804174c:	fa02 f303 	lsl.w	r3, r2, r3
 8041750:	43db      	mvns	r3, r3
 8041752:	693a      	ldr	r2, [r7, #16]
 8041754:	4013      	ands	r3, r2
 8041756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8041758:	687b      	ldr	r3, [r7, #4]
 804175a:	4a52      	ldr	r2, [pc, #328]	; (80418a4 <HAL_GPIO_Init+0x2e4>)
 804175c:	4293      	cmp	r3, r2
 804175e:	d025      	beq.n	80417ac <HAL_GPIO_Init+0x1ec>
 8041760:	687b      	ldr	r3, [r7, #4]
 8041762:	4a51      	ldr	r2, [pc, #324]	; (80418a8 <HAL_GPIO_Init+0x2e8>)
 8041764:	4293      	cmp	r3, r2
 8041766:	d01f      	beq.n	80417a8 <HAL_GPIO_Init+0x1e8>
 8041768:	687b      	ldr	r3, [r7, #4]
 804176a:	4a50      	ldr	r2, [pc, #320]	; (80418ac <HAL_GPIO_Init+0x2ec>)
 804176c:	4293      	cmp	r3, r2
 804176e:	d019      	beq.n	80417a4 <HAL_GPIO_Init+0x1e4>
 8041770:	687b      	ldr	r3, [r7, #4]
 8041772:	4a4f      	ldr	r2, [pc, #316]	; (80418b0 <HAL_GPIO_Init+0x2f0>)
 8041774:	4293      	cmp	r3, r2
 8041776:	d013      	beq.n	80417a0 <HAL_GPIO_Init+0x1e0>
 8041778:	687b      	ldr	r3, [r7, #4]
 804177a:	4a4e      	ldr	r2, [pc, #312]	; (80418b4 <HAL_GPIO_Init+0x2f4>)
 804177c:	4293      	cmp	r3, r2
 804177e:	d00d      	beq.n	804179c <HAL_GPIO_Init+0x1dc>
 8041780:	687b      	ldr	r3, [r7, #4]
 8041782:	4a4d      	ldr	r2, [pc, #308]	; (80418b8 <HAL_GPIO_Init+0x2f8>)
 8041784:	4293      	cmp	r3, r2
 8041786:	d007      	beq.n	8041798 <HAL_GPIO_Init+0x1d8>
 8041788:	687b      	ldr	r3, [r7, #4]
 804178a:	4a4c      	ldr	r2, [pc, #304]	; (80418bc <HAL_GPIO_Init+0x2fc>)
 804178c:	4293      	cmp	r3, r2
 804178e:	d101      	bne.n	8041794 <HAL_GPIO_Init+0x1d4>
 8041790:	2306      	movs	r3, #6
 8041792:	e00c      	b.n	80417ae <HAL_GPIO_Init+0x1ee>
 8041794:	2307      	movs	r3, #7
 8041796:	e00a      	b.n	80417ae <HAL_GPIO_Init+0x1ee>
 8041798:	2305      	movs	r3, #5
 804179a:	e008      	b.n	80417ae <HAL_GPIO_Init+0x1ee>
 804179c:	2304      	movs	r3, #4
 804179e:	e006      	b.n	80417ae <HAL_GPIO_Init+0x1ee>
 80417a0:	2303      	movs	r3, #3
 80417a2:	e004      	b.n	80417ae <HAL_GPIO_Init+0x1ee>
 80417a4:	2302      	movs	r3, #2
 80417a6:	e002      	b.n	80417ae <HAL_GPIO_Init+0x1ee>
 80417a8:	2301      	movs	r3, #1
 80417aa:	e000      	b.n	80417ae <HAL_GPIO_Init+0x1ee>
 80417ac:	2300      	movs	r3, #0
 80417ae:	697a      	ldr	r2, [r7, #20]
 80417b0:	f002 0203 	and.w	r2, r2, #3
 80417b4:	00d2      	lsls	r2, r2, #3
 80417b6:	4093      	lsls	r3, r2
 80417b8:	693a      	ldr	r2, [r7, #16]
 80417ba:	4313      	orrs	r3, r2
 80417bc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80417be:	4938      	ldr	r1, [pc, #224]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 80417c0:	697b      	ldr	r3, [r7, #20]
 80417c2:	089b      	lsrs	r3, r3, #2
 80417c4:	3318      	adds	r3, #24
 80417c6:	693a      	ldr	r2, [r7, #16]
 80417c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80417cc:	4b34      	ldr	r3, [pc, #208]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 80417ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80417d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80417d4:	68fb      	ldr	r3, [r7, #12]
 80417d6:	43db      	mvns	r3, r3
 80417d8:	693a      	ldr	r2, [r7, #16]
 80417da:	4013      	ands	r3, r2
 80417dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80417de:	683b      	ldr	r3, [r7, #0]
 80417e0:	685b      	ldr	r3, [r3, #4]
 80417e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80417e6:	2b00      	cmp	r3, #0
 80417e8:	d003      	beq.n	80417f2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80417ea:	693a      	ldr	r2, [r7, #16]
 80417ec:	68fb      	ldr	r3, [r7, #12]
 80417ee:	4313      	orrs	r3, r2
 80417f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80417f2:	4a2b      	ldr	r2, [pc, #172]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 80417f4:	693b      	ldr	r3, [r7, #16]
 80417f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80417fa:	4b29      	ldr	r3, [pc, #164]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 80417fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041802:	68fb      	ldr	r3, [r7, #12]
 8041804:	43db      	mvns	r3, r3
 8041806:	693a      	ldr	r2, [r7, #16]
 8041808:	4013      	ands	r3, r2
 804180a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 804180c:	683b      	ldr	r3, [r7, #0]
 804180e:	685b      	ldr	r3, [r3, #4]
 8041810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041814:	2b00      	cmp	r3, #0
 8041816:	d003      	beq.n	8041820 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8041818:	693a      	ldr	r2, [r7, #16]
 804181a:	68fb      	ldr	r3, [r7, #12]
 804181c:	4313      	orrs	r3, r2
 804181e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8041820:	4a1f      	ldr	r2, [pc, #124]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 8041822:	693b      	ldr	r3, [r7, #16]
 8041824:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8041828:	4b1d      	ldr	r3, [pc, #116]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 804182a:	681b      	ldr	r3, [r3, #0]
 804182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 804182e:	68fb      	ldr	r3, [r7, #12]
 8041830:	43db      	mvns	r3, r3
 8041832:	693a      	ldr	r2, [r7, #16]
 8041834:	4013      	ands	r3, r2
 8041836:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8041838:	683b      	ldr	r3, [r7, #0]
 804183a:	685b      	ldr	r3, [r3, #4]
 804183c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041840:	2b00      	cmp	r3, #0
 8041842:	d003      	beq.n	804184c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8041844:	693a      	ldr	r2, [r7, #16]
 8041846:	68fb      	ldr	r3, [r7, #12]
 8041848:	4313      	orrs	r3, r2
 804184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 804184c:	4a14      	ldr	r2, [pc, #80]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 804184e:	693b      	ldr	r3, [r7, #16]
 8041850:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8041852:	4b13      	ldr	r3, [pc, #76]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 8041854:	685b      	ldr	r3, [r3, #4]
 8041856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041858:	68fb      	ldr	r3, [r7, #12]
 804185a:	43db      	mvns	r3, r3
 804185c:	693a      	ldr	r2, [r7, #16]
 804185e:	4013      	ands	r3, r2
 8041860:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8041862:	683b      	ldr	r3, [r7, #0]
 8041864:	685b      	ldr	r3, [r3, #4]
 8041866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804186a:	2b00      	cmp	r3, #0
 804186c:	d003      	beq.n	8041876 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 804186e:	693a      	ldr	r2, [r7, #16]
 8041870:	68fb      	ldr	r3, [r7, #12]
 8041872:	4313      	orrs	r3, r2
 8041874:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8041876:	4a0a      	ldr	r2, [pc, #40]	; (80418a0 <HAL_GPIO_Init+0x2e0>)
 8041878:	693b      	ldr	r3, [r7, #16]
 804187a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 804187c:	697b      	ldr	r3, [r7, #20]
 804187e:	3301      	adds	r3, #1
 8041880:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041882:	683b      	ldr	r3, [r7, #0]
 8041884:	681a      	ldr	r2, [r3, #0]
 8041886:	697b      	ldr	r3, [r7, #20]
 8041888:	fa22 f303 	lsr.w	r3, r2, r3
 804188c:	2b00      	cmp	r3, #0
 804188e:	f47f ae9f 	bne.w	80415d0 <HAL_GPIO_Init+0x10>
  }
}
 8041892:	bf00      	nop
 8041894:	bf00      	nop
 8041896:	371c      	adds	r7, #28
 8041898:	46bd      	mov	sp, r7
 804189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804189e:	4770      	bx	lr
 80418a0:	4002f400 	.word	0x4002f400
 80418a4:	42020000 	.word	0x42020000
 80418a8:	42020400 	.word	0x42020400
 80418ac:	42020800 	.word	0x42020800
 80418b0:	42020c00 	.word	0x42020c00
 80418b4:	42021000 	.word	0x42021000
 80418b8:	42021400 	.word	0x42021400
 80418bc:	42021800 	.word	0x42021800

080418c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80418c0:	b480      	push	{r7}
 80418c2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80418c4:	4b04      	ldr	r3, [pc, #16]	; (80418d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80418c6:	681b      	ldr	r3, [r3, #0]
 80418c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80418cc:	4618      	mov	r0, r3
 80418ce:	46bd      	mov	sp, r7
 80418d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418d4:	4770      	bx	lr
 80418d6:	bf00      	nop
 80418d8:	40007000 	.word	0x40007000

080418dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80418dc:	b580      	push	{r7, lr}
 80418de:	b084      	sub	sp, #16
 80418e0:	af00      	add	r7, sp, #0
 80418e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80418e4:	4b27      	ldr	r3, [pc, #156]	; (8041984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80418e6:	681b      	ldr	r3, [r3, #0]
 80418e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80418ec:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80418ee:	f000 f861 	bl	80419b4 <HAL_PWREx_SMPS_GetEffectiveMode>
 80418f2:	4603      	mov	r3, r0
 80418f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80418f8:	d101      	bne.n	80418fe <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80418fa:	2301      	movs	r3, #1
 80418fc:	e03e      	b.n	804197c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80418fe:	4b21      	ldr	r3, [pc, #132]	; (8041984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8041900:	68db      	ldr	r3, [r3, #12]
 8041902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804190a:	d101      	bne.n	8041910 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 804190c:	2301      	movs	r3, #1
 804190e:	e035      	b.n	804197c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8041910:	68ba      	ldr	r2, [r7, #8]
 8041912:	687b      	ldr	r3, [r7, #4]
 8041914:	429a      	cmp	r2, r3
 8041916:	d101      	bne.n	804191c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8041918:	2300      	movs	r3, #0
 804191a:	e02f      	b.n	804197c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 804191c:	4b19      	ldr	r3, [pc, #100]	; (8041984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 804191e:	681b      	ldr	r3, [r3, #0]
 8041920:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8041924:	4917      	ldr	r1, [pc, #92]	; (8041984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8041926:	687b      	ldr	r3, [r7, #4]
 8041928:	4313      	orrs	r3, r2
 804192a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 804192c:	4b16      	ldr	r3, [pc, #88]	; (8041988 <HAL_PWREx_ControlVoltageScaling+0xac>)
 804192e:	681b      	ldr	r3, [r3, #0]
 8041930:	095b      	lsrs	r3, r3, #5
 8041932:	4a16      	ldr	r2, [pc, #88]	; (804198c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8041934:	fba2 2303 	umull	r2, r3, r2, r3
 8041938:	09db      	lsrs	r3, r3, #7
 804193a:	2232      	movs	r2, #50	; 0x32
 804193c:	fb02 f303 	mul.w	r3, r2, r3
 8041940:	4a13      	ldr	r2, [pc, #76]	; (8041990 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8041942:	fba2 2303 	umull	r2, r3, r2, r3
 8041946:	08db      	lsrs	r3, r3, #3
 8041948:	3301      	adds	r3, #1
 804194a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 804194c:	e002      	b.n	8041954 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 804194e:	68fb      	ldr	r3, [r7, #12]
 8041950:	3b01      	subs	r3, #1
 8041952:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041954:	4b0b      	ldr	r3, [pc, #44]	; (8041984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8041956:	695b      	ldr	r3, [r3, #20]
 8041958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804195c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041960:	d102      	bne.n	8041968 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8041962:	68fb      	ldr	r3, [r7, #12]
 8041964:	2b00      	cmp	r3, #0
 8041966:	d1f2      	bne.n	804194e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8041968:	4b06      	ldr	r3, [pc, #24]	; (8041984 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 804196a:	695b      	ldr	r3, [r3, #20]
 804196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041974:	d101      	bne.n	804197a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8041976:	2303      	movs	r3, #3
 8041978:	e000      	b.n	804197c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 804197a:	2300      	movs	r3, #0
}
 804197c:	4618      	mov	r0, r3
 804197e:	3710      	adds	r7, #16
 8041980:	46bd      	mov	sp, r7
 8041982:	bd80      	pop	{r7, pc}
 8041984:	40007000 	.word	0x40007000
 8041988:	20030000 	.word	0x20030000
 804198c:	0a7c5ac5 	.word	0x0a7c5ac5
 8041990:	cccccccd 	.word	0xcccccccd

08041994 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8041994:	b480      	push	{r7}
 8041996:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8041998:	4b05      	ldr	r3, [pc, #20]	; (80419b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 804199a:	685b      	ldr	r3, [r3, #4]
 804199c:	4a04      	ldr	r2, [pc, #16]	; (80419b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 804199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80419a2:	6053      	str	r3, [r2, #4]
}
 80419a4:	bf00      	nop
 80419a6:	46bd      	mov	sp, r7
 80419a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419ac:	4770      	bx	lr
 80419ae:	bf00      	nop
 80419b0:	40007000 	.word	0x40007000

080419b4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80419b4:	b480      	push	{r7}
 80419b6:	b083      	sub	sp, #12
 80419b8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80419ba:	4b0f      	ldr	r3, [pc, #60]	; (80419f8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80419bc:	691b      	ldr	r3, [r3, #16]
 80419be:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80419c0:	683b      	ldr	r3, [r7, #0]
 80419c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80419c6:	2b00      	cmp	r3, #0
 80419c8:	d003      	beq.n	80419d2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80419ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80419ce:	607b      	str	r3, [r7, #4]
 80419d0:	e00a      	b.n	80419e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80419d2:	683b      	ldr	r3, [r7, #0]
 80419d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80419d8:	2b00      	cmp	r3, #0
 80419da:	d103      	bne.n	80419e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80419dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80419e0:	607b      	str	r3, [r7, #4]
 80419e2:	e001      	b.n	80419e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80419e4:	2300      	movs	r3, #0
 80419e6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80419e8:	687b      	ldr	r3, [r7, #4]
}
 80419ea:	4618      	mov	r0, r3
 80419ec:	370c      	adds	r7, #12
 80419ee:	46bd      	mov	sp, r7
 80419f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419f4:	4770      	bx	lr
 80419f6:	bf00      	nop
 80419f8:	40007000 	.word	0x40007000

080419fc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80419fc:	b580      	push	{r7, lr}
 80419fe:	b088      	sub	sp, #32
 8041a00:	af00      	add	r7, sp, #0
 8041a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041a04:	687b      	ldr	r3, [r7, #4]
 8041a06:	2b00      	cmp	r3, #0
 8041a08:	d102      	bne.n	8041a10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8041a0a:	2301      	movs	r3, #1
 8041a0c:	f000 bcd0 	b.w	80423b0 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041a10:	4ba3      	ldr	r3, [pc, #652]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041a12:	689b      	ldr	r3, [r3, #8]
 8041a14:	f003 030c 	and.w	r3, r3, #12
 8041a18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041a1a:	4ba1      	ldr	r3, [pc, #644]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041a1c:	68db      	ldr	r3, [r3, #12]
 8041a1e:	f003 0303 	and.w	r3, r3, #3
 8041a22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8041a24:	687b      	ldr	r3, [r7, #4]
 8041a26:	681b      	ldr	r3, [r3, #0]
 8041a28:	f003 0310 	and.w	r3, r3, #16
 8041a2c:	2b00      	cmp	r3, #0
 8041a2e:	f000 80e9 	beq.w	8041c04 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8041a32:	69bb      	ldr	r3, [r7, #24]
 8041a34:	2b00      	cmp	r3, #0
 8041a36:	d006      	beq.n	8041a46 <HAL_RCC_OscConfig+0x4a>
 8041a38:	69bb      	ldr	r3, [r7, #24]
 8041a3a:	2b0c      	cmp	r3, #12
 8041a3c:	f040 8083 	bne.w	8041b46 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8041a40:	697b      	ldr	r3, [r7, #20]
 8041a42:	2b01      	cmp	r3, #1
 8041a44:	d17f      	bne.n	8041b46 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8041a46:	4b96      	ldr	r3, [pc, #600]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041a48:	681b      	ldr	r3, [r3, #0]
 8041a4a:	f003 0302 	and.w	r3, r3, #2
 8041a4e:	2b00      	cmp	r3, #0
 8041a50:	d006      	beq.n	8041a60 <HAL_RCC_OscConfig+0x64>
 8041a52:	687b      	ldr	r3, [r7, #4]
 8041a54:	69db      	ldr	r3, [r3, #28]
 8041a56:	2b00      	cmp	r3, #0
 8041a58:	d102      	bne.n	8041a60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8041a5a:	2301      	movs	r3, #1
 8041a5c:	f000 bca8 	b.w	80423b0 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8041a60:	687b      	ldr	r3, [r7, #4]
 8041a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8041a64:	4b8e      	ldr	r3, [pc, #568]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041a66:	681b      	ldr	r3, [r3, #0]
 8041a68:	f003 0308 	and.w	r3, r3, #8
 8041a6c:	2b00      	cmp	r3, #0
 8041a6e:	d004      	beq.n	8041a7a <HAL_RCC_OscConfig+0x7e>
 8041a70:	4b8b      	ldr	r3, [pc, #556]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041a72:	681b      	ldr	r3, [r3, #0]
 8041a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041a78:	e005      	b.n	8041a86 <HAL_RCC_OscConfig+0x8a>
 8041a7a:	4b89      	ldr	r3, [pc, #548]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041a80:	091b      	lsrs	r3, r3, #4
 8041a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041a86:	4293      	cmp	r3, r2
 8041a88:	d224      	bcs.n	8041ad4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8041a8a:	687b      	ldr	r3, [r7, #4]
 8041a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041a8e:	4618      	mov	r0, r3
 8041a90:	f000 fe96 	bl	80427c0 <RCC_SetFlashLatencyFromMSIRange>
 8041a94:	4603      	mov	r3, r0
 8041a96:	2b00      	cmp	r3, #0
 8041a98:	d002      	beq.n	8041aa0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8041a9a:	2301      	movs	r3, #1
 8041a9c:	f000 bc88 	b.w	80423b0 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8041aa0:	4b7f      	ldr	r3, [pc, #508]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041aa2:	681b      	ldr	r3, [r3, #0]
 8041aa4:	4a7e      	ldr	r2, [pc, #504]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041aa6:	f043 0308 	orr.w	r3, r3, #8
 8041aaa:	6013      	str	r3, [r2, #0]
 8041aac:	4b7c      	ldr	r3, [pc, #496]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041aae:	681b      	ldr	r3, [r3, #0]
 8041ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041ab4:	687b      	ldr	r3, [r7, #4]
 8041ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041ab8:	4979      	ldr	r1, [pc, #484]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041aba:	4313      	orrs	r3, r2
 8041abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8041abe:	4b78      	ldr	r3, [pc, #480]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041ac0:	685b      	ldr	r3, [r3, #4]
 8041ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8041ac6:	687b      	ldr	r3, [r7, #4]
 8041ac8:	6a1b      	ldr	r3, [r3, #32]
 8041aca:	021b      	lsls	r3, r3, #8
 8041acc:	4974      	ldr	r1, [pc, #464]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041ace:	4313      	orrs	r3, r2
 8041ad0:	604b      	str	r3, [r1, #4]
 8041ad2:	e026      	b.n	8041b22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8041ad4:	4b72      	ldr	r3, [pc, #456]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041ad6:	681b      	ldr	r3, [r3, #0]
 8041ad8:	4a71      	ldr	r2, [pc, #452]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041ada:	f043 0308 	orr.w	r3, r3, #8
 8041ade:	6013      	str	r3, [r2, #0]
 8041ae0:	4b6f      	ldr	r3, [pc, #444]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041ae2:	681b      	ldr	r3, [r3, #0]
 8041ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041ae8:	687b      	ldr	r3, [r7, #4]
 8041aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041aec:	496c      	ldr	r1, [pc, #432]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041aee:	4313      	orrs	r3, r2
 8041af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8041af2:	4b6b      	ldr	r3, [pc, #428]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041af4:	685b      	ldr	r3, [r3, #4]
 8041af6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8041afa:	687b      	ldr	r3, [r7, #4]
 8041afc:	6a1b      	ldr	r3, [r3, #32]
 8041afe:	021b      	lsls	r3, r3, #8
 8041b00:	4967      	ldr	r1, [pc, #412]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041b02:	4313      	orrs	r3, r2
 8041b04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041b06:	69bb      	ldr	r3, [r7, #24]
 8041b08:	2b00      	cmp	r3, #0
 8041b0a:	d10a      	bne.n	8041b22 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8041b0c:	687b      	ldr	r3, [r7, #4]
 8041b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041b10:	4618      	mov	r0, r3
 8041b12:	f000 fe55 	bl	80427c0 <RCC_SetFlashLatencyFromMSIRange>
 8041b16:	4603      	mov	r3, r0
 8041b18:	2b00      	cmp	r3, #0
 8041b1a:	d002      	beq.n	8041b22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8041b1c:	2301      	movs	r3, #1
 8041b1e:	f000 bc47 	b.w	80423b0 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8041b22:	f000 fe11 	bl	8042748 <HAL_RCC_GetHCLKFreq>
 8041b26:	4603      	mov	r3, r0
 8041b28:	4a5e      	ldr	r2, [pc, #376]	; (8041ca4 <HAL_RCC_OscConfig+0x2a8>)
 8041b2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8041b2c:	4b5e      	ldr	r3, [pc, #376]	; (8041ca8 <HAL_RCC_OscConfig+0x2ac>)
 8041b2e:	681b      	ldr	r3, [r3, #0]
 8041b30:	4618      	mov	r0, r3
 8041b32:	f7ff f8ed 	bl	8040d10 <HAL_InitTick>
 8041b36:	4603      	mov	r3, r0
 8041b38:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8041b3a:	7bfb      	ldrb	r3, [r7, #15]
 8041b3c:	2b00      	cmp	r3, #0
 8041b3e:	d060      	beq.n	8041c02 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8041b40:	7bfb      	ldrb	r3, [r7, #15]
 8041b42:	f000 bc35 	b.w	80423b0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8041b46:	687b      	ldr	r3, [r7, #4]
 8041b48:	69db      	ldr	r3, [r3, #28]
 8041b4a:	2b00      	cmp	r3, #0
 8041b4c:	d039      	beq.n	8041bc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8041b4e:	4b54      	ldr	r3, [pc, #336]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041b50:	681b      	ldr	r3, [r3, #0]
 8041b52:	4a53      	ldr	r2, [pc, #332]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041b54:	f043 0301 	orr.w	r3, r3, #1
 8041b58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8041b5a:	f7ff f929 	bl	8040db0 <HAL_GetTick>
 8041b5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041b60:	e00f      	b.n	8041b82 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8041b62:	f7ff f925 	bl	8040db0 <HAL_GetTick>
 8041b66:	4602      	mov	r2, r0
 8041b68:	693b      	ldr	r3, [r7, #16]
 8041b6a:	1ad3      	subs	r3, r2, r3
 8041b6c:	2b02      	cmp	r3, #2
 8041b6e:	d908      	bls.n	8041b82 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041b70:	4b4b      	ldr	r3, [pc, #300]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041b72:	681b      	ldr	r3, [r3, #0]
 8041b74:	f003 0302 	and.w	r3, r3, #2
 8041b78:	2b00      	cmp	r3, #0
 8041b7a:	d102      	bne.n	8041b82 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8041b7c:	2303      	movs	r3, #3
 8041b7e:	f000 bc17 	b.w	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041b82:	4b47      	ldr	r3, [pc, #284]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041b84:	681b      	ldr	r3, [r3, #0]
 8041b86:	f003 0302 	and.w	r3, r3, #2
 8041b8a:	2b00      	cmp	r3, #0
 8041b8c:	d0e9      	beq.n	8041b62 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8041b8e:	4b44      	ldr	r3, [pc, #272]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041b90:	681b      	ldr	r3, [r3, #0]
 8041b92:	4a43      	ldr	r2, [pc, #268]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041b94:	f043 0308 	orr.w	r3, r3, #8
 8041b98:	6013      	str	r3, [r2, #0]
 8041b9a:	4b41      	ldr	r3, [pc, #260]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041b9c:	681b      	ldr	r3, [r3, #0]
 8041b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041ba2:	687b      	ldr	r3, [r7, #4]
 8041ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041ba6:	493e      	ldr	r1, [pc, #248]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041ba8:	4313      	orrs	r3, r2
 8041baa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8041bac:	4b3c      	ldr	r3, [pc, #240]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041bae:	685b      	ldr	r3, [r3, #4]
 8041bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8041bb4:	687b      	ldr	r3, [r7, #4]
 8041bb6:	6a1b      	ldr	r3, [r3, #32]
 8041bb8:	021b      	lsls	r3, r3, #8
 8041bba:	4939      	ldr	r1, [pc, #228]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041bbc:	4313      	orrs	r3, r2
 8041bbe:	604b      	str	r3, [r1, #4]
 8041bc0:	e020      	b.n	8041c04 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8041bc2:	4b37      	ldr	r3, [pc, #220]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041bc4:	681b      	ldr	r3, [r3, #0]
 8041bc6:	4a36      	ldr	r2, [pc, #216]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041bc8:	f023 0301 	bic.w	r3, r3, #1
 8041bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8041bce:	f7ff f8ef 	bl	8040db0 <HAL_GetTick>
 8041bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8041bd4:	e00e      	b.n	8041bf4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8041bd6:	f7ff f8eb 	bl	8040db0 <HAL_GetTick>
 8041bda:	4602      	mov	r2, r0
 8041bdc:	693b      	ldr	r3, [r7, #16]
 8041bde:	1ad3      	subs	r3, r2, r3
 8041be0:	2b02      	cmp	r3, #2
 8041be2:	d907      	bls.n	8041bf4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8041be4:	4b2e      	ldr	r3, [pc, #184]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041be6:	681b      	ldr	r3, [r3, #0]
 8041be8:	f003 0302 	and.w	r3, r3, #2
 8041bec:	2b00      	cmp	r3, #0
 8041bee:	d001      	beq.n	8041bf4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8041bf0:	2303      	movs	r3, #3
 8041bf2:	e3dd      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8041bf4:	4b2a      	ldr	r3, [pc, #168]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041bf6:	681b      	ldr	r3, [r3, #0]
 8041bf8:	f003 0302 	and.w	r3, r3, #2
 8041bfc:	2b00      	cmp	r3, #0
 8041bfe:	d1ea      	bne.n	8041bd6 <HAL_RCC_OscConfig+0x1da>
 8041c00:	e000      	b.n	8041c04 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8041c02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041c04:	687b      	ldr	r3, [r7, #4]
 8041c06:	681b      	ldr	r3, [r3, #0]
 8041c08:	f003 0301 	and.w	r3, r3, #1
 8041c0c:	2b00      	cmp	r3, #0
 8041c0e:	d07e      	beq.n	8041d0e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8041c10:	69bb      	ldr	r3, [r7, #24]
 8041c12:	2b08      	cmp	r3, #8
 8041c14:	d005      	beq.n	8041c22 <HAL_RCC_OscConfig+0x226>
 8041c16:	69bb      	ldr	r3, [r7, #24]
 8041c18:	2b0c      	cmp	r3, #12
 8041c1a:	d10e      	bne.n	8041c3a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8041c1c:	697b      	ldr	r3, [r7, #20]
 8041c1e:	2b03      	cmp	r3, #3
 8041c20:	d10b      	bne.n	8041c3a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041c22:	4b1f      	ldr	r3, [pc, #124]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c24:	681b      	ldr	r3, [r3, #0]
 8041c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041c2a:	2b00      	cmp	r3, #0
 8041c2c:	d06e      	beq.n	8041d0c <HAL_RCC_OscConfig+0x310>
 8041c2e:	687b      	ldr	r3, [r7, #4]
 8041c30:	685b      	ldr	r3, [r3, #4]
 8041c32:	2b00      	cmp	r3, #0
 8041c34:	d16a      	bne.n	8041d0c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8041c36:	2301      	movs	r3, #1
 8041c38:	e3ba      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041c3a:	687b      	ldr	r3, [r7, #4]
 8041c3c:	685b      	ldr	r3, [r3, #4]
 8041c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041c42:	d106      	bne.n	8041c52 <HAL_RCC_OscConfig+0x256>
 8041c44:	4b16      	ldr	r3, [pc, #88]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c46:	681b      	ldr	r3, [r3, #0]
 8041c48:	4a15      	ldr	r2, [pc, #84]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041c4e:	6013      	str	r3, [r2, #0]
 8041c50:	e01d      	b.n	8041c8e <HAL_RCC_OscConfig+0x292>
 8041c52:	687b      	ldr	r3, [r7, #4]
 8041c54:	685b      	ldr	r3, [r3, #4]
 8041c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041c5a:	d10c      	bne.n	8041c76 <HAL_RCC_OscConfig+0x27a>
 8041c5c:	4b10      	ldr	r3, [pc, #64]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c5e:	681b      	ldr	r3, [r3, #0]
 8041c60:	4a0f      	ldr	r2, [pc, #60]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041c66:	6013      	str	r3, [r2, #0]
 8041c68:	4b0d      	ldr	r3, [pc, #52]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c6a:	681b      	ldr	r3, [r3, #0]
 8041c6c:	4a0c      	ldr	r2, [pc, #48]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041c72:	6013      	str	r3, [r2, #0]
 8041c74:	e00b      	b.n	8041c8e <HAL_RCC_OscConfig+0x292>
 8041c76:	4b0a      	ldr	r3, [pc, #40]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c78:	681b      	ldr	r3, [r3, #0]
 8041c7a:	4a09      	ldr	r2, [pc, #36]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041c80:	6013      	str	r3, [r2, #0]
 8041c82:	4b07      	ldr	r3, [pc, #28]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c84:	681b      	ldr	r3, [r3, #0]
 8041c86:	4a06      	ldr	r2, [pc, #24]	; (8041ca0 <HAL_RCC_OscConfig+0x2a4>)
 8041c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041c8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041c8e:	687b      	ldr	r3, [r7, #4]
 8041c90:	685b      	ldr	r3, [r3, #4]
 8041c92:	2b00      	cmp	r3, #0
 8041c94:	d020      	beq.n	8041cd8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c96:	f7ff f88b 	bl	8040db0 <HAL_GetTick>
 8041c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041c9c:	e015      	b.n	8041cca <HAL_RCC_OscConfig+0x2ce>
 8041c9e:	bf00      	nop
 8041ca0:	40021000 	.word	0x40021000
 8041ca4:	20030000 	.word	0x20030000
 8041ca8:	20030004 	.word	0x20030004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041cac:	f7ff f880 	bl	8040db0 <HAL_GetTick>
 8041cb0:	4602      	mov	r2, r0
 8041cb2:	693b      	ldr	r3, [r7, #16]
 8041cb4:	1ad3      	subs	r3, r2, r3
 8041cb6:	2b64      	cmp	r3, #100	; 0x64
 8041cb8:	d907      	bls.n	8041cca <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041cba:	4b9f      	ldr	r3, [pc, #636]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041cbc:	681b      	ldr	r3, [r3, #0]
 8041cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041cc2:	2b00      	cmp	r3, #0
 8041cc4:	d101      	bne.n	8041cca <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8041cc6:	2303      	movs	r3, #3
 8041cc8:	e372      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041cca:	4b9b      	ldr	r3, [pc, #620]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041ccc:	681b      	ldr	r3, [r3, #0]
 8041cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041cd2:	2b00      	cmp	r3, #0
 8041cd4:	d0ea      	beq.n	8041cac <HAL_RCC_OscConfig+0x2b0>
 8041cd6:	e01a      	b.n	8041d0e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041cd8:	f7ff f86a 	bl	8040db0 <HAL_GetTick>
 8041cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041cde:	e00e      	b.n	8041cfe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041ce0:	f7ff f866 	bl	8040db0 <HAL_GetTick>
 8041ce4:	4602      	mov	r2, r0
 8041ce6:	693b      	ldr	r3, [r7, #16]
 8041ce8:	1ad3      	subs	r3, r2, r3
 8041cea:	2b64      	cmp	r3, #100	; 0x64
 8041cec:	d907      	bls.n	8041cfe <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041cee:	4b92      	ldr	r3, [pc, #584]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041cf0:	681b      	ldr	r3, [r3, #0]
 8041cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041cf6:	2b00      	cmp	r3, #0
 8041cf8:	d001      	beq.n	8041cfe <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8041cfa:	2303      	movs	r3, #3
 8041cfc:	e358      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041cfe:	4b8e      	ldr	r3, [pc, #568]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041d00:	681b      	ldr	r3, [r3, #0]
 8041d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041d06:	2b00      	cmp	r3, #0
 8041d08:	d1ea      	bne.n	8041ce0 <HAL_RCC_OscConfig+0x2e4>
 8041d0a:	e000      	b.n	8041d0e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041d0e:	687b      	ldr	r3, [r7, #4]
 8041d10:	681b      	ldr	r3, [r3, #0]
 8041d12:	f003 0302 	and.w	r3, r3, #2
 8041d16:	2b00      	cmp	r3, #0
 8041d18:	d06c      	beq.n	8041df4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8041d1a:	69bb      	ldr	r3, [r7, #24]
 8041d1c:	2b04      	cmp	r3, #4
 8041d1e:	d005      	beq.n	8041d2c <HAL_RCC_OscConfig+0x330>
 8041d20:	69bb      	ldr	r3, [r7, #24]
 8041d22:	2b0c      	cmp	r3, #12
 8041d24:	d119      	bne.n	8041d5a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8041d26:	697b      	ldr	r3, [r7, #20]
 8041d28:	2b02      	cmp	r3, #2
 8041d2a:	d116      	bne.n	8041d5a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041d2c:	4b82      	ldr	r3, [pc, #520]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041d2e:	681b      	ldr	r3, [r3, #0]
 8041d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041d34:	2b00      	cmp	r3, #0
 8041d36:	d005      	beq.n	8041d44 <HAL_RCC_OscConfig+0x348>
 8041d38:	687b      	ldr	r3, [r7, #4]
 8041d3a:	68db      	ldr	r3, [r3, #12]
 8041d3c:	2b00      	cmp	r3, #0
 8041d3e:	d101      	bne.n	8041d44 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8041d40:	2301      	movs	r3, #1
 8041d42:	e335      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041d44:	4b7c      	ldr	r3, [pc, #496]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041d46:	685b      	ldr	r3, [r3, #4]
 8041d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041d4c:	687b      	ldr	r3, [r7, #4]
 8041d4e:	691b      	ldr	r3, [r3, #16]
 8041d50:	061b      	lsls	r3, r3, #24
 8041d52:	4979      	ldr	r1, [pc, #484]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041d54:	4313      	orrs	r3, r2
 8041d56:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041d58:	e04c      	b.n	8041df4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8041d5a:	687b      	ldr	r3, [r7, #4]
 8041d5c:	68db      	ldr	r3, [r3, #12]
 8041d5e:	2b00      	cmp	r3, #0
 8041d60:	d029      	beq.n	8041db6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041d62:	4b75      	ldr	r3, [pc, #468]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041d64:	681b      	ldr	r3, [r3, #0]
 8041d66:	4a74      	ldr	r2, [pc, #464]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041d6e:	f7ff f81f 	bl	8040db0 <HAL_GetTick>
 8041d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041d74:	e00e      	b.n	8041d94 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041d76:	f7ff f81b 	bl	8040db0 <HAL_GetTick>
 8041d7a:	4602      	mov	r2, r0
 8041d7c:	693b      	ldr	r3, [r7, #16]
 8041d7e:	1ad3      	subs	r3, r2, r3
 8041d80:	2b02      	cmp	r3, #2
 8041d82:	d907      	bls.n	8041d94 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041d84:	4b6c      	ldr	r3, [pc, #432]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041d86:	681b      	ldr	r3, [r3, #0]
 8041d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041d8c:	2b00      	cmp	r3, #0
 8041d8e:	d101      	bne.n	8041d94 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8041d90:	2303      	movs	r3, #3
 8041d92:	e30d      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041d94:	4b68      	ldr	r3, [pc, #416]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041d96:	681b      	ldr	r3, [r3, #0]
 8041d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041d9c:	2b00      	cmp	r3, #0
 8041d9e:	d0ea      	beq.n	8041d76 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041da0:	4b65      	ldr	r3, [pc, #404]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041da2:	685b      	ldr	r3, [r3, #4]
 8041da4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041da8:	687b      	ldr	r3, [r7, #4]
 8041daa:	691b      	ldr	r3, [r3, #16]
 8041dac:	061b      	lsls	r3, r3, #24
 8041dae:	4962      	ldr	r1, [pc, #392]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041db0:	4313      	orrs	r3, r2
 8041db2:	604b      	str	r3, [r1, #4]
 8041db4:	e01e      	b.n	8041df4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041db6:	4b60      	ldr	r3, [pc, #384]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041db8:	681b      	ldr	r3, [r3, #0]
 8041dba:	4a5f      	ldr	r2, [pc, #380]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041dc2:	f7fe fff5 	bl	8040db0 <HAL_GetTick>
 8041dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041dc8:	e00e      	b.n	8041de8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041dca:	f7fe fff1 	bl	8040db0 <HAL_GetTick>
 8041dce:	4602      	mov	r2, r0
 8041dd0:	693b      	ldr	r3, [r7, #16]
 8041dd2:	1ad3      	subs	r3, r2, r3
 8041dd4:	2b02      	cmp	r3, #2
 8041dd6:	d907      	bls.n	8041de8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041dd8:	4b57      	ldr	r3, [pc, #348]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041dda:	681b      	ldr	r3, [r3, #0]
 8041ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041de0:	2b00      	cmp	r3, #0
 8041de2:	d001      	beq.n	8041de8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8041de4:	2303      	movs	r3, #3
 8041de6:	e2e3      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041de8:	4b53      	ldr	r3, [pc, #332]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041dea:	681b      	ldr	r3, [r3, #0]
 8041dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041df0:	2b00      	cmp	r3, #0
 8041df2:	d1ea      	bne.n	8041dca <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041df4:	687b      	ldr	r3, [r7, #4]
 8041df6:	681b      	ldr	r3, [r3, #0]
 8041df8:	f003 0308 	and.w	r3, r3, #8
 8041dfc:	2b00      	cmp	r3, #0
 8041dfe:	d05f      	beq.n	8041ec0 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8041e00:	687b      	ldr	r3, [r7, #4]
 8041e02:	695b      	ldr	r3, [r3, #20]
 8041e04:	2b00      	cmp	r3, #0
 8041e06:	d038      	beq.n	8041e7a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8041e08:	687b      	ldr	r3, [r7, #4]
 8041e0a:	699b      	ldr	r3, [r3, #24]
 8041e0c:	2b00      	cmp	r3, #0
 8041e0e:	d108      	bne.n	8041e22 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8041e10:	4b49      	ldr	r3, [pc, #292]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041e16:	4a48      	ldr	r2, [pc, #288]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e18:	f023 0310 	bic.w	r3, r3, #16
 8041e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8041e20:	e007      	b.n	8041e32 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8041e22:	4b45      	ldr	r3, [pc, #276]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041e28:	4a43      	ldr	r2, [pc, #268]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e2a:	f043 0310 	orr.w	r3, r3, #16
 8041e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041e32:	4b41      	ldr	r3, [pc, #260]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041e38:	4a3f      	ldr	r2, [pc, #252]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e3a:	f043 0301 	orr.w	r3, r3, #1
 8041e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041e42:	f7fe ffb5 	bl	8040db0 <HAL_GetTick>
 8041e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041e48:	e00f      	b.n	8041e6a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041e4a:	f7fe ffb1 	bl	8040db0 <HAL_GetTick>
 8041e4e:	4602      	mov	r2, r0
 8041e50:	693b      	ldr	r3, [r7, #16]
 8041e52:	1ad3      	subs	r3, r2, r3
 8041e54:	2b07      	cmp	r3, #7
 8041e56:	d908      	bls.n	8041e6a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041e58:	4b37      	ldr	r3, [pc, #220]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041e5e:	f003 0302 	and.w	r3, r3, #2
 8041e62:	2b00      	cmp	r3, #0
 8041e64:	d101      	bne.n	8041e6a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8041e66:	2303      	movs	r3, #3
 8041e68:	e2a2      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041e6a:	4b33      	ldr	r3, [pc, #204]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041e70:	f003 0302 	and.w	r3, r3, #2
 8041e74:	2b00      	cmp	r3, #0
 8041e76:	d0e8      	beq.n	8041e4a <HAL_RCC_OscConfig+0x44e>
 8041e78:	e022      	b.n	8041ec0 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041e7a:	4b2f      	ldr	r3, [pc, #188]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041e80:	4a2d      	ldr	r2, [pc, #180]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041e82:	f023 0301 	bic.w	r3, r3, #1
 8041e86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041e8a:	f7fe ff91 	bl	8040db0 <HAL_GetTick>
 8041e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041e90:	e00f      	b.n	8041eb2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041e92:	f7fe ff8d 	bl	8040db0 <HAL_GetTick>
 8041e96:	4602      	mov	r2, r0
 8041e98:	693b      	ldr	r3, [r7, #16]
 8041e9a:	1ad3      	subs	r3, r2, r3
 8041e9c:	2b07      	cmp	r3, #7
 8041e9e:	d908      	bls.n	8041eb2 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041ea0:	4b25      	ldr	r3, [pc, #148]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041ea6:	f003 0302 	and.w	r3, r3, #2
 8041eaa:	2b00      	cmp	r3, #0
 8041eac:	d001      	beq.n	8041eb2 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 8041eae:	2303      	movs	r3, #3
 8041eb0:	e27e      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041eb2:	4b21      	ldr	r3, [pc, #132]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041eb8:	f003 0302 	and.w	r3, r3, #2
 8041ebc:	2b00      	cmp	r3, #0
 8041ebe:	d1e8      	bne.n	8041e92 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041ec0:	687b      	ldr	r3, [r7, #4]
 8041ec2:	681b      	ldr	r3, [r3, #0]
 8041ec4:	f003 0304 	and.w	r3, r3, #4
 8041ec8:	2b00      	cmp	r3, #0
 8041eca:	f000 8131 	beq.w	8042130 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041ece:	2300      	movs	r3, #0
 8041ed0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8041ed2:	4b19      	ldr	r3, [pc, #100]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041eda:	2b00      	cmp	r3, #0
 8041edc:	d10d      	bne.n	8041efa <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041ede:	4b16      	ldr	r3, [pc, #88]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041ee2:	4a15      	ldr	r2, [pc, #84]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8041eea:	4b13      	ldr	r3, [pc, #76]	; (8041f38 <HAL_RCC_OscConfig+0x53c>)
 8041eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041ef2:	60bb      	str	r3, [r7, #8]
 8041ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041ef6:	2301      	movs	r3, #1
 8041ef8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041efa:	4b10      	ldr	r3, [pc, #64]	; (8041f3c <HAL_RCC_OscConfig+0x540>)
 8041efc:	681b      	ldr	r3, [r3, #0]
 8041efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041f02:	2b00      	cmp	r3, #0
 8041f04:	d122      	bne.n	8041f4c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041f06:	4b0d      	ldr	r3, [pc, #52]	; (8041f3c <HAL_RCC_OscConfig+0x540>)
 8041f08:	681b      	ldr	r3, [r3, #0]
 8041f0a:	4a0c      	ldr	r2, [pc, #48]	; (8041f3c <HAL_RCC_OscConfig+0x540>)
 8041f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041f12:	f7fe ff4d 	bl	8040db0 <HAL_GetTick>
 8041f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041f18:	e012      	b.n	8041f40 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041f1a:	f7fe ff49 	bl	8040db0 <HAL_GetTick>
 8041f1e:	4602      	mov	r2, r0
 8041f20:	693b      	ldr	r3, [r7, #16]
 8041f22:	1ad3      	subs	r3, r2, r3
 8041f24:	2b02      	cmp	r3, #2
 8041f26:	d90b      	bls.n	8041f40 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041f28:	4b04      	ldr	r3, [pc, #16]	; (8041f3c <HAL_RCC_OscConfig+0x540>)
 8041f2a:	681b      	ldr	r3, [r3, #0]
 8041f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041f30:	2b00      	cmp	r3, #0
 8041f32:	d105      	bne.n	8041f40 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8041f34:	2303      	movs	r3, #3
 8041f36:	e23b      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
 8041f38:	40021000 	.word	0x40021000
 8041f3c:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041f40:	4bb8      	ldr	r3, [pc, #736]	; (8042224 <HAL_RCC_OscConfig+0x828>)
 8041f42:	681b      	ldr	r3, [r3, #0]
 8041f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041f48:	2b00      	cmp	r3, #0
 8041f4a:	d0e6      	beq.n	8041f1a <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8041f4c:	687b      	ldr	r3, [r7, #4]
 8041f4e:	689b      	ldr	r3, [r3, #8]
 8041f50:	f003 0301 	and.w	r3, r3, #1
 8041f54:	2b00      	cmp	r3, #0
 8041f56:	d01f      	beq.n	8041f98 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8041f58:	687b      	ldr	r3, [r7, #4]
 8041f5a:	689b      	ldr	r3, [r3, #8]
 8041f5c:	f003 0304 	and.w	r3, r3, #4
 8041f60:	2b00      	cmp	r3, #0
 8041f62:	d010      	beq.n	8041f86 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8041f64:	4bb0      	ldr	r3, [pc, #704]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f6a:	4aaf      	ldr	r2, [pc, #700]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041f6c:	f043 0304 	orr.w	r3, r3, #4
 8041f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041f74:	4bac      	ldr	r3, [pc, #688]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f7a:	4aab      	ldr	r2, [pc, #684]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041f7c:	f043 0301 	orr.w	r3, r3, #1
 8041f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041f84:	e018      	b.n	8041fb8 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041f86:	4ba8      	ldr	r3, [pc, #672]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f8c:	4aa6      	ldr	r2, [pc, #664]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041f8e:	f043 0301 	orr.w	r3, r3, #1
 8041f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041f96:	e00f      	b.n	8041fb8 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8041f98:	4ba3      	ldr	r3, [pc, #652]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f9e:	4aa2      	ldr	r2, [pc, #648]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041fa0:	f023 0301 	bic.w	r3, r3, #1
 8041fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8041fa8:	4b9f      	ldr	r3, [pc, #636]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041fae:	4a9e      	ldr	r2, [pc, #632]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041fb0:	f023 0304 	bic.w	r3, r3, #4
 8041fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8041fb8:	687b      	ldr	r3, [r7, #4]
 8041fba:	689b      	ldr	r3, [r3, #8]
 8041fbc:	2b00      	cmp	r3, #0
 8041fbe:	d068      	beq.n	8042092 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041fc0:	f7fe fef6 	bl	8040db0 <HAL_GetTick>
 8041fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041fc6:	e011      	b.n	8041fec <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041fc8:	f7fe fef2 	bl	8040db0 <HAL_GetTick>
 8041fcc:	4602      	mov	r2, r0
 8041fce:	693b      	ldr	r3, [r7, #16]
 8041fd0:	1ad3      	subs	r3, r2, r3
 8041fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8041fd6:	4293      	cmp	r3, r2
 8041fd8:	d908      	bls.n	8041fec <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041fda:	4b93      	ldr	r3, [pc, #588]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041fe0:	f003 0302 	and.w	r3, r3, #2
 8041fe4:	2b00      	cmp	r3, #0
 8041fe6:	d101      	bne.n	8041fec <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8041fe8:	2303      	movs	r3, #3
 8041fea:	e1e1      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041fec:	4b8e      	ldr	r3, [pc, #568]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8041fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041ff2:	f003 0302 	and.w	r3, r3, #2
 8041ff6:	2b00      	cmp	r3, #0
 8041ff8:	d0e6      	beq.n	8041fc8 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8041ffa:	687b      	ldr	r3, [r7, #4]
 8041ffc:	689b      	ldr	r3, [r3, #8]
 8041ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042002:	2b00      	cmp	r3, #0
 8042004:	d022      	beq.n	804204c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8042006:	4b88      	ldr	r3, [pc, #544]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804200c:	4a86      	ldr	r2, [pc, #536]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804200e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8042016:	e011      	b.n	804203c <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042018:	f7fe feca 	bl	8040db0 <HAL_GetTick>
 804201c:	4602      	mov	r2, r0
 804201e:	693b      	ldr	r3, [r7, #16]
 8042020:	1ad3      	subs	r3, r2, r3
 8042022:	f241 3288 	movw	r2, #5000	; 0x1388
 8042026:	4293      	cmp	r3, r2
 8042028:	d908      	bls.n	804203c <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 804202a:	4b7f      	ldr	r3, [pc, #508]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042034:	2b00      	cmp	r3, #0
 8042036:	d101      	bne.n	804203c <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8042038:	2303      	movs	r3, #3
 804203a:	e1b9      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 804203c:	4b7a      	ldr	r3, [pc, #488]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042046:	2b00      	cmp	r3, #0
 8042048:	d0e6      	beq.n	8042018 <HAL_RCC_OscConfig+0x61c>
 804204a:	e068      	b.n	804211e <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 804204c:	4b76      	ldr	r3, [pc, #472]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042052:	4a75      	ldr	r2, [pc, #468]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8042058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 804205c:	e011      	b.n	8042082 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804205e:	f7fe fea7 	bl	8040db0 <HAL_GetTick>
 8042062:	4602      	mov	r2, r0
 8042064:	693b      	ldr	r3, [r7, #16]
 8042066:	1ad3      	subs	r3, r2, r3
 8042068:	f241 3288 	movw	r2, #5000	; 0x1388
 804206c:	4293      	cmp	r3, r2
 804206e:	d908      	bls.n	8042082 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8042070:	4b6d      	ldr	r3, [pc, #436]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804207a:	2b00      	cmp	r3, #0
 804207c:	d001      	beq.n	8042082 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 804207e:	2303      	movs	r3, #3
 8042080:	e196      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8042082:	4b69      	ldr	r3, [pc, #420]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804208c:	2b00      	cmp	r3, #0
 804208e:	d1e6      	bne.n	804205e <HAL_RCC_OscConfig+0x662>
 8042090:	e045      	b.n	804211e <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042092:	f7fe fe8d 	bl	8040db0 <HAL_GetTick>
 8042096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8042098:	e011      	b.n	80420be <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804209a:	f7fe fe89 	bl	8040db0 <HAL_GetTick>
 804209e:	4602      	mov	r2, r0
 80420a0:	693b      	ldr	r3, [r7, #16]
 80420a2:	1ad3      	subs	r3, r2, r3
 80420a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80420a8:	4293      	cmp	r3, r2
 80420aa:	d908      	bls.n	80420be <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80420ac:	4b5e      	ldr	r3, [pc, #376]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80420ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80420b2:	f003 0302 	and.w	r3, r3, #2
 80420b6:	2b00      	cmp	r3, #0
 80420b8:	d001      	beq.n	80420be <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80420ba:	2303      	movs	r3, #3
 80420bc:	e178      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80420be:	4b5a      	ldr	r3, [pc, #360]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80420c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80420c4:	f003 0302 	and.w	r3, r3, #2
 80420c8:	2b00      	cmp	r3, #0
 80420ca:	d1e6      	bne.n	804209a <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80420cc:	4b56      	ldr	r3, [pc, #344]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80420ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80420d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80420d6:	2b00      	cmp	r3, #0
 80420d8:	d021      	beq.n	804211e <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80420da:	4b53      	ldr	r3, [pc, #332]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80420dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80420e0:	4a51      	ldr	r2, [pc, #324]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80420e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80420e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80420ea:	e011      	b.n	8042110 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80420ec:	f7fe fe60 	bl	8040db0 <HAL_GetTick>
 80420f0:	4602      	mov	r2, r0
 80420f2:	693b      	ldr	r3, [r7, #16]
 80420f4:	1ad3      	subs	r3, r2, r3
 80420f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80420fa:	4293      	cmp	r3, r2
 80420fc:	d908      	bls.n	8042110 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80420fe:	4b4a      	ldr	r3, [pc, #296]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042108:	2b00      	cmp	r3, #0
 804210a:	d001      	beq.n	8042110 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 804210c:	2303      	movs	r3, #3
 804210e:	e14f      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8042110:	4b45      	ldr	r3, [pc, #276]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804211a:	2b00      	cmp	r3, #0
 804211c:	d1e6      	bne.n	80420ec <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 804211e:	7ffb      	ldrb	r3, [r7, #31]
 8042120:	2b01      	cmp	r3, #1
 8042122:	d105      	bne.n	8042130 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8042124:	4b40      	ldr	r3, [pc, #256]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042128:	4a3f      	ldr	r2, [pc, #252]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804212a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804212e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8042130:	687b      	ldr	r3, [r7, #4]
 8042132:	681b      	ldr	r3, [r3, #0]
 8042134:	f003 0320 	and.w	r3, r3, #32
 8042138:	2b00      	cmp	r3, #0
 804213a:	d04a      	beq.n	80421d2 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042140:	2b00      	cmp	r3, #0
 8042142:	d023      	beq.n	804218c <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8042144:	4b38      	ldr	r3, [pc, #224]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804214a:	4a37      	ldr	r2, [pc, #220]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804214c:	f043 0301 	orr.w	r3, r3, #1
 8042150:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042154:	f7fe fe2c 	bl	8040db0 <HAL_GetTick>
 8042158:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804215a:	e00f      	b.n	804217c <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 804215c:	f7fe fe28 	bl	8040db0 <HAL_GetTick>
 8042160:	4602      	mov	r2, r0
 8042162:	693b      	ldr	r3, [r7, #16]
 8042164:	1ad3      	subs	r3, r2, r3
 8042166:	2b02      	cmp	r3, #2
 8042168:	d908      	bls.n	804217c <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804216a:	4b2f      	ldr	r3, [pc, #188]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804216c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8042170:	f003 0302 	and.w	r3, r3, #2
 8042174:	2b00      	cmp	r3, #0
 8042176:	d101      	bne.n	804217c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8042178:	2303      	movs	r3, #3
 804217a:	e119      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804217c:	4b2a      	ldr	r3, [pc, #168]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804217e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8042182:	f003 0302 	and.w	r3, r3, #2
 8042186:	2b00      	cmp	r3, #0
 8042188:	d0e8      	beq.n	804215c <HAL_RCC_OscConfig+0x760>
 804218a:	e022      	b.n	80421d2 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 804218c:	4b26      	ldr	r3, [pc, #152]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 804218e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8042192:	4a25      	ldr	r2, [pc, #148]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042194:	f023 0301 	bic.w	r3, r3, #1
 8042198:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804219c:	f7fe fe08 	bl	8040db0 <HAL_GetTick>
 80421a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80421a2:	e00f      	b.n	80421c4 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80421a4:	f7fe fe04 	bl	8040db0 <HAL_GetTick>
 80421a8:	4602      	mov	r2, r0
 80421aa:	693b      	ldr	r3, [r7, #16]
 80421ac:	1ad3      	subs	r3, r2, r3
 80421ae:	2b02      	cmp	r3, #2
 80421b0:	d908      	bls.n	80421c4 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80421b2:	4b1d      	ldr	r3, [pc, #116]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80421b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80421b8:	f003 0302 	and.w	r3, r3, #2
 80421bc:	2b00      	cmp	r3, #0
 80421be:	d001      	beq.n	80421c4 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 80421c0:	2303      	movs	r3, #3
 80421c2:	e0f5      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80421c4:	4b18      	ldr	r3, [pc, #96]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80421c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80421ca:	f003 0302 	and.w	r3, r3, #2
 80421ce:	2b00      	cmp	r3, #0
 80421d0:	d1e8      	bne.n	80421a4 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80421d2:	687b      	ldr	r3, [r7, #4]
 80421d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80421d6:	2b00      	cmp	r3, #0
 80421d8:	f000 80e9 	beq.w	80423ae <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80421dc:	4b12      	ldr	r3, [pc, #72]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80421de:	689b      	ldr	r3, [r3, #8]
 80421e0:	f003 030c 	and.w	r3, r3, #12
 80421e4:	2b0c      	cmp	r3, #12
 80421e6:	f000 80a3 	beq.w	8042330 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80421ea:	687b      	ldr	r3, [r7, #4]
 80421ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80421ee:	2b02      	cmp	r3, #2
 80421f0:	d16a      	bne.n	80422c8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80421f2:	4b0d      	ldr	r3, [pc, #52]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80421f4:	681b      	ldr	r3, [r3, #0]
 80421f6:	4a0c      	ldr	r2, [pc, #48]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 80421f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80421fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80421fe:	f7fe fdd7 	bl	8040db0 <HAL_GetTick>
 8042202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8042204:	e012      	b.n	804222c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8042206:	f7fe fdd3 	bl	8040db0 <HAL_GetTick>
 804220a:	4602      	mov	r2, r0
 804220c:	693b      	ldr	r3, [r7, #16]
 804220e:	1ad3      	subs	r3, r2, r3
 8042210:	2b02      	cmp	r3, #2
 8042212:	d90b      	bls.n	804222c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8042214:	4b04      	ldr	r3, [pc, #16]	; (8042228 <HAL_RCC_OscConfig+0x82c>)
 8042216:	681b      	ldr	r3, [r3, #0]
 8042218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804221c:	2b00      	cmp	r3, #0
 804221e:	d005      	beq.n	804222c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8042220:	2303      	movs	r3, #3
 8042222:	e0c5      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
 8042224:	40007000 	.word	0x40007000
 8042228:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804222c:	4b62      	ldr	r3, [pc, #392]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 804222e:	681b      	ldr	r3, [r3, #0]
 8042230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042234:	2b00      	cmp	r3, #0
 8042236:	d1e6      	bne.n	8042206 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8042238:	4b5f      	ldr	r3, [pc, #380]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 804223a:	68da      	ldr	r2, [r3, #12]
 804223c:	4b5f      	ldr	r3, [pc, #380]	; (80423bc <HAL_RCC_OscConfig+0x9c0>)
 804223e:	4013      	ands	r3, r2
 8042240:	687a      	ldr	r2, [r7, #4]
 8042242:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8042244:	687a      	ldr	r2, [r7, #4]
 8042246:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8042248:	3a01      	subs	r2, #1
 804224a:	0112      	lsls	r2, r2, #4
 804224c:	4311      	orrs	r1, r2
 804224e:	687a      	ldr	r2, [r7, #4]
 8042250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8042252:	0212      	lsls	r2, r2, #8
 8042254:	4311      	orrs	r1, r2
 8042256:	687a      	ldr	r2, [r7, #4]
 8042258:	6c12      	ldr	r2, [r2, #64]	; 0x40
 804225a:	0852      	lsrs	r2, r2, #1
 804225c:	3a01      	subs	r2, #1
 804225e:	0552      	lsls	r2, r2, #21
 8042260:	4311      	orrs	r1, r2
 8042262:	687a      	ldr	r2, [r7, #4]
 8042264:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8042266:	0852      	lsrs	r2, r2, #1
 8042268:	3a01      	subs	r2, #1
 804226a:	0652      	lsls	r2, r2, #25
 804226c:	4311      	orrs	r1, r2
 804226e:	687a      	ldr	r2, [r7, #4]
 8042270:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8042272:	06d2      	lsls	r2, r2, #27
 8042274:	430a      	orrs	r2, r1
 8042276:	4950      	ldr	r1, [pc, #320]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 8042278:	4313      	orrs	r3, r2
 804227a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804227c:	4b4e      	ldr	r3, [pc, #312]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 804227e:	681b      	ldr	r3, [r3, #0]
 8042280:	4a4d      	ldr	r2, [pc, #308]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 8042282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8042286:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8042288:	4b4b      	ldr	r3, [pc, #300]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 804228a:	68db      	ldr	r3, [r3, #12]
 804228c:	4a4a      	ldr	r2, [pc, #296]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 804228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8042292:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042294:	f7fe fd8c 	bl	8040db0 <HAL_GetTick>
 8042298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 804229a:	e00e      	b.n	80422ba <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804229c:	f7fe fd88 	bl	8040db0 <HAL_GetTick>
 80422a0:	4602      	mov	r2, r0
 80422a2:	693b      	ldr	r3, [r7, #16]
 80422a4:	1ad3      	subs	r3, r2, r3
 80422a6:	2b02      	cmp	r3, #2
 80422a8:	d907      	bls.n	80422ba <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80422aa:	4b43      	ldr	r3, [pc, #268]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422ac:	681b      	ldr	r3, [r3, #0]
 80422ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80422b2:	2b00      	cmp	r3, #0
 80422b4:	d101      	bne.n	80422ba <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80422b6:	2303      	movs	r3, #3
 80422b8:	e07a      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80422ba:	4b3f      	ldr	r3, [pc, #252]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422bc:	681b      	ldr	r3, [r3, #0]
 80422be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80422c2:	2b00      	cmp	r3, #0
 80422c4:	d0ea      	beq.n	804229c <HAL_RCC_OscConfig+0x8a0>
 80422c6:	e072      	b.n	80423ae <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80422c8:	4b3b      	ldr	r3, [pc, #236]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422ca:	681b      	ldr	r3, [r3, #0]
 80422cc:	4a3a      	ldr	r2, [pc, #232]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80422d2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80422d4:	4b38      	ldr	r3, [pc, #224]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422d6:	681b      	ldr	r3, [r3, #0]
 80422d8:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80422dc:	2b00      	cmp	r3, #0
 80422de:	d105      	bne.n	80422ec <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80422e0:	4b35      	ldr	r3, [pc, #212]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422e2:	68db      	ldr	r3, [r3, #12]
 80422e4:	4a34      	ldr	r2, [pc, #208]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422e6:	f023 0303 	bic.w	r3, r3, #3
 80422ea:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80422ec:	4b32      	ldr	r3, [pc, #200]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422ee:	68db      	ldr	r3, [r3, #12]
 80422f0:	4a31      	ldr	r2, [pc, #196]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 80422f2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80422f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80422fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80422fc:	f7fe fd58 	bl	8040db0 <HAL_GetTick>
 8042300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8042302:	e00e      	b.n	8042322 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8042304:	f7fe fd54 	bl	8040db0 <HAL_GetTick>
 8042308:	4602      	mov	r2, r0
 804230a:	693b      	ldr	r3, [r7, #16]
 804230c:	1ad3      	subs	r3, r2, r3
 804230e:	2b02      	cmp	r3, #2
 8042310:	d907      	bls.n	8042322 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8042312:	4b29      	ldr	r3, [pc, #164]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 8042314:	681b      	ldr	r3, [r3, #0]
 8042316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804231a:	2b00      	cmp	r3, #0
 804231c:	d001      	beq.n	8042322 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 804231e:	2303      	movs	r3, #3
 8042320:	e046      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8042322:	4b25      	ldr	r3, [pc, #148]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 8042324:	681b      	ldr	r3, [r3, #0]
 8042326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804232a:	2b00      	cmp	r3, #0
 804232c:	d1ea      	bne.n	8042304 <HAL_RCC_OscConfig+0x908>
 804232e:	e03e      	b.n	80423ae <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8042330:	687b      	ldr	r3, [r7, #4]
 8042332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042334:	2b01      	cmp	r3, #1
 8042336:	d101      	bne.n	804233c <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8042338:	2301      	movs	r3, #1
 804233a:	e039      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 804233c:	4b1e      	ldr	r3, [pc, #120]	; (80423b8 <HAL_RCC_OscConfig+0x9bc>)
 804233e:	68db      	ldr	r3, [r3, #12]
 8042340:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8042342:	697b      	ldr	r3, [r7, #20]
 8042344:	f003 0203 	and.w	r2, r3, #3
 8042348:	687b      	ldr	r3, [r7, #4]
 804234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804234c:	429a      	cmp	r2, r3
 804234e:	d12c      	bne.n	80423aa <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8042350:	697b      	ldr	r3, [r7, #20]
 8042352:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8042356:	687b      	ldr	r3, [r7, #4]
 8042358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804235a:	3b01      	subs	r3, #1
 804235c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 804235e:	429a      	cmp	r2, r3
 8042360:	d123      	bne.n	80423aa <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8042362:	697b      	ldr	r3, [r7, #20]
 8042364:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8042368:	687b      	ldr	r3, [r7, #4]
 804236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804236c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 804236e:	429a      	cmp	r2, r3
 8042370:	d11b      	bne.n	80423aa <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8042372:	697b      	ldr	r3, [r7, #20]
 8042374:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8042378:	687b      	ldr	r3, [r7, #4]
 804237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804237c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804237e:	429a      	cmp	r2, r3
 8042380:	d113      	bne.n	80423aa <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8042382:	697b      	ldr	r3, [r7, #20]
 8042384:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8042388:	687b      	ldr	r3, [r7, #4]
 804238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804238c:	085b      	lsrs	r3, r3, #1
 804238e:	3b01      	subs	r3, #1
 8042390:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8042392:	429a      	cmp	r2, r3
 8042394:	d109      	bne.n	80423aa <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8042396:	697b      	ldr	r3, [r7, #20]
 8042398:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 804239c:	687b      	ldr	r3, [r7, #4]
 804239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80423a0:	085b      	lsrs	r3, r3, #1
 80423a2:	3b01      	subs	r3, #1
 80423a4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80423a6:	429a      	cmp	r2, r3
 80423a8:	d001      	beq.n	80423ae <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80423aa:	2301      	movs	r3, #1
 80423ac:	e000      	b.n	80423b0 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80423ae:	2300      	movs	r3, #0
}
 80423b0:	4618      	mov	r0, r3
 80423b2:	3720      	adds	r7, #32
 80423b4:	46bd      	mov	sp, r7
 80423b6:	bd80      	pop	{r7, pc}
 80423b8:	40021000 	.word	0x40021000
 80423bc:	019f800c 	.word	0x019f800c

080423c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80423c0:	b580      	push	{r7, lr}
 80423c2:	b086      	sub	sp, #24
 80423c4:	af00      	add	r7, sp, #0
 80423c6:	6078      	str	r0, [r7, #4]
 80423c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80423ca:	2300      	movs	r3, #0
 80423cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80423ce:	687b      	ldr	r3, [r7, #4]
 80423d0:	2b00      	cmp	r3, #0
 80423d2:	d101      	bne.n	80423d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80423d4:	2301      	movs	r3, #1
 80423d6:	e10d      	b.n	80425f4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80423d8:	4b88      	ldr	r3, [pc, #544]	; (80425fc <HAL_RCC_ClockConfig+0x23c>)
 80423da:	681b      	ldr	r3, [r3, #0]
 80423dc:	f003 030f 	and.w	r3, r3, #15
 80423e0:	683a      	ldr	r2, [r7, #0]
 80423e2:	429a      	cmp	r2, r3
 80423e4:	d910      	bls.n	8042408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80423e6:	4b85      	ldr	r3, [pc, #532]	; (80425fc <HAL_RCC_ClockConfig+0x23c>)
 80423e8:	681b      	ldr	r3, [r3, #0]
 80423ea:	f023 020f 	bic.w	r2, r3, #15
 80423ee:	4983      	ldr	r1, [pc, #524]	; (80425fc <HAL_RCC_ClockConfig+0x23c>)
 80423f0:	683b      	ldr	r3, [r7, #0]
 80423f2:	4313      	orrs	r3, r2
 80423f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80423f6:	4b81      	ldr	r3, [pc, #516]	; (80425fc <HAL_RCC_ClockConfig+0x23c>)
 80423f8:	681b      	ldr	r3, [r3, #0]
 80423fa:	f003 030f 	and.w	r3, r3, #15
 80423fe:	683a      	ldr	r2, [r7, #0]
 8042400:	429a      	cmp	r2, r3
 8042402:	d001      	beq.n	8042408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8042404:	2301      	movs	r3, #1
 8042406:	e0f5      	b.n	80425f4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8042408:	687b      	ldr	r3, [r7, #4]
 804240a:	681b      	ldr	r3, [r3, #0]
 804240c:	f003 0301 	and.w	r3, r3, #1
 8042410:	2b00      	cmp	r3, #0
 8042412:	f000 8094 	beq.w	804253e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8042416:	687b      	ldr	r3, [r7, #4]
 8042418:	685b      	ldr	r3, [r3, #4]
 804241a:	2b03      	cmp	r3, #3
 804241c:	d134      	bne.n	8042488 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 804241e:	4b78      	ldr	r3, [pc, #480]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 8042420:	681b      	ldr	r3, [r3, #0]
 8042422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042426:	2b00      	cmp	r3, #0
 8042428:	d101      	bne.n	804242e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 804242a:	2301      	movs	r3, #1
 804242c:	e0e2      	b.n	80425f4 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 804242e:	f000 fa2b 	bl	8042888 <RCC_GetSysClockFreqFromPLLSource>
 8042432:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8042434:	693b      	ldr	r3, [r7, #16]
 8042436:	4a73      	ldr	r2, [pc, #460]	; (8042604 <HAL_RCC_ClockConfig+0x244>)
 8042438:	4293      	cmp	r3, r2
 804243a:	d956      	bls.n	80424ea <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 804243c:	4b70      	ldr	r3, [pc, #448]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 804243e:	689b      	ldr	r3, [r3, #8]
 8042440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8042444:	2b00      	cmp	r3, #0
 8042446:	d10a      	bne.n	804245e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8042448:	4b6d      	ldr	r3, [pc, #436]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 804244a:	689b      	ldr	r3, [r3, #8]
 804244c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8042450:	4a6b      	ldr	r2, [pc, #428]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 8042452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042456:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8042458:	2380      	movs	r3, #128	; 0x80
 804245a:	617b      	str	r3, [r7, #20]
 804245c:	e045      	b.n	80424ea <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 804245e:	687b      	ldr	r3, [r7, #4]
 8042460:	681b      	ldr	r3, [r3, #0]
 8042462:	f003 0302 	and.w	r3, r3, #2
 8042466:	2b00      	cmp	r3, #0
 8042468:	d03f      	beq.n	80424ea <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 804246a:	687b      	ldr	r3, [r7, #4]
 804246c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 804246e:	2b00      	cmp	r3, #0
 8042470:	d13b      	bne.n	80424ea <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8042472:	4b63      	ldr	r3, [pc, #396]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 8042474:	689b      	ldr	r3, [r3, #8]
 8042476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804247a:	4a61      	ldr	r2, [pc, #388]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 804247c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042480:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8042482:	2380      	movs	r3, #128	; 0x80
 8042484:	617b      	str	r3, [r7, #20]
 8042486:	e030      	b.n	80424ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8042488:	687b      	ldr	r3, [r7, #4]
 804248a:	685b      	ldr	r3, [r3, #4]
 804248c:	2b02      	cmp	r3, #2
 804248e:	d107      	bne.n	80424a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8042490:	4b5b      	ldr	r3, [pc, #364]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 8042492:	681b      	ldr	r3, [r3, #0]
 8042494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042498:	2b00      	cmp	r3, #0
 804249a:	d115      	bne.n	80424c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 804249c:	2301      	movs	r3, #1
 804249e:	e0a9      	b.n	80425f4 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80424a0:	687b      	ldr	r3, [r7, #4]
 80424a2:	685b      	ldr	r3, [r3, #4]
 80424a4:	2b00      	cmp	r3, #0
 80424a6:	d107      	bne.n	80424b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80424a8:	4b55      	ldr	r3, [pc, #340]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80424aa:	681b      	ldr	r3, [r3, #0]
 80424ac:	f003 0302 	and.w	r3, r3, #2
 80424b0:	2b00      	cmp	r3, #0
 80424b2:	d109      	bne.n	80424c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80424b4:	2301      	movs	r3, #1
 80424b6:	e09d      	b.n	80425f4 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80424b8:	4b51      	ldr	r3, [pc, #324]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80424ba:	681b      	ldr	r3, [r3, #0]
 80424bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80424c0:	2b00      	cmp	r3, #0
 80424c2:	d101      	bne.n	80424c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80424c4:	2301      	movs	r3, #1
 80424c6:	e095      	b.n	80425f4 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80424c8:	f000 f8a2 	bl	8042610 <HAL_RCC_GetSysClockFreq>
 80424cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80424ce:	693b      	ldr	r3, [r7, #16]
 80424d0:	4a4c      	ldr	r2, [pc, #304]	; (8042604 <HAL_RCC_ClockConfig+0x244>)
 80424d2:	4293      	cmp	r3, r2
 80424d4:	d909      	bls.n	80424ea <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80424d6:	4b4a      	ldr	r3, [pc, #296]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80424d8:	689b      	ldr	r3, [r3, #8]
 80424da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80424de:	4a48      	ldr	r2, [pc, #288]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80424e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80424e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80424e6:	2380      	movs	r3, #128	; 0x80
 80424e8:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80424ea:	4b45      	ldr	r3, [pc, #276]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80424ec:	689b      	ldr	r3, [r3, #8]
 80424ee:	f023 0203 	bic.w	r2, r3, #3
 80424f2:	687b      	ldr	r3, [r7, #4]
 80424f4:	685b      	ldr	r3, [r3, #4]
 80424f6:	4942      	ldr	r1, [pc, #264]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80424f8:	4313      	orrs	r3, r2
 80424fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80424fc:	f7fe fc58 	bl	8040db0 <HAL_GetTick>
 8042500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042502:	e013      	b.n	804252c <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8042504:	f7fe fc54 	bl	8040db0 <HAL_GetTick>
 8042508:	4602      	mov	r2, r0
 804250a:	68fb      	ldr	r3, [r7, #12]
 804250c:	1ad3      	subs	r3, r2, r3
 804250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8042512:	4293      	cmp	r3, r2
 8042514:	d90a      	bls.n	804252c <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042516:	4b3a      	ldr	r3, [pc, #232]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 8042518:	689b      	ldr	r3, [r3, #8]
 804251a:	f003 020c 	and.w	r2, r3, #12
 804251e:	687b      	ldr	r3, [r7, #4]
 8042520:	685b      	ldr	r3, [r3, #4]
 8042522:	009b      	lsls	r3, r3, #2
 8042524:	429a      	cmp	r2, r3
 8042526:	d001      	beq.n	804252c <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8042528:	2303      	movs	r3, #3
 804252a:	e063      	b.n	80425f4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804252c:	4b34      	ldr	r3, [pc, #208]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 804252e:	689b      	ldr	r3, [r3, #8]
 8042530:	f003 020c 	and.w	r2, r3, #12
 8042534:	687b      	ldr	r3, [r7, #4]
 8042536:	685b      	ldr	r3, [r3, #4]
 8042538:	009b      	lsls	r3, r3, #2
 804253a:	429a      	cmp	r2, r3
 804253c:	d1e2      	bne.n	8042504 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804253e:	687b      	ldr	r3, [r7, #4]
 8042540:	681b      	ldr	r3, [r3, #0]
 8042542:	f003 0302 	and.w	r3, r3, #2
 8042546:	2b00      	cmp	r3, #0
 8042548:	d009      	beq.n	804255e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804254a:	4b2d      	ldr	r3, [pc, #180]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 804254c:	689b      	ldr	r3, [r3, #8]
 804254e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8042552:	687b      	ldr	r3, [r7, #4]
 8042554:	689b      	ldr	r3, [r3, #8]
 8042556:	492a      	ldr	r1, [pc, #168]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 8042558:	4313      	orrs	r3, r2
 804255a:	608b      	str	r3, [r1, #8]
 804255c:	e008      	b.n	8042570 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 804255e:	697b      	ldr	r3, [r7, #20]
 8042560:	2b80      	cmp	r3, #128	; 0x80
 8042562:	d105      	bne.n	8042570 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8042564:	4b26      	ldr	r3, [pc, #152]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 8042566:	689b      	ldr	r3, [r3, #8]
 8042568:	4a25      	ldr	r2, [pc, #148]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 804256a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804256e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8042570:	4b22      	ldr	r3, [pc, #136]	; (80425fc <HAL_RCC_ClockConfig+0x23c>)
 8042572:	681b      	ldr	r3, [r3, #0]
 8042574:	f003 030f 	and.w	r3, r3, #15
 8042578:	683a      	ldr	r2, [r7, #0]
 804257a:	429a      	cmp	r2, r3
 804257c:	d210      	bcs.n	80425a0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804257e:	4b1f      	ldr	r3, [pc, #124]	; (80425fc <HAL_RCC_ClockConfig+0x23c>)
 8042580:	681b      	ldr	r3, [r3, #0]
 8042582:	f023 020f 	bic.w	r2, r3, #15
 8042586:	491d      	ldr	r1, [pc, #116]	; (80425fc <HAL_RCC_ClockConfig+0x23c>)
 8042588:	683b      	ldr	r3, [r7, #0]
 804258a:	4313      	orrs	r3, r2
 804258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804258e:	4b1b      	ldr	r3, [pc, #108]	; (80425fc <HAL_RCC_ClockConfig+0x23c>)
 8042590:	681b      	ldr	r3, [r3, #0]
 8042592:	f003 030f 	and.w	r3, r3, #15
 8042596:	683a      	ldr	r2, [r7, #0]
 8042598:	429a      	cmp	r2, r3
 804259a:	d001      	beq.n	80425a0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 804259c:	2301      	movs	r3, #1
 804259e:	e029      	b.n	80425f4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80425a0:	687b      	ldr	r3, [r7, #4]
 80425a2:	681b      	ldr	r3, [r3, #0]
 80425a4:	f003 0304 	and.w	r3, r3, #4
 80425a8:	2b00      	cmp	r3, #0
 80425aa:	d008      	beq.n	80425be <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80425ac:	4b14      	ldr	r3, [pc, #80]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80425ae:	689b      	ldr	r3, [r3, #8]
 80425b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80425b4:	687b      	ldr	r3, [r7, #4]
 80425b6:	68db      	ldr	r3, [r3, #12]
 80425b8:	4911      	ldr	r1, [pc, #68]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80425ba:	4313      	orrs	r3, r2
 80425bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80425be:	687b      	ldr	r3, [r7, #4]
 80425c0:	681b      	ldr	r3, [r3, #0]
 80425c2:	f003 0308 	and.w	r3, r3, #8
 80425c6:	2b00      	cmp	r3, #0
 80425c8:	d009      	beq.n	80425de <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80425ca:	4b0d      	ldr	r3, [pc, #52]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80425cc:	689b      	ldr	r3, [r3, #8]
 80425ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80425d2:	687b      	ldr	r3, [r7, #4]
 80425d4:	691b      	ldr	r3, [r3, #16]
 80425d6:	00db      	lsls	r3, r3, #3
 80425d8:	4909      	ldr	r1, [pc, #36]	; (8042600 <HAL_RCC_ClockConfig+0x240>)
 80425da:	4313      	orrs	r3, r2
 80425dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80425de:	f000 f8b3 	bl	8042748 <HAL_RCC_GetHCLKFreq>
 80425e2:	4603      	mov	r3, r0
 80425e4:	4a08      	ldr	r2, [pc, #32]	; (8042608 <HAL_RCC_ClockConfig+0x248>)
 80425e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80425e8:	4b08      	ldr	r3, [pc, #32]	; (804260c <HAL_RCC_ClockConfig+0x24c>)
 80425ea:	681b      	ldr	r3, [r3, #0]
 80425ec:	4618      	mov	r0, r3
 80425ee:	f7fe fb8f 	bl	8040d10 <HAL_InitTick>
 80425f2:	4603      	mov	r3, r0
}
 80425f4:	4618      	mov	r0, r3
 80425f6:	3718      	adds	r7, #24
 80425f8:	46bd      	mov	sp, r7
 80425fa:	bd80      	pop	{r7, pc}
 80425fc:	40022000 	.word	0x40022000
 8042600:	40021000 	.word	0x40021000
 8042604:	04c4b400 	.word	0x04c4b400
 8042608:	20030000 	.word	0x20030000
 804260c:	20030004 	.word	0x20030004

08042610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042610:	b480      	push	{r7}
 8042612:	b089      	sub	sp, #36	; 0x24
 8042614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8042616:	2300      	movs	r3, #0
 8042618:	61fb      	str	r3, [r7, #28]
 804261a:	2300      	movs	r3, #0
 804261c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 804261e:	4b47      	ldr	r3, [pc, #284]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 8042620:	689b      	ldr	r3, [r3, #8]
 8042622:	f003 030c 	and.w	r3, r3, #12
 8042626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8042628:	4b44      	ldr	r3, [pc, #272]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 804262a:	68db      	ldr	r3, [r3, #12]
 804262c:	f003 0303 	and.w	r3, r3, #3
 8042630:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8042632:	693b      	ldr	r3, [r7, #16]
 8042634:	2b00      	cmp	r3, #0
 8042636:	d005      	beq.n	8042644 <HAL_RCC_GetSysClockFreq+0x34>
 8042638:	693b      	ldr	r3, [r7, #16]
 804263a:	2b0c      	cmp	r3, #12
 804263c:	d121      	bne.n	8042682 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804263e:	68fb      	ldr	r3, [r7, #12]
 8042640:	2b01      	cmp	r3, #1
 8042642:	d11e      	bne.n	8042682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8042644:	4b3d      	ldr	r3, [pc, #244]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 8042646:	681b      	ldr	r3, [r3, #0]
 8042648:	f003 0308 	and.w	r3, r3, #8
 804264c:	2b00      	cmp	r3, #0
 804264e:	d107      	bne.n	8042660 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8042650:	4b3a      	ldr	r3, [pc, #232]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 8042652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8042656:	0a1b      	lsrs	r3, r3, #8
 8042658:	f003 030f 	and.w	r3, r3, #15
 804265c:	61fb      	str	r3, [r7, #28]
 804265e:	e005      	b.n	804266c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8042660:	4b36      	ldr	r3, [pc, #216]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 8042662:	681b      	ldr	r3, [r3, #0]
 8042664:	091b      	lsrs	r3, r3, #4
 8042666:	f003 030f 	and.w	r3, r3, #15
 804266a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 804266c:	4a34      	ldr	r2, [pc, #208]	; (8042740 <HAL_RCC_GetSysClockFreq+0x130>)
 804266e:	69fb      	ldr	r3, [r7, #28]
 8042670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8042674:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8042676:	693b      	ldr	r3, [r7, #16]
 8042678:	2b00      	cmp	r3, #0
 804267a:	d10d      	bne.n	8042698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 804267c:	69fb      	ldr	r3, [r7, #28]
 804267e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8042680:	e00a      	b.n	8042698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8042682:	693b      	ldr	r3, [r7, #16]
 8042684:	2b04      	cmp	r3, #4
 8042686:	d102      	bne.n	804268e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8042688:	4b2e      	ldr	r3, [pc, #184]	; (8042744 <HAL_RCC_GetSysClockFreq+0x134>)
 804268a:	61bb      	str	r3, [r7, #24]
 804268c:	e004      	b.n	8042698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 804268e:	693b      	ldr	r3, [r7, #16]
 8042690:	2b08      	cmp	r3, #8
 8042692:	d101      	bne.n	8042698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8042694:	4b2b      	ldr	r3, [pc, #172]	; (8042744 <HAL_RCC_GetSysClockFreq+0x134>)
 8042696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8042698:	693b      	ldr	r3, [r7, #16]
 804269a:	2b0c      	cmp	r3, #12
 804269c:	d146      	bne.n	804272c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 804269e:	4b27      	ldr	r3, [pc, #156]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 80426a0:	68db      	ldr	r3, [r3, #12]
 80426a2:	f003 0303 	and.w	r3, r3, #3
 80426a6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80426a8:	4b24      	ldr	r3, [pc, #144]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 80426aa:	68db      	ldr	r3, [r3, #12]
 80426ac:	091b      	lsrs	r3, r3, #4
 80426ae:	f003 030f 	and.w	r3, r3, #15
 80426b2:	3301      	adds	r3, #1
 80426b4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80426b6:	68bb      	ldr	r3, [r7, #8]
 80426b8:	2b02      	cmp	r3, #2
 80426ba:	d003      	beq.n	80426c4 <HAL_RCC_GetSysClockFreq+0xb4>
 80426bc:	68bb      	ldr	r3, [r7, #8]
 80426be:	2b03      	cmp	r3, #3
 80426c0:	d00d      	beq.n	80426de <HAL_RCC_GetSysClockFreq+0xce>
 80426c2:	e019      	b.n	80426f8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80426c4:	4a1f      	ldr	r2, [pc, #124]	; (8042744 <HAL_RCC_GetSysClockFreq+0x134>)
 80426c6:	687b      	ldr	r3, [r7, #4]
 80426c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80426cc:	4a1b      	ldr	r2, [pc, #108]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 80426ce:	68d2      	ldr	r2, [r2, #12]
 80426d0:	0a12      	lsrs	r2, r2, #8
 80426d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80426d6:	fb02 f303 	mul.w	r3, r2, r3
 80426da:	617b      	str	r3, [r7, #20]
        break;
 80426dc:	e019      	b.n	8042712 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80426de:	4a19      	ldr	r2, [pc, #100]	; (8042744 <HAL_RCC_GetSysClockFreq+0x134>)
 80426e0:	687b      	ldr	r3, [r7, #4]
 80426e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80426e6:	4a15      	ldr	r2, [pc, #84]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 80426e8:	68d2      	ldr	r2, [r2, #12]
 80426ea:	0a12      	lsrs	r2, r2, #8
 80426ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80426f0:	fb02 f303 	mul.w	r3, r2, r3
 80426f4:	617b      	str	r3, [r7, #20]
        break;
 80426f6:	e00c      	b.n	8042712 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80426f8:	69fa      	ldr	r2, [r7, #28]
 80426fa:	687b      	ldr	r3, [r7, #4]
 80426fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8042700:	4a0e      	ldr	r2, [pc, #56]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 8042702:	68d2      	ldr	r2, [r2, #12]
 8042704:	0a12      	lsrs	r2, r2, #8
 8042706:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804270a:	fb02 f303 	mul.w	r3, r2, r3
 804270e:	617b      	str	r3, [r7, #20]
        break;
 8042710:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8042712:	4b0a      	ldr	r3, [pc, #40]	; (804273c <HAL_RCC_GetSysClockFreq+0x12c>)
 8042714:	68db      	ldr	r3, [r3, #12]
 8042716:	0e5b      	lsrs	r3, r3, #25
 8042718:	f003 0303 	and.w	r3, r3, #3
 804271c:	3301      	adds	r3, #1
 804271e:	005b      	lsls	r3, r3, #1
 8042720:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8042722:	697a      	ldr	r2, [r7, #20]
 8042724:	683b      	ldr	r3, [r7, #0]
 8042726:	fbb2 f3f3 	udiv	r3, r2, r3
 804272a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804272c:	69bb      	ldr	r3, [r7, #24]
}
 804272e:	4618      	mov	r0, r3
 8042730:	3724      	adds	r7, #36	; 0x24
 8042732:	46bd      	mov	sp, r7
 8042734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042738:	4770      	bx	lr
 804273a:	bf00      	nop
 804273c:	40021000 	.word	0x40021000
 8042740:	0804564c 	.word	0x0804564c
 8042744:	00f42400 	.word	0x00f42400

08042748 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042748:	b580      	push	{r7, lr}
 804274a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 804274c:	f7ff ff60 	bl	8042610 <HAL_RCC_GetSysClockFreq>
 8042750:	4602      	mov	r2, r0
 8042752:	4b05      	ldr	r3, [pc, #20]	; (8042768 <HAL_RCC_GetHCLKFreq+0x20>)
 8042754:	689b      	ldr	r3, [r3, #8]
 8042756:	091b      	lsrs	r3, r3, #4
 8042758:	f003 030f 	and.w	r3, r3, #15
 804275c:	4903      	ldr	r1, [pc, #12]	; (804276c <HAL_RCC_GetHCLKFreq+0x24>)
 804275e:	5ccb      	ldrb	r3, [r1, r3]
 8042760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042764:	4618      	mov	r0, r3
 8042766:	bd80      	pop	{r7, pc}
 8042768:	40021000 	.word	0x40021000
 804276c:	08045634 	.word	0x08045634

08042770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8042770:	b580      	push	{r7, lr}
 8042772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8042774:	f7ff ffe8 	bl	8042748 <HAL_RCC_GetHCLKFreq>
 8042778:	4602      	mov	r2, r0
 804277a:	4b05      	ldr	r3, [pc, #20]	; (8042790 <HAL_RCC_GetPCLK1Freq+0x20>)
 804277c:	689b      	ldr	r3, [r3, #8]
 804277e:	0a1b      	lsrs	r3, r3, #8
 8042780:	f003 0307 	and.w	r3, r3, #7
 8042784:	4903      	ldr	r1, [pc, #12]	; (8042794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8042786:	5ccb      	ldrb	r3, [r1, r3]
 8042788:	fa22 f303 	lsr.w	r3, r2, r3
}
 804278c:	4618      	mov	r0, r3
 804278e:	bd80      	pop	{r7, pc}
 8042790:	40021000 	.word	0x40021000
 8042794:	08045644 	.word	0x08045644

08042798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8042798:	b580      	push	{r7, lr}
 804279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 804279c:	f7ff ffd4 	bl	8042748 <HAL_RCC_GetHCLKFreq>
 80427a0:	4602      	mov	r2, r0
 80427a2:	4b05      	ldr	r3, [pc, #20]	; (80427b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80427a4:	689b      	ldr	r3, [r3, #8]
 80427a6:	0adb      	lsrs	r3, r3, #11
 80427a8:	f003 0307 	and.w	r3, r3, #7
 80427ac:	4903      	ldr	r1, [pc, #12]	; (80427bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80427ae:	5ccb      	ldrb	r3, [r1, r3]
 80427b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80427b4:	4618      	mov	r0, r3
 80427b6:	bd80      	pop	{r7, pc}
 80427b8:	40021000 	.word	0x40021000
 80427bc:	08045644 	.word	0x08045644

080427c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80427c0:	b580      	push	{r7, lr}
 80427c2:	b086      	sub	sp, #24
 80427c4:	af00      	add	r7, sp, #0
 80427c6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80427c8:	2300      	movs	r3, #0
 80427ca:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80427cc:	4b2c      	ldr	r3, [pc, #176]	; (8042880 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80427ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80427d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80427d4:	2b00      	cmp	r3, #0
 80427d6:	d003      	beq.n	80427e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80427d8:	f7ff f872 	bl	80418c0 <HAL_PWREx_GetVoltageRange>
 80427dc:	6138      	str	r0, [r7, #16]
 80427de:	e014      	b.n	804280a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80427e0:	4b27      	ldr	r3, [pc, #156]	; (8042880 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80427e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80427e4:	4a26      	ldr	r2, [pc, #152]	; (8042880 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80427e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80427ea:	6593      	str	r3, [r2, #88]	; 0x58
 80427ec:	4b24      	ldr	r3, [pc, #144]	; (8042880 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80427ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80427f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80427f4:	60fb      	str	r3, [r7, #12]
 80427f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80427f8:	f7ff f862 	bl	80418c0 <HAL_PWREx_GetVoltageRange>
 80427fc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80427fe:	4b20      	ldr	r3, [pc, #128]	; (8042880 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8042800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042802:	4a1f      	ldr	r2, [pc, #124]	; (8042880 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8042804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042808:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 804280a:	693b      	ldr	r3, [r7, #16]
 804280c:	2b00      	cmp	r3, #0
 804280e:	d003      	beq.n	8042818 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8042810:	693b      	ldr	r3, [r7, #16]
 8042812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042816:	d10b      	bne.n	8042830 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8042818:	687b      	ldr	r3, [r7, #4]
 804281a:	2b80      	cmp	r3, #128	; 0x80
 804281c:	d919      	bls.n	8042852 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 804281e:	687b      	ldr	r3, [r7, #4]
 8042820:	2ba0      	cmp	r3, #160	; 0xa0
 8042822:	d902      	bls.n	804282a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8042824:	2302      	movs	r3, #2
 8042826:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8042828:	e013      	b.n	8042852 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 804282a:	2301      	movs	r3, #1
 804282c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 804282e:	e010      	b.n	8042852 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8042830:	687b      	ldr	r3, [r7, #4]
 8042832:	2b80      	cmp	r3, #128	; 0x80
 8042834:	d902      	bls.n	804283c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8042836:	2303      	movs	r3, #3
 8042838:	617b      	str	r3, [r7, #20]
 804283a:	e00a      	b.n	8042852 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 804283c:	687b      	ldr	r3, [r7, #4]
 804283e:	2b80      	cmp	r3, #128	; 0x80
 8042840:	d102      	bne.n	8042848 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8042842:	2302      	movs	r3, #2
 8042844:	617b      	str	r3, [r7, #20]
 8042846:	e004      	b.n	8042852 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8042848:	687b      	ldr	r3, [r7, #4]
 804284a:	2b70      	cmp	r3, #112	; 0x70
 804284c:	d101      	bne.n	8042852 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 804284e:	2301      	movs	r3, #1
 8042850:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8042852:	4b0c      	ldr	r3, [pc, #48]	; (8042884 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8042854:	681b      	ldr	r3, [r3, #0]
 8042856:	f023 020f 	bic.w	r2, r3, #15
 804285a:	490a      	ldr	r1, [pc, #40]	; (8042884 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 804285c:	697b      	ldr	r3, [r7, #20]
 804285e:	4313      	orrs	r3, r2
 8042860:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8042862:	4b08      	ldr	r3, [pc, #32]	; (8042884 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8042864:	681b      	ldr	r3, [r3, #0]
 8042866:	f003 030f 	and.w	r3, r3, #15
 804286a:	697a      	ldr	r2, [r7, #20]
 804286c:	429a      	cmp	r2, r3
 804286e:	d001      	beq.n	8042874 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8042870:	2301      	movs	r3, #1
 8042872:	e000      	b.n	8042876 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8042874:	2300      	movs	r3, #0
}
 8042876:	4618      	mov	r0, r3
 8042878:	3718      	adds	r7, #24
 804287a:	46bd      	mov	sp, r7
 804287c:	bd80      	pop	{r7, pc}
 804287e:	bf00      	nop
 8042880:	40021000 	.word	0x40021000
 8042884:	40022000 	.word	0x40022000

08042888 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8042888:	b480      	push	{r7}
 804288a:	b087      	sub	sp, #28
 804288c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 804288e:	2300      	movs	r3, #0
 8042890:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8042892:	4b36      	ldr	r3, [pc, #216]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8042894:	68db      	ldr	r3, [r3, #12]
 8042896:	f003 0303 	and.w	r3, r3, #3
 804289a:	2b01      	cmp	r3, #1
 804289c:	d118      	bne.n	80428d0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 804289e:	4b33      	ldr	r3, [pc, #204]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80428a0:	681b      	ldr	r3, [r3, #0]
 80428a2:	f003 0308 	and.w	r3, r3, #8
 80428a6:	2b00      	cmp	r3, #0
 80428a8:	d107      	bne.n	80428ba <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80428aa:	4b30      	ldr	r3, [pc, #192]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80428ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80428b0:	0a1b      	lsrs	r3, r3, #8
 80428b2:	f003 030f 	and.w	r3, r3, #15
 80428b6:	617b      	str	r3, [r7, #20]
 80428b8:	e005      	b.n	80428c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80428ba:	4b2c      	ldr	r3, [pc, #176]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80428bc:	681b      	ldr	r3, [r3, #0]
 80428be:	091b      	lsrs	r3, r3, #4
 80428c0:	f003 030f 	and.w	r3, r3, #15
 80428c4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80428c6:	4a2a      	ldr	r2, [pc, #168]	; (8042970 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 80428c8:	697b      	ldr	r3, [r7, #20]
 80428ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80428ce:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80428d0:	4b26      	ldr	r3, [pc, #152]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80428d2:	68db      	ldr	r3, [r3, #12]
 80428d4:	f003 0303 	and.w	r3, r3, #3
 80428d8:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80428da:	4b24      	ldr	r3, [pc, #144]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80428dc:	68db      	ldr	r3, [r3, #12]
 80428de:	091b      	lsrs	r3, r3, #4
 80428e0:	f003 030f 	and.w	r3, r3, #15
 80428e4:	3301      	adds	r3, #1
 80428e6:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80428e8:	68fb      	ldr	r3, [r7, #12]
 80428ea:	2b02      	cmp	r3, #2
 80428ec:	d003      	beq.n	80428f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 80428ee:	68fb      	ldr	r3, [r7, #12]
 80428f0:	2b03      	cmp	r3, #3
 80428f2:	d00d      	beq.n	8042910 <RCC_GetSysClockFreqFromPLLSource+0x88>
 80428f4:	e019      	b.n	804292a <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80428f6:	4a1f      	ldr	r2, [pc, #124]	; (8042974 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 80428f8:	68bb      	ldr	r3, [r7, #8]
 80428fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80428fe:	4a1b      	ldr	r2, [pc, #108]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8042900:	68d2      	ldr	r2, [r2, #12]
 8042902:	0a12      	lsrs	r2, r2, #8
 8042904:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042908:	fb02 f303 	mul.w	r3, r2, r3
 804290c:	613b      	str	r3, [r7, #16]
      break;
 804290e:	e019      	b.n	8042944 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8042910:	4a18      	ldr	r2, [pc, #96]	; (8042974 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8042912:	68bb      	ldr	r3, [r7, #8]
 8042914:	fbb2 f3f3 	udiv	r3, r2, r3
 8042918:	4a14      	ldr	r2, [pc, #80]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 804291a:	68d2      	ldr	r2, [r2, #12]
 804291c:	0a12      	lsrs	r2, r2, #8
 804291e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042922:	fb02 f303 	mul.w	r3, r2, r3
 8042926:	613b      	str	r3, [r7, #16]
      break;
 8042928:	e00c      	b.n	8042944 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804292a:	697a      	ldr	r2, [r7, #20]
 804292c:	68bb      	ldr	r3, [r7, #8]
 804292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8042932:	4a0e      	ldr	r2, [pc, #56]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8042934:	68d2      	ldr	r2, [r2, #12]
 8042936:	0a12      	lsrs	r2, r2, #8
 8042938:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804293c:	fb02 f303 	mul.w	r3, r2, r3
 8042940:	613b      	str	r3, [r7, #16]
      break;
 8042942:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8042944:	4b09      	ldr	r3, [pc, #36]	; (804296c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8042946:	68db      	ldr	r3, [r3, #12]
 8042948:	0e5b      	lsrs	r3, r3, #25
 804294a:	f003 0303 	and.w	r3, r3, #3
 804294e:	3301      	adds	r3, #1
 8042950:	005b      	lsls	r3, r3, #1
 8042952:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8042954:	693a      	ldr	r2, [r7, #16]
 8042956:	687b      	ldr	r3, [r7, #4]
 8042958:	fbb2 f3f3 	udiv	r3, r2, r3
 804295c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 804295e:	683b      	ldr	r3, [r7, #0]
}
 8042960:	4618      	mov	r0, r3
 8042962:	371c      	adds	r7, #28
 8042964:	46bd      	mov	sp, r7
 8042966:	f85d 7b04 	ldr.w	r7, [sp], #4
 804296a:	4770      	bx	lr
 804296c:	40021000 	.word	0x40021000
 8042970:	0804564c 	.word	0x0804564c
 8042974:	00f42400 	.word	0x00f42400

08042978 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042978:	b580      	push	{r7, lr}
 804297a:	b088      	sub	sp, #32
 804297c:	af00      	add	r7, sp, #0
 804297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8042980:	2300      	movs	r3, #0
 8042982:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8042984:	2300      	movs	r3, #0
 8042986:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8042988:	687b      	ldr	r3, [r7, #4]
 804298a:	681b      	ldr	r3, [r3, #0]
 804298c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042990:	2b00      	cmp	r3, #0
 8042992:	d040      	beq.n	8042a16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8042994:	687b      	ldr	r3, [r7, #4]
 8042996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042998:	2b80      	cmp	r3, #128	; 0x80
 804299a:	d02a      	beq.n	80429f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 804299c:	2b80      	cmp	r3, #128	; 0x80
 804299e:	d825      	bhi.n	80429ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80429a0:	2b60      	cmp	r3, #96	; 0x60
 80429a2:	d026      	beq.n	80429f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80429a4:	2b60      	cmp	r3, #96	; 0x60
 80429a6:	d821      	bhi.n	80429ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80429a8:	2b40      	cmp	r3, #64	; 0x40
 80429aa:	d006      	beq.n	80429ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80429ac:	2b40      	cmp	r3, #64	; 0x40
 80429ae:	d81d      	bhi.n	80429ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80429b0:	2b00      	cmp	r3, #0
 80429b2:	d009      	beq.n	80429c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80429b4:	2b20      	cmp	r3, #32
 80429b6:	d010      	beq.n	80429da <HAL_RCCEx_PeriphCLKConfig+0x62>
 80429b8:	e018      	b.n	80429ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80429ba:	4b8f      	ldr	r3, [pc, #572]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80429bc:	68db      	ldr	r3, [r3, #12]
 80429be:	4a8e      	ldr	r2, [pc, #568]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80429c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80429c4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80429c6:	e015      	b.n	80429f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80429c8:	687b      	ldr	r3, [r7, #4]
 80429ca:	3304      	adds	r3, #4
 80429cc:	2100      	movs	r1, #0
 80429ce:	4618      	mov	r0, r3
 80429d0:	f000 fb56 	bl	8043080 <RCCEx_PLLSAI1_Config>
 80429d4:	4603      	mov	r3, r0
 80429d6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80429d8:	e00c      	b.n	80429f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80429da:	687b      	ldr	r3, [r7, #4]
 80429dc:	3320      	adds	r3, #32
 80429de:	2100      	movs	r1, #0
 80429e0:	4618      	mov	r0, r3
 80429e2:	f000 fc33 	bl	804324c <RCCEx_PLLSAI2_Config>
 80429e6:	4603      	mov	r3, r0
 80429e8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80429ea:	e003      	b.n	80429f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80429ec:	2301      	movs	r3, #1
 80429ee:	77fb      	strb	r3, [r7, #31]
        break;
 80429f0:	e000      	b.n	80429f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80429f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80429f4:	7ffb      	ldrb	r3, [r7, #31]
 80429f6:	2b00      	cmp	r3, #0
 80429f8:	d10b      	bne.n	8042a12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80429fa:	4b7f      	ldr	r3, [pc, #508]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80429fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042a00:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8042a04:	687b      	ldr	r3, [r7, #4]
 8042a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042a08:	497b      	ldr	r1, [pc, #492]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042a0a:	4313      	orrs	r3, r2
 8042a0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8042a10:	e001      	b.n	8042a16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042a12:	7ffb      	ldrb	r3, [r7, #31]
 8042a14:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8042a16:	687b      	ldr	r3, [r7, #4]
 8042a18:	681b      	ldr	r3, [r3, #0]
 8042a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8042a1e:	2b00      	cmp	r3, #0
 8042a20:	d047      	beq.n	8042ab2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8042a22:	687b      	ldr	r3, [r7, #4]
 8042a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042a2a:	d030      	beq.n	8042a8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8042a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042a30:	d82a      	bhi.n	8042a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8042a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042a36:	d02a      	beq.n	8042a8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8042a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042a3c:	d824      	bhi.n	8042a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8042a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042a42:	d008      	beq.n	8042a56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8042a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042a48:	d81e      	bhi.n	8042a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8042a4a:	2b00      	cmp	r3, #0
 8042a4c:	d00a      	beq.n	8042a64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8042a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042a52:	d010      	beq.n	8042a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8042a54:	e018      	b.n	8042a88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8042a56:	4b68      	ldr	r3, [pc, #416]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042a58:	68db      	ldr	r3, [r3, #12]
 8042a5a:	4a67      	ldr	r2, [pc, #412]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042a60:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8042a62:	e015      	b.n	8042a90 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8042a64:	687b      	ldr	r3, [r7, #4]
 8042a66:	3304      	adds	r3, #4
 8042a68:	2100      	movs	r1, #0
 8042a6a:	4618      	mov	r0, r3
 8042a6c:	f000 fb08 	bl	8043080 <RCCEx_PLLSAI1_Config>
 8042a70:	4603      	mov	r3, r0
 8042a72:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8042a74:	e00c      	b.n	8042a90 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8042a76:	687b      	ldr	r3, [r7, #4]
 8042a78:	3320      	adds	r3, #32
 8042a7a:	2100      	movs	r1, #0
 8042a7c:	4618      	mov	r0, r3
 8042a7e:	f000 fbe5 	bl	804324c <RCCEx_PLLSAI2_Config>
 8042a82:	4603      	mov	r3, r0
 8042a84:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8042a86:	e003      	b.n	8042a90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042a88:	2301      	movs	r3, #1
 8042a8a:	77fb      	strb	r3, [r7, #31]
        break;
 8042a8c:	e000      	b.n	8042a90 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8042a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042a90:	7ffb      	ldrb	r3, [r7, #31]
 8042a92:	2b00      	cmp	r3, #0
 8042a94:	d10b      	bne.n	8042aae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8042a96:	4b58      	ldr	r3, [pc, #352]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8042aa0:	687b      	ldr	r3, [r7, #4]
 8042aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042aa4:	4954      	ldr	r1, [pc, #336]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042aa6:	4313      	orrs	r3, r2
 8042aa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8042aac:	e001      	b.n	8042ab2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042aae:	7ffb      	ldrb	r3, [r7, #31]
 8042ab0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8042ab2:	687b      	ldr	r3, [r7, #4]
 8042ab4:	681b      	ldr	r3, [r3, #0]
 8042ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042aba:	2b00      	cmp	r3, #0
 8042abc:	f000 80ab 	beq.w	8042c16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8042ac0:	2300      	movs	r3, #0
 8042ac2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8042ac4:	4b4c      	ldr	r3, [pc, #304]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042acc:	2b00      	cmp	r3, #0
 8042ace:	d10d      	bne.n	8042aec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8042ad0:	4b49      	ldr	r3, [pc, #292]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042ad4:	4a48      	ldr	r2, [pc, #288]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042ada:	6593      	str	r3, [r2, #88]	; 0x58
 8042adc:	4b46      	ldr	r3, [pc, #280]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042ae4:	60fb      	str	r3, [r7, #12]
 8042ae6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8042ae8:	2301      	movs	r3, #1
 8042aea:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8042aec:	4b43      	ldr	r3, [pc, #268]	; (8042bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8042aee:	681b      	ldr	r3, [r3, #0]
 8042af0:	4a42      	ldr	r2, [pc, #264]	; (8042bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8042af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8042af8:	f7fe f95a 	bl	8040db0 <HAL_GetTick>
 8042afc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042afe:	e00f      	b.n	8042b20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042b00:	f7fe f956 	bl	8040db0 <HAL_GetTick>
 8042b04:	4602      	mov	r2, r0
 8042b06:	693b      	ldr	r3, [r7, #16]
 8042b08:	1ad3      	subs	r3, r2, r3
 8042b0a:	2b02      	cmp	r3, #2
 8042b0c:	d908      	bls.n	8042b20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042b0e:	4b3b      	ldr	r3, [pc, #236]	; (8042bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8042b10:	681b      	ldr	r3, [r3, #0]
 8042b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042b16:	2b00      	cmp	r3, #0
 8042b18:	d109      	bne.n	8042b2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8042b1a:	2303      	movs	r3, #3
 8042b1c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8042b1e:	e006      	b.n	8042b2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042b20:	4b36      	ldr	r3, [pc, #216]	; (8042bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8042b22:	681b      	ldr	r3, [r3, #0]
 8042b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042b28:	2b00      	cmp	r3, #0
 8042b2a:	d0e9      	beq.n	8042b00 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8042b2c:	e000      	b.n	8042b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8042b2e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8042b30:	7ffb      	ldrb	r3, [r7, #31]
 8042b32:	2b00      	cmp	r3, #0
 8042b34:	d164      	bne.n	8042c00 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8042b36:	4b30      	ldr	r3, [pc, #192]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042b40:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8042b42:	69bb      	ldr	r3, [r7, #24]
 8042b44:	2b00      	cmp	r3, #0
 8042b46:	d01f      	beq.n	8042b88 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8042b48:	687b      	ldr	r3, [r7, #4]
 8042b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b4e:	69ba      	ldr	r2, [r7, #24]
 8042b50:	429a      	cmp	r2, r3
 8042b52:	d019      	beq.n	8042b88 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8042b54:	4b28      	ldr	r3, [pc, #160]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042b5e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8042b60:	4b25      	ldr	r3, [pc, #148]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b66:	4a24      	ldr	r2, [pc, #144]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8042b70:	4b21      	ldr	r3, [pc, #132]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b76:	4a20      	ldr	r2, [pc, #128]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8042b80:	4a1d      	ldr	r2, [pc, #116]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042b82:	69bb      	ldr	r3, [r7, #24]
 8042b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8042b88:	69bb      	ldr	r3, [r7, #24]
 8042b8a:	f003 0301 	and.w	r3, r3, #1
 8042b8e:	2b00      	cmp	r3, #0
 8042b90:	d01f      	beq.n	8042bd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042b92:	f7fe f90d 	bl	8040db0 <HAL_GetTick>
 8042b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042b98:	e012      	b.n	8042bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042b9a:	f7fe f909 	bl	8040db0 <HAL_GetTick>
 8042b9e:	4602      	mov	r2, r0
 8042ba0:	693b      	ldr	r3, [r7, #16]
 8042ba2:	1ad3      	subs	r3, r2, r3
 8042ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8042ba8:	4293      	cmp	r3, r2
 8042baa:	d909      	bls.n	8042bc0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042bac:	4b12      	ldr	r3, [pc, #72]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042bb2:	f003 0302 	and.w	r3, r3, #2
 8042bb6:	2b00      	cmp	r3, #0
 8042bb8:	d10a      	bne.n	8042bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8042bba:	2303      	movs	r3, #3
 8042bbc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8042bbe:	e007      	b.n	8042bd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042bc0:	4b0d      	ldr	r3, [pc, #52]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042bc6:	f003 0302 	and.w	r3, r3, #2
 8042bca:	2b00      	cmp	r3, #0
 8042bcc:	d0e5      	beq.n	8042b9a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8042bce:	e000      	b.n	8042bd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8042bd0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8042bd2:	7ffb      	ldrb	r3, [r7, #31]
 8042bd4:	2b00      	cmp	r3, #0
 8042bd6:	d10c      	bne.n	8042bf2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042bd8:	4b07      	ldr	r3, [pc, #28]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8042be2:	687b      	ldr	r3, [r7, #4]
 8042be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042be8:	4903      	ldr	r1, [pc, #12]	; (8042bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042bea:	4313      	orrs	r3, r2
 8042bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8042bf0:	e008      	b.n	8042c04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8042bf2:	7ffb      	ldrb	r3, [r7, #31]
 8042bf4:	77bb      	strb	r3, [r7, #30]
 8042bf6:	e005      	b.n	8042c04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8042bf8:	40021000 	.word	0x40021000
 8042bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042c00:	7ffb      	ldrb	r3, [r7, #31]
 8042c02:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8042c04:	7dfb      	ldrb	r3, [r7, #23]
 8042c06:	2b01      	cmp	r3, #1
 8042c08:	d105      	bne.n	8042c16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8042c0a:	4baf      	ldr	r3, [pc, #700]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042c0e:	4aae      	ldr	r2, [pc, #696]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042c14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8042c16:	687b      	ldr	r3, [r7, #4]
 8042c18:	681b      	ldr	r3, [r3, #0]
 8042c1a:	f003 0301 	and.w	r3, r3, #1
 8042c1e:	2b00      	cmp	r3, #0
 8042c20:	d00a      	beq.n	8042c38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8042c22:	4ba9      	ldr	r3, [pc, #676]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042c28:	f023 0203 	bic.w	r2, r3, #3
 8042c2c:	687b      	ldr	r3, [r7, #4]
 8042c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042c30:	49a5      	ldr	r1, [pc, #660]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c32:	4313      	orrs	r3, r2
 8042c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8042c38:	687b      	ldr	r3, [r7, #4]
 8042c3a:	681b      	ldr	r3, [r3, #0]
 8042c3c:	f003 0302 	and.w	r3, r3, #2
 8042c40:	2b00      	cmp	r3, #0
 8042c42:	d00a      	beq.n	8042c5a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8042c44:	4ba0      	ldr	r3, [pc, #640]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042c4a:	f023 020c 	bic.w	r2, r3, #12
 8042c4e:	687b      	ldr	r3, [r7, #4]
 8042c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042c52:	499d      	ldr	r1, [pc, #628]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c54:	4313      	orrs	r3, r2
 8042c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8042c5a:	687b      	ldr	r3, [r7, #4]
 8042c5c:	681b      	ldr	r3, [r3, #0]
 8042c5e:	f003 0304 	and.w	r3, r3, #4
 8042c62:	2b00      	cmp	r3, #0
 8042c64:	d00a      	beq.n	8042c7c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8042c66:	4b98      	ldr	r3, [pc, #608]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042c6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8042c70:	687b      	ldr	r3, [r7, #4]
 8042c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042c74:	4994      	ldr	r1, [pc, #592]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c76:	4313      	orrs	r3, r2
 8042c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8042c7c:	687b      	ldr	r3, [r7, #4]
 8042c7e:	681b      	ldr	r3, [r3, #0]
 8042c80:	f003 0308 	and.w	r3, r3, #8
 8042c84:	2b00      	cmp	r3, #0
 8042c86:	d00a      	beq.n	8042c9e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8042c88:	4b8f      	ldr	r3, [pc, #572]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8042c92:	687b      	ldr	r3, [r7, #4]
 8042c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042c96:	498c      	ldr	r1, [pc, #560]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042c98:	4313      	orrs	r3, r2
 8042c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8042c9e:	687b      	ldr	r3, [r7, #4]
 8042ca0:	681b      	ldr	r3, [r3, #0]
 8042ca2:	f003 0310 	and.w	r3, r3, #16
 8042ca6:	2b00      	cmp	r3, #0
 8042ca8:	d00a      	beq.n	8042cc0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8042caa:	4b87      	ldr	r3, [pc, #540]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8042cb4:	687b      	ldr	r3, [r7, #4]
 8042cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042cb8:	4983      	ldr	r1, [pc, #524]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042cba:	4313      	orrs	r3, r2
 8042cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8042cc0:	687b      	ldr	r3, [r7, #4]
 8042cc2:	681b      	ldr	r3, [r3, #0]
 8042cc4:	f003 0320 	and.w	r3, r3, #32
 8042cc8:	2b00      	cmp	r3, #0
 8042cca:	d00a      	beq.n	8042ce2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8042ccc:	4b7e      	ldr	r3, [pc, #504]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042cd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8042cd6:	687b      	ldr	r3, [r7, #4]
 8042cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042cda:	497b      	ldr	r1, [pc, #492]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042cdc:	4313      	orrs	r3, r2
 8042cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8042ce2:	687b      	ldr	r3, [r7, #4]
 8042ce4:	681b      	ldr	r3, [r3, #0]
 8042ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042cea:	2b00      	cmp	r3, #0
 8042cec:	d00a      	beq.n	8042d04 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8042cee:	4b76      	ldr	r3, [pc, #472]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042cf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8042cf8:	687b      	ldr	r3, [r7, #4]
 8042cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042cfc:	4972      	ldr	r1, [pc, #456]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042cfe:	4313      	orrs	r3, r2
 8042d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8042d04:	687b      	ldr	r3, [r7, #4]
 8042d06:	681b      	ldr	r3, [r3, #0]
 8042d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042d0c:	2b00      	cmp	r3, #0
 8042d0e:	d00a      	beq.n	8042d26 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8042d10:	4b6d      	ldr	r3, [pc, #436]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042d1a:	687b      	ldr	r3, [r7, #4]
 8042d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042d1e:	496a      	ldr	r1, [pc, #424]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042d20:	4313      	orrs	r3, r2
 8042d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8042d26:	687b      	ldr	r3, [r7, #4]
 8042d28:	681b      	ldr	r3, [r3, #0]
 8042d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042d2e:	2b00      	cmp	r3, #0
 8042d30:	d00a      	beq.n	8042d48 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8042d32:	4b65      	ldr	r3, [pc, #404]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042d38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8042d3c:	687b      	ldr	r3, [r7, #4]
 8042d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042d40:	4961      	ldr	r1, [pc, #388]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042d42:	4313      	orrs	r3, r2
 8042d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8042d48:	687b      	ldr	r3, [r7, #4]
 8042d4a:	681b      	ldr	r3, [r3, #0]
 8042d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042d50:	2b00      	cmp	r3, #0
 8042d52:	d031      	beq.n	8042db8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8042d54:	687b      	ldr	r3, [r7, #4]
 8042d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8042d5c:	d00e      	beq.n	8042d7c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8042d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8042d62:	d814      	bhi.n	8042d8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8042d64:	2b00      	cmp	r3, #0
 8042d66:	d015      	beq.n	8042d94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8042d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8042d6c:	d10f      	bne.n	8042d8e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042d6e:	4b56      	ldr	r3, [pc, #344]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042d70:	68db      	ldr	r3, [r3, #12]
 8042d72:	4a55      	ldr	r2, [pc, #340]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042d78:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8042d7a:	e00c      	b.n	8042d96 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8042d7c:	687b      	ldr	r3, [r7, #4]
 8042d7e:	3304      	adds	r3, #4
 8042d80:	2100      	movs	r1, #0
 8042d82:	4618      	mov	r0, r3
 8042d84:	f000 f97c 	bl	8043080 <RCCEx_PLLSAI1_Config>
 8042d88:	4603      	mov	r3, r0
 8042d8a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8042d8c:	e003      	b.n	8042d96 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8042d8e:	2301      	movs	r3, #1
 8042d90:	77fb      	strb	r3, [r7, #31]
        break;
 8042d92:	e000      	b.n	8042d96 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8042d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042d96:	7ffb      	ldrb	r3, [r7, #31]
 8042d98:	2b00      	cmp	r3, #0
 8042d9a:	d10b      	bne.n	8042db4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042d9c:	4b4a      	ldr	r3, [pc, #296]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042da2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8042da6:	687b      	ldr	r3, [r7, #4]
 8042da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042daa:	4947      	ldr	r1, [pc, #284]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042dac:	4313      	orrs	r3, r2
 8042dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8042db2:	e001      	b.n	8042db8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042db4:	7ffb      	ldrb	r3, [r7, #31]
 8042db6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8042db8:	687b      	ldr	r3, [r7, #4]
 8042dba:	681b      	ldr	r3, [r3, #0]
 8042dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042dc0:	2b00      	cmp	r3, #0
 8042dc2:	d00a      	beq.n	8042dda <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8042dc4:	4b40      	ldr	r3, [pc, #256]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042dca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8042dce:	687b      	ldr	r3, [r7, #4]
 8042dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042dd2:	493d      	ldr	r1, [pc, #244]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042dd4:	4313      	orrs	r3, r2
 8042dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8042dda:	687b      	ldr	r3, [r7, #4]
 8042ddc:	681b      	ldr	r3, [r3, #0]
 8042dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042de2:	2b00      	cmp	r3, #0
 8042de4:	d00a      	beq.n	8042dfc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8042de6:	4b38      	ldr	r3, [pc, #224]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042dec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8042df0:	687b      	ldr	r3, [r7, #4]
 8042df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042df4:	4934      	ldr	r1, [pc, #208]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042df6:	4313      	orrs	r3, r2
 8042df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8042dfc:	687b      	ldr	r3, [r7, #4]
 8042dfe:	681b      	ldr	r3, [r3, #0]
 8042e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042e04:	2b00      	cmp	r3, #0
 8042e06:	d00a      	beq.n	8042e1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8042e08:	4b2f      	ldr	r3, [pc, #188]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8042e12:	687b      	ldr	r3, [r7, #4]
 8042e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8042e16:	492c      	ldr	r1, [pc, #176]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042e18:	4313      	orrs	r3, r2
 8042e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8042e1e:	687b      	ldr	r3, [r7, #4]
 8042e20:	681b      	ldr	r3, [r3, #0]
 8042e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042e26:	2b00      	cmp	r3, #0
 8042e28:	d00a      	beq.n	8042e40 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8042e2a:	4b27      	ldr	r3, [pc, #156]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042e30:	f023 0203 	bic.w	r2, r3, #3
 8042e34:	687b      	ldr	r3, [r7, #4]
 8042e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042e38:	4923      	ldr	r1, [pc, #140]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042e3a:	4313      	orrs	r3, r2
 8042e3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8042e40:	687b      	ldr	r3, [r7, #4]
 8042e42:	681b      	ldr	r3, [r3, #0]
 8042e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8042e48:	2b00      	cmp	r3, #0
 8042e4a:	d028      	beq.n	8042e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8042e4c:	4b1e      	ldr	r3, [pc, #120]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8042e56:	687b      	ldr	r3, [r7, #4]
 8042e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042e5a:	491b      	ldr	r1, [pc, #108]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042e5c:	4313      	orrs	r3, r2
 8042e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8042e62:	687b      	ldr	r3, [r7, #4]
 8042e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042e6a:	d106      	bne.n	8042e7a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042e6c:	4b16      	ldr	r3, [pc, #88]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042e6e:	68db      	ldr	r3, [r3, #12]
 8042e70:	4a15      	ldr	r2, [pc, #84]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042e76:	60d3      	str	r3, [r2, #12]
 8042e78:	e011      	b.n	8042e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8042e7a:	687b      	ldr	r3, [r7, #4]
 8042e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042e82:	d10c      	bne.n	8042e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8042e84:	687b      	ldr	r3, [r7, #4]
 8042e86:	3304      	adds	r3, #4
 8042e88:	2101      	movs	r1, #1
 8042e8a:	4618      	mov	r0, r3
 8042e8c:	f000 f8f8 	bl	8043080 <RCCEx_PLLSAI1_Config>
 8042e90:	4603      	mov	r3, r0
 8042e92:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8042e94:	7ffb      	ldrb	r3, [r7, #31]
 8042e96:	2b00      	cmp	r3, #0
 8042e98:	d001      	beq.n	8042e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 8042e9a:	7ffb      	ldrb	r3, [r7, #31]
 8042e9c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8042e9e:	687b      	ldr	r3, [r7, #4]
 8042ea0:	681b      	ldr	r3, [r3, #0]
 8042ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042ea6:	2b00      	cmp	r3, #0
 8042ea8:	d04d      	beq.n	8042f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8042eaa:	687b      	ldr	r3, [r7, #4]
 8042eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042eb2:	d10b      	bne.n	8042ecc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8042eb4:	4b04      	ldr	r3, [pc, #16]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042eba:	4a03      	ldr	r2, [pc, #12]	; (8042ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8042ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8042ec0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8042ec4:	e015      	b.n	8042ef2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8042ec6:	bf00      	nop
 8042ec8:	40021000 	.word	0x40021000
 8042ecc:	4b6b      	ldr	r3, [pc, #428]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8042ed6:	687b      	ldr	r3, [r7, #4]
 8042ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042eda:	4968      	ldr	r1, [pc, #416]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042edc:	4313      	orrs	r3, r2
 8042ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8042ee2:	4b66      	ldr	r3, [pc, #408]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042ee8:	4a64      	ldr	r2, [pc, #400]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8042eee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8042ef2:	687b      	ldr	r3, [r7, #4]
 8042ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042ef6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042efa:	d10d      	bne.n	8042f18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8042efc:	687b      	ldr	r3, [r7, #4]
 8042efe:	3304      	adds	r3, #4
 8042f00:	2101      	movs	r1, #1
 8042f02:	4618      	mov	r0, r3
 8042f04:	f000 f8bc 	bl	8043080 <RCCEx_PLLSAI1_Config>
 8042f08:	4603      	mov	r3, r0
 8042f0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8042f0c:	7ffb      	ldrb	r3, [r7, #31]
 8042f0e:	2b00      	cmp	r3, #0
 8042f10:	d019      	beq.n	8042f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8042f12:	7ffb      	ldrb	r3, [r7, #31]
 8042f14:	77bb      	strb	r3, [r7, #30]
 8042f16:	e016      	b.n	8042f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8042f18:	687b      	ldr	r3, [r7, #4]
 8042f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042f20:	d106      	bne.n	8042f30 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042f22:	4b56      	ldr	r3, [pc, #344]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042f24:	68db      	ldr	r3, [r3, #12]
 8042f26:	4a55      	ldr	r2, [pc, #340]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042f2c:	60d3      	str	r3, [r2, #12]
 8042f2e:	e00a      	b.n	8042f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8042f30:	687b      	ldr	r3, [r7, #4]
 8042f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042f38:	d105      	bne.n	8042f46 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8042f3a:	4b50      	ldr	r3, [pc, #320]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042f3c:	68db      	ldr	r3, [r3, #12]
 8042f3e:	4a4f      	ldr	r2, [pc, #316]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042f44:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8042f46:	687b      	ldr	r3, [r7, #4]
 8042f48:	681b      	ldr	r3, [r3, #0]
 8042f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8042f4e:	2b00      	cmp	r3, #0
 8042f50:	d028      	beq.n	8042fa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8042f52:	4b4a      	ldr	r3, [pc, #296]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042f58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8042f5c:	687b      	ldr	r3, [r7, #4]
 8042f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042f60:	4946      	ldr	r1, [pc, #280]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042f62:	4313      	orrs	r3, r2
 8042f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8042f68:	687b      	ldr	r3, [r7, #4]
 8042f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042f70:	d106      	bne.n	8042f80 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042f72:	4b42      	ldr	r3, [pc, #264]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042f74:	68db      	ldr	r3, [r3, #12]
 8042f76:	4a41      	ldr	r2, [pc, #260]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042f7c:	60d3      	str	r3, [r2, #12]
 8042f7e:	e011      	b.n	8042fa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8042f80:	687b      	ldr	r3, [r7, #4]
 8042f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042f88:	d10c      	bne.n	8042fa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8042f8a:	687b      	ldr	r3, [r7, #4]
 8042f8c:	3304      	adds	r3, #4
 8042f8e:	2101      	movs	r1, #1
 8042f90:	4618      	mov	r0, r3
 8042f92:	f000 f875 	bl	8043080 <RCCEx_PLLSAI1_Config>
 8042f96:	4603      	mov	r3, r0
 8042f98:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8042f9a:	7ffb      	ldrb	r3, [r7, #31]
 8042f9c:	2b00      	cmp	r3, #0
 8042f9e:	d001      	beq.n	8042fa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8042fa0:	7ffb      	ldrb	r3, [r7, #31]
 8042fa2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8042fa4:	687b      	ldr	r3, [r7, #4]
 8042fa6:	681b      	ldr	r3, [r3, #0]
 8042fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042fac:	2b00      	cmp	r3, #0
 8042fae:	d01e      	beq.n	8042fee <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8042fb0:	4b32      	ldr	r3, [pc, #200]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042fb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8042fba:	687b      	ldr	r3, [r7, #4]
 8042fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042fc0:	492e      	ldr	r1, [pc, #184]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042fc2:	4313      	orrs	r3, r2
 8042fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8042fc8:	687b      	ldr	r3, [r7, #4]
 8042fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042fd2:	d10c      	bne.n	8042fee <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8042fd4:	687b      	ldr	r3, [r7, #4]
 8042fd6:	3304      	adds	r3, #4
 8042fd8:	2102      	movs	r1, #2
 8042fda:	4618      	mov	r0, r3
 8042fdc:	f000 f850 	bl	8043080 <RCCEx_PLLSAI1_Config>
 8042fe0:	4603      	mov	r3, r0
 8042fe2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8042fe4:	7ffb      	ldrb	r3, [r7, #31]
 8042fe6:	2b00      	cmp	r3, #0
 8042fe8:	d001      	beq.n	8042fee <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8042fea:	7ffb      	ldrb	r3, [r7, #31]
 8042fec:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8042fee:	687b      	ldr	r3, [r7, #4]
 8042ff0:	681b      	ldr	r3, [r3, #0]
 8042ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042ff6:	2b00      	cmp	r3, #0
 8042ff8:	d00b      	beq.n	8043012 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8042ffa:	4b20      	ldr	r3, [pc, #128]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8043000:	f023 0204 	bic.w	r2, r3, #4
 8043004:	687b      	ldr	r3, [r7, #4]
 8043006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804300a:	491c      	ldr	r1, [pc, #112]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804300c:	4313      	orrs	r3, r2
 804300e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8043012:	687b      	ldr	r3, [r7, #4]
 8043014:	681b      	ldr	r3, [r3, #0]
 8043016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804301a:	2b00      	cmp	r3, #0
 804301c:	d00b      	beq.n	8043036 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 804301e:	4b17      	ldr	r3, [pc, #92]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8043020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8043024:	f023 0218 	bic.w	r2, r3, #24
 8043028:	687b      	ldr	r3, [r7, #4]
 804302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804302e:	4913      	ldr	r1, [pc, #76]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8043030:	4313      	orrs	r3, r2
 8043032:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8043036:	687b      	ldr	r3, [r7, #4]
 8043038:	681b      	ldr	r3, [r3, #0]
 804303a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804303e:	2b00      	cmp	r3, #0
 8043040:	d017      	beq.n	8043072 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8043042:	4b0e      	ldr	r3, [pc, #56]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8043044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8043048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804304c:	687b      	ldr	r3, [r7, #4]
 804304e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043052:	490a      	ldr	r1, [pc, #40]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8043054:	4313      	orrs	r3, r2
 8043056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 804305a:	687b      	ldr	r3, [r7, #4]
 804305c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8043064:	d105      	bne.n	8043072 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8043066:	4b05      	ldr	r3, [pc, #20]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8043068:	68db      	ldr	r3, [r3, #12]
 804306a:	4a04      	ldr	r2, [pc, #16]	; (804307c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804306c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8043070:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8043072:	7fbb      	ldrb	r3, [r7, #30]
}
 8043074:	4618      	mov	r0, r3
 8043076:	3720      	adds	r7, #32
 8043078:	46bd      	mov	sp, r7
 804307a:	bd80      	pop	{r7, pc}
 804307c:	40021000 	.word	0x40021000

08043080 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8043080:	b580      	push	{r7, lr}
 8043082:	b084      	sub	sp, #16
 8043084:	af00      	add	r7, sp, #0
 8043086:	6078      	str	r0, [r7, #4]
 8043088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804308a:	2300      	movs	r3, #0
 804308c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 804308e:	687b      	ldr	r3, [r7, #4]
 8043090:	681b      	ldr	r3, [r3, #0]
 8043092:	2b03      	cmp	r3, #3
 8043094:	d018      	beq.n	80430c8 <RCCEx_PLLSAI1_Config+0x48>
 8043096:	2b03      	cmp	r3, #3
 8043098:	d81f      	bhi.n	80430da <RCCEx_PLLSAI1_Config+0x5a>
 804309a:	2b01      	cmp	r3, #1
 804309c:	d002      	beq.n	80430a4 <RCCEx_PLLSAI1_Config+0x24>
 804309e:	2b02      	cmp	r3, #2
 80430a0:	d009      	beq.n	80430b6 <RCCEx_PLLSAI1_Config+0x36>
 80430a2:	e01a      	b.n	80430da <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80430a4:	4b65      	ldr	r3, [pc, #404]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80430a6:	681b      	ldr	r3, [r3, #0]
 80430a8:	f003 0302 	and.w	r3, r3, #2
 80430ac:	2b00      	cmp	r3, #0
 80430ae:	d117      	bne.n	80430e0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80430b0:	2301      	movs	r3, #1
 80430b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80430b4:	e014      	b.n	80430e0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80430b6:	4b61      	ldr	r3, [pc, #388]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80430b8:	681b      	ldr	r3, [r3, #0]
 80430ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80430be:	2b00      	cmp	r3, #0
 80430c0:	d110      	bne.n	80430e4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80430c2:	2301      	movs	r3, #1
 80430c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80430c6:	e00d      	b.n	80430e4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80430c8:	4b5c      	ldr	r3, [pc, #368]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80430ca:	681b      	ldr	r3, [r3, #0]
 80430cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80430d0:	2b00      	cmp	r3, #0
 80430d2:	d109      	bne.n	80430e8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80430d4:	2301      	movs	r3, #1
 80430d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80430d8:	e006      	b.n	80430e8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80430da:	2301      	movs	r3, #1
 80430dc:	73fb      	strb	r3, [r7, #15]
      break;
 80430de:	e004      	b.n	80430ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80430e0:	bf00      	nop
 80430e2:	e002      	b.n	80430ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80430e4:	bf00      	nop
 80430e6:	e000      	b.n	80430ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80430e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80430ea:	7bfb      	ldrb	r3, [r7, #15]
 80430ec:	2b00      	cmp	r3, #0
 80430ee:	f040 809f 	bne.w	8043230 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80430f2:	4b52      	ldr	r3, [pc, #328]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80430f4:	681b      	ldr	r3, [r3, #0]
 80430f6:	4a51      	ldr	r2, [pc, #324]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80430f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80430fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80430fe:	f7fd fe57 	bl	8040db0 <HAL_GetTick>
 8043102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8043104:	e00f      	b.n	8043126 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8043106:	f7fd fe53 	bl	8040db0 <HAL_GetTick>
 804310a:	4602      	mov	r2, r0
 804310c:	68bb      	ldr	r3, [r7, #8]
 804310e:	1ad3      	subs	r3, r2, r3
 8043110:	2b02      	cmp	r3, #2
 8043112:	d908      	bls.n	8043126 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8043114:	4b49      	ldr	r3, [pc, #292]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 8043116:	681b      	ldr	r3, [r3, #0]
 8043118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804311c:	2b00      	cmp	r3, #0
 804311e:	d009      	beq.n	8043134 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8043120:	2303      	movs	r3, #3
 8043122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8043124:	e006      	b.n	8043134 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8043126:	4b45      	ldr	r3, [pc, #276]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 8043128:	681b      	ldr	r3, [r3, #0]
 804312a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804312e:	2b00      	cmp	r3, #0
 8043130:	d1e9      	bne.n	8043106 <RCCEx_PLLSAI1_Config+0x86>
 8043132:	e000      	b.n	8043136 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8043134:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8043136:	7bfb      	ldrb	r3, [r7, #15]
 8043138:	2b00      	cmp	r3, #0
 804313a:	d179      	bne.n	8043230 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 804313c:	683b      	ldr	r3, [r7, #0]
 804313e:	2b00      	cmp	r3, #0
 8043140:	d116      	bne.n	8043170 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8043142:	4b3e      	ldr	r3, [pc, #248]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 8043144:	691a      	ldr	r2, [r3, #16]
 8043146:	4b3e      	ldr	r3, [pc, #248]	; (8043240 <RCCEx_PLLSAI1_Config+0x1c0>)
 8043148:	4013      	ands	r3, r2
 804314a:	687a      	ldr	r2, [r7, #4]
 804314c:	6892      	ldr	r2, [r2, #8]
 804314e:	0211      	lsls	r1, r2, #8
 8043150:	687a      	ldr	r2, [r7, #4]
 8043152:	68d2      	ldr	r2, [r2, #12]
 8043154:	06d2      	lsls	r2, r2, #27
 8043156:	4311      	orrs	r1, r2
 8043158:	687a      	ldr	r2, [r7, #4]
 804315a:	6852      	ldr	r2, [r2, #4]
 804315c:	3a01      	subs	r2, #1
 804315e:	0112      	lsls	r2, r2, #4
 8043160:	4311      	orrs	r1, r2
 8043162:	687a      	ldr	r2, [r7, #4]
 8043164:	6812      	ldr	r2, [r2, #0]
 8043166:	430a      	orrs	r2, r1
 8043168:	4934      	ldr	r1, [pc, #208]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 804316a:	4313      	orrs	r3, r2
 804316c:	610b      	str	r3, [r1, #16]
 804316e:	e033      	b.n	80431d8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8043170:	683b      	ldr	r3, [r7, #0]
 8043172:	2b01      	cmp	r3, #1
 8043174:	d118      	bne.n	80431a8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8043176:	4b31      	ldr	r3, [pc, #196]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 8043178:	691a      	ldr	r2, [r3, #16]
 804317a:	4b32      	ldr	r3, [pc, #200]	; (8043244 <RCCEx_PLLSAI1_Config+0x1c4>)
 804317c:	4013      	ands	r3, r2
 804317e:	687a      	ldr	r2, [r7, #4]
 8043180:	6892      	ldr	r2, [r2, #8]
 8043182:	0211      	lsls	r1, r2, #8
 8043184:	687a      	ldr	r2, [r7, #4]
 8043186:	6912      	ldr	r2, [r2, #16]
 8043188:	0852      	lsrs	r2, r2, #1
 804318a:	3a01      	subs	r2, #1
 804318c:	0552      	lsls	r2, r2, #21
 804318e:	4311      	orrs	r1, r2
 8043190:	687a      	ldr	r2, [r7, #4]
 8043192:	6852      	ldr	r2, [r2, #4]
 8043194:	3a01      	subs	r2, #1
 8043196:	0112      	lsls	r2, r2, #4
 8043198:	4311      	orrs	r1, r2
 804319a:	687a      	ldr	r2, [r7, #4]
 804319c:	6812      	ldr	r2, [r2, #0]
 804319e:	430a      	orrs	r2, r1
 80431a0:	4926      	ldr	r1, [pc, #152]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80431a2:	4313      	orrs	r3, r2
 80431a4:	610b      	str	r3, [r1, #16]
 80431a6:	e017      	b.n	80431d8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80431a8:	4b24      	ldr	r3, [pc, #144]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80431aa:	691a      	ldr	r2, [r3, #16]
 80431ac:	4b26      	ldr	r3, [pc, #152]	; (8043248 <RCCEx_PLLSAI1_Config+0x1c8>)
 80431ae:	4013      	ands	r3, r2
 80431b0:	687a      	ldr	r2, [r7, #4]
 80431b2:	6892      	ldr	r2, [r2, #8]
 80431b4:	0211      	lsls	r1, r2, #8
 80431b6:	687a      	ldr	r2, [r7, #4]
 80431b8:	6952      	ldr	r2, [r2, #20]
 80431ba:	0852      	lsrs	r2, r2, #1
 80431bc:	3a01      	subs	r2, #1
 80431be:	0652      	lsls	r2, r2, #25
 80431c0:	4311      	orrs	r1, r2
 80431c2:	687a      	ldr	r2, [r7, #4]
 80431c4:	6852      	ldr	r2, [r2, #4]
 80431c6:	3a01      	subs	r2, #1
 80431c8:	0112      	lsls	r2, r2, #4
 80431ca:	4311      	orrs	r1, r2
 80431cc:	687a      	ldr	r2, [r7, #4]
 80431ce:	6812      	ldr	r2, [r2, #0]
 80431d0:	430a      	orrs	r2, r1
 80431d2:	491a      	ldr	r1, [pc, #104]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80431d4:	4313      	orrs	r3, r2
 80431d6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80431d8:	4b18      	ldr	r3, [pc, #96]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80431da:	681b      	ldr	r3, [r3, #0]
 80431dc:	4a17      	ldr	r2, [pc, #92]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80431de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80431e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80431e4:	f7fd fde4 	bl	8040db0 <HAL_GetTick>
 80431e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80431ea:	e00f      	b.n	804320c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80431ec:	f7fd fde0 	bl	8040db0 <HAL_GetTick>
 80431f0:	4602      	mov	r2, r0
 80431f2:	68bb      	ldr	r3, [r7, #8]
 80431f4:	1ad3      	subs	r3, r2, r3
 80431f6:	2b02      	cmp	r3, #2
 80431f8:	d908      	bls.n	804320c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80431fa:	4b10      	ldr	r3, [pc, #64]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 80431fc:	681b      	ldr	r3, [r3, #0]
 80431fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8043202:	2b00      	cmp	r3, #0
 8043204:	d109      	bne.n	804321a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8043206:	2303      	movs	r3, #3
 8043208:	73fb      	strb	r3, [r7, #15]
          }
          break;
 804320a:	e006      	b.n	804321a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 804320c:	4b0b      	ldr	r3, [pc, #44]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 804320e:	681b      	ldr	r3, [r3, #0]
 8043210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8043214:	2b00      	cmp	r3, #0
 8043216:	d0e9      	beq.n	80431ec <RCCEx_PLLSAI1_Config+0x16c>
 8043218:	e000      	b.n	804321c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 804321a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 804321c:	7bfb      	ldrb	r3, [r7, #15]
 804321e:	2b00      	cmp	r3, #0
 8043220:	d106      	bne.n	8043230 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8043222:	4b06      	ldr	r3, [pc, #24]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 8043224:	691a      	ldr	r2, [r3, #16]
 8043226:	687b      	ldr	r3, [r7, #4]
 8043228:	699b      	ldr	r3, [r3, #24]
 804322a:	4904      	ldr	r1, [pc, #16]	; (804323c <RCCEx_PLLSAI1_Config+0x1bc>)
 804322c:	4313      	orrs	r3, r2
 804322e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8043230:	7bfb      	ldrb	r3, [r7, #15]
}
 8043232:	4618      	mov	r0, r3
 8043234:	3710      	adds	r7, #16
 8043236:	46bd      	mov	sp, r7
 8043238:	bd80      	pop	{r7, pc}
 804323a:	bf00      	nop
 804323c:	40021000 	.word	0x40021000
 8043240:	07ff800c 	.word	0x07ff800c
 8043244:	ff9f800c 	.word	0xff9f800c
 8043248:	f9ff800c 	.word	0xf9ff800c

0804324c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 804324c:	b580      	push	{r7, lr}
 804324e:	b084      	sub	sp, #16
 8043250:	af00      	add	r7, sp, #0
 8043252:	6078      	str	r0, [r7, #4]
 8043254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8043256:	2300      	movs	r3, #0
 8043258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 804325a:	687b      	ldr	r3, [r7, #4]
 804325c:	681b      	ldr	r3, [r3, #0]
 804325e:	2b03      	cmp	r3, #3
 8043260:	d018      	beq.n	8043294 <RCCEx_PLLSAI2_Config+0x48>
 8043262:	2b03      	cmp	r3, #3
 8043264:	d81f      	bhi.n	80432a6 <RCCEx_PLLSAI2_Config+0x5a>
 8043266:	2b01      	cmp	r3, #1
 8043268:	d002      	beq.n	8043270 <RCCEx_PLLSAI2_Config+0x24>
 804326a:	2b02      	cmp	r3, #2
 804326c:	d009      	beq.n	8043282 <RCCEx_PLLSAI2_Config+0x36>
 804326e:	e01a      	b.n	80432a6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8043270:	4b4a      	ldr	r3, [pc, #296]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 8043272:	681b      	ldr	r3, [r3, #0]
 8043274:	f003 0302 	and.w	r3, r3, #2
 8043278:	2b00      	cmp	r3, #0
 804327a:	d117      	bne.n	80432ac <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 804327c:	2301      	movs	r3, #1
 804327e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043280:	e014      	b.n	80432ac <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8043282:	4b46      	ldr	r3, [pc, #280]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 8043284:	681b      	ldr	r3, [r3, #0]
 8043286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804328a:	2b00      	cmp	r3, #0
 804328c:	d110      	bne.n	80432b0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 804328e:	2301      	movs	r3, #1
 8043290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043292:	e00d      	b.n	80432b0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8043294:	4b41      	ldr	r3, [pc, #260]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 8043296:	681b      	ldr	r3, [r3, #0]
 8043298:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 804329c:	2b00      	cmp	r3, #0
 804329e:	d109      	bne.n	80432b4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80432a0:	2301      	movs	r3, #1
 80432a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80432a4:	e006      	b.n	80432b4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80432a6:	2301      	movs	r3, #1
 80432a8:	73fb      	strb	r3, [r7, #15]
      break;
 80432aa:	e004      	b.n	80432b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80432ac:	bf00      	nop
 80432ae:	e002      	b.n	80432b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80432b0:	bf00      	nop
 80432b2:	e000      	b.n	80432b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80432b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80432b6:	7bfb      	ldrb	r3, [r7, #15]
 80432b8:	2b00      	cmp	r3, #0
 80432ba:	d169      	bne.n	8043390 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80432bc:	4b37      	ldr	r3, [pc, #220]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 80432be:	681b      	ldr	r3, [r3, #0]
 80432c0:	4a36      	ldr	r2, [pc, #216]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 80432c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80432c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80432c8:	f7fd fd72 	bl	8040db0 <HAL_GetTick>
 80432cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80432ce:	e00f      	b.n	80432f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80432d0:	f7fd fd6e 	bl	8040db0 <HAL_GetTick>
 80432d4:	4602      	mov	r2, r0
 80432d6:	68bb      	ldr	r3, [r7, #8]
 80432d8:	1ad3      	subs	r3, r2, r3
 80432da:	2b02      	cmp	r3, #2
 80432dc:	d908      	bls.n	80432f0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80432de:	4b2f      	ldr	r3, [pc, #188]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 80432e0:	681b      	ldr	r3, [r3, #0]
 80432e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80432e6:	2b00      	cmp	r3, #0
 80432e8:	d009      	beq.n	80432fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80432ea:	2303      	movs	r3, #3
 80432ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80432ee:	e006      	b.n	80432fe <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80432f0:	4b2a      	ldr	r3, [pc, #168]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 80432f2:	681b      	ldr	r3, [r3, #0]
 80432f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80432f8:	2b00      	cmp	r3, #0
 80432fa:	d1e9      	bne.n	80432d0 <RCCEx_PLLSAI2_Config+0x84>
 80432fc:	e000      	b.n	8043300 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80432fe:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8043300:	7bfb      	ldrb	r3, [r7, #15]
 8043302:	2b00      	cmp	r3, #0
 8043304:	d144      	bne.n	8043390 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8043306:	683b      	ldr	r3, [r7, #0]
 8043308:	2b00      	cmp	r3, #0
 804330a:	d115      	bne.n	8043338 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 804330c:	4b23      	ldr	r3, [pc, #140]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 804330e:	695a      	ldr	r2, [r3, #20]
 8043310:	4b23      	ldr	r3, [pc, #140]	; (80433a0 <RCCEx_PLLSAI2_Config+0x154>)
 8043312:	4013      	ands	r3, r2
 8043314:	687a      	ldr	r2, [r7, #4]
 8043316:	6892      	ldr	r2, [r2, #8]
 8043318:	0211      	lsls	r1, r2, #8
 804331a:	687a      	ldr	r2, [r7, #4]
 804331c:	68d2      	ldr	r2, [r2, #12]
 804331e:	06d2      	lsls	r2, r2, #27
 8043320:	4311      	orrs	r1, r2
 8043322:	687a      	ldr	r2, [r7, #4]
 8043324:	6852      	ldr	r2, [r2, #4]
 8043326:	3a01      	subs	r2, #1
 8043328:	0112      	lsls	r2, r2, #4
 804332a:	4311      	orrs	r1, r2
 804332c:	687a      	ldr	r2, [r7, #4]
 804332e:	6812      	ldr	r2, [r2, #0]
 8043330:	430a      	orrs	r2, r1
 8043332:	491a      	ldr	r1, [pc, #104]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 8043334:	4313      	orrs	r3, r2
 8043336:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8043338:	4b18      	ldr	r3, [pc, #96]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 804333a:	681b      	ldr	r3, [r3, #0]
 804333c:	4a17      	ldr	r2, [pc, #92]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 804333e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043342:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043344:	f7fd fd34 	bl	8040db0 <HAL_GetTick>
 8043348:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 804334a:	e00f      	b.n	804336c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 804334c:	f7fd fd30 	bl	8040db0 <HAL_GetTick>
 8043350:	4602      	mov	r2, r0
 8043352:	68bb      	ldr	r3, [r7, #8]
 8043354:	1ad3      	subs	r3, r2, r3
 8043356:	2b02      	cmp	r3, #2
 8043358:	d908      	bls.n	804336c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 804335a:	4b10      	ldr	r3, [pc, #64]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 804335c:	681b      	ldr	r3, [r3, #0]
 804335e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8043362:	2b00      	cmp	r3, #0
 8043364:	d109      	bne.n	804337a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8043366:	2303      	movs	r3, #3
 8043368:	73fb      	strb	r3, [r7, #15]
          }
          break;
 804336a:	e006      	b.n	804337a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 804336c:	4b0b      	ldr	r3, [pc, #44]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 804336e:	681b      	ldr	r3, [r3, #0]
 8043370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8043374:	2b00      	cmp	r3, #0
 8043376:	d0e9      	beq.n	804334c <RCCEx_PLLSAI2_Config+0x100>
 8043378:	e000      	b.n	804337c <RCCEx_PLLSAI2_Config+0x130>
          break;
 804337a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 804337c:	7bfb      	ldrb	r3, [r7, #15]
 804337e:	2b00      	cmp	r3, #0
 8043380:	d106      	bne.n	8043390 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8043382:	4b06      	ldr	r3, [pc, #24]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 8043384:	695a      	ldr	r2, [r3, #20]
 8043386:	687b      	ldr	r3, [r7, #4]
 8043388:	691b      	ldr	r3, [r3, #16]
 804338a:	4904      	ldr	r1, [pc, #16]	; (804339c <RCCEx_PLLSAI2_Config+0x150>)
 804338c:	4313      	orrs	r3, r2
 804338e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8043390:	7bfb      	ldrb	r3, [r7, #15]
}
 8043392:	4618      	mov	r0, r3
 8043394:	3710      	adds	r7, #16
 8043396:	46bd      	mov	sp, r7
 8043398:	bd80      	pop	{r7, pc}
 804339a:	bf00      	nop
 804339c:	40021000 	.word	0x40021000
 80433a0:	07ff800c 	.word	0x07ff800c

080433a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80433a4:	b580      	push	{r7, lr}
 80433a6:	b082      	sub	sp, #8
 80433a8:	af00      	add	r7, sp, #0
 80433aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80433ac:	687b      	ldr	r3, [r7, #4]
 80433ae:	2b00      	cmp	r3, #0
 80433b0:	d101      	bne.n	80433b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80433b2:	2301      	movs	r3, #1
 80433b4:	e049      	b.n	804344a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80433b6:	687b      	ldr	r3, [r7, #4]
 80433b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80433bc:	b2db      	uxtb	r3, r3
 80433be:	2b00      	cmp	r3, #0
 80433c0:	d106      	bne.n	80433d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80433c2:	687b      	ldr	r3, [r7, #4]
 80433c4:	2200      	movs	r2, #0
 80433c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80433ca:	6878      	ldr	r0, [r7, #4]
 80433cc:	f7fd fb92 	bl	8040af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80433d0:	687b      	ldr	r3, [r7, #4]
 80433d2:	2202      	movs	r2, #2
 80433d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80433d8:	687b      	ldr	r3, [r7, #4]
 80433da:	681a      	ldr	r2, [r3, #0]
 80433dc:	687b      	ldr	r3, [r7, #4]
 80433de:	3304      	adds	r3, #4
 80433e0:	4619      	mov	r1, r3
 80433e2:	4610      	mov	r0, r2
 80433e4:	f000 f98c 	bl	8043700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80433e8:	687b      	ldr	r3, [r7, #4]
 80433ea:	2201      	movs	r2, #1
 80433ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80433f0:	687b      	ldr	r3, [r7, #4]
 80433f2:	2201      	movs	r2, #1
 80433f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80433f8:	687b      	ldr	r3, [r7, #4]
 80433fa:	2201      	movs	r2, #1
 80433fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8043400:	687b      	ldr	r3, [r7, #4]
 8043402:	2201      	movs	r2, #1
 8043404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8043408:	687b      	ldr	r3, [r7, #4]
 804340a:	2201      	movs	r2, #1
 804340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8043410:	687b      	ldr	r3, [r7, #4]
 8043412:	2201      	movs	r2, #1
 8043414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8043418:	687b      	ldr	r3, [r7, #4]
 804341a:	2201      	movs	r2, #1
 804341c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8043420:	687b      	ldr	r3, [r7, #4]
 8043422:	2201      	movs	r2, #1
 8043424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8043428:	687b      	ldr	r3, [r7, #4]
 804342a:	2201      	movs	r2, #1
 804342c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8043430:	687b      	ldr	r3, [r7, #4]
 8043432:	2201      	movs	r2, #1
 8043434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8043438:	687b      	ldr	r3, [r7, #4]
 804343a:	2201      	movs	r2, #1
 804343c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8043440:	687b      	ldr	r3, [r7, #4]
 8043442:	2201      	movs	r2, #1
 8043444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8043448:	2300      	movs	r3, #0
}
 804344a:	4618      	mov	r0, r3
 804344c:	3708      	adds	r7, #8
 804344e:	46bd      	mov	sp, r7
 8043450:	bd80      	pop	{r7, pc}
	...

08043454 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8043454:	b480      	push	{r7}
 8043456:	b085      	sub	sp, #20
 8043458:	af00      	add	r7, sp, #0
 804345a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 804345c:	687b      	ldr	r3, [r7, #4]
 804345e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8043462:	b2db      	uxtb	r3, r3
 8043464:	2b01      	cmp	r3, #1
 8043466:	d001      	beq.n	804346c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8043468:	2301      	movs	r3, #1
 804346a:	e047      	b.n	80434fc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804346c:	687b      	ldr	r3, [r7, #4]
 804346e:	2202      	movs	r2, #2
 8043470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8043474:	687b      	ldr	r3, [r7, #4]
 8043476:	681b      	ldr	r3, [r3, #0]
 8043478:	4a23      	ldr	r2, [pc, #140]	; (8043508 <HAL_TIM_Base_Start+0xb4>)
 804347a:	4293      	cmp	r3, r2
 804347c:	d01d      	beq.n	80434ba <HAL_TIM_Base_Start+0x66>
 804347e:	687b      	ldr	r3, [r7, #4]
 8043480:	681b      	ldr	r3, [r3, #0]
 8043482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043486:	d018      	beq.n	80434ba <HAL_TIM_Base_Start+0x66>
 8043488:	687b      	ldr	r3, [r7, #4]
 804348a:	681b      	ldr	r3, [r3, #0]
 804348c:	4a1f      	ldr	r2, [pc, #124]	; (804350c <HAL_TIM_Base_Start+0xb8>)
 804348e:	4293      	cmp	r3, r2
 8043490:	d013      	beq.n	80434ba <HAL_TIM_Base_Start+0x66>
 8043492:	687b      	ldr	r3, [r7, #4]
 8043494:	681b      	ldr	r3, [r3, #0]
 8043496:	4a1e      	ldr	r2, [pc, #120]	; (8043510 <HAL_TIM_Base_Start+0xbc>)
 8043498:	4293      	cmp	r3, r2
 804349a:	d00e      	beq.n	80434ba <HAL_TIM_Base_Start+0x66>
 804349c:	687b      	ldr	r3, [r7, #4]
 804349e:	681b      	ldr	r3, [r3, #0]
 80434a0:	4a1c      	ldr	r2, [pc, #112]	; (8043514 <HAL_TIM_Base_Start+0xc0>)
 80434a2:	4293      	cmp	r3, r2
 80434a4:	d009      	beq.n	80434ba <HAL_TIM_Base_Start+0x66>
 80434a6:	687b      	ldr	r3, [r7, #4]
 80434a8:	681b      	ldr	r3, [r3, #0]
 80434aa:	4a1b      	ldr	r2, [pc, #108]	; (8043518 <HAL_TIM_Base_Start+0xc4>)
 80434ac:	4293      	cmp	r3, r2
 80434ae:	d004      	beq.n	80434ba <HAL_TIM_Base_Start+0x66>
 80434b0:	687b      	ldr	r3, [r7, #4]
 80434b2:	681b      	ldr	r3, [r3, #0]
 80434b4:	4a19      	ldr	r2, [pc, #100]	; (804351c <HAL_TIM_Base_Start+0xc8>)
 80434b6:	4293      	cmp	r3, r2
 80434b8:	d115      	bne.n	80434e6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80434ba:	687b      	ldr	r3, [r7, #4]
 80434bc:	681b      	ldr	r3, [r3, #0]
 80434be:	689a      	ldr	r2, [r3, #8]
 80434c0:	4b17      	ldr	r3, [pc, #92]	; (8043520 <HAL_TIM_Base_Start+0xcc>)
 80434c2:	4013      	ands	r3, r2
 80434c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80434c6:	68fb      	ldr	r3, [r7, #12]
 80434c8:	2b06      	cmp	r3, #6
 80434ca:	d015      	beq.n	80434f8 <HAL_TIM_Base_Start+0xa4>
 80434cc:	68fb      	ldr	r3, [r7, #12]
 80434ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80434d2:	d011      	beq.n	80434f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80434d4:	687b      	ldr	r3, [r7, #4]
 80434d6:	681b      	ldr	r3, [r3, #0]
 80434d8:	681a      	ldr	r2, [r3, #0]
 80434da:	687b      	ldr	r3, [r7, #4]
 80434dc:	681b      	ldr	r3, [r3, #0]
 80434de:	f042 0201 	orr.w	r2, r2, #1
 80434e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80434e4:	e008      	b.n	80434f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80434e6:	687b      	ldr	r3, [r7, #4]
 80434e8:	681b      	ldr	r3, [r3, #0]
 80434ea:	681a      	ldr	r2, [r3, #0]
 80434ec:	687b      	ldr	r3, [r7, #4]
 80434ee:	681b      	ldr	r3, [r3, #0]
 80434f0:	f042 0201 	orr.w	r2, r2, #1
 80434f4:	601a      	str	r2, [r3, #0]
 80434f6:	e000      	b.n	80434fa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80434f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80434fa:	2300      	movs	r3, #0
}
 80434fc:	4618      	mov	r0, r3
 80434fe:	3714      	adds	r7, #20
 8043500:	46bd      	mov	sp, r7
 8043502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043506:	4770      	bx	lr
 8043508:	40012c00 	.word	0x40012c00
 804350c:	40000400 	.word	0x40000400
 8043510:	40000800 	.word	0x40000800
 8043514:	40000c00 	.word	0x40000c00
 8043518:	40013400 	.word	0x40013400
 804351c:	40014000 	.word	0x40014000
 8043520:	00010007 	.word	0x00010007

08043524 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8043524:	b480      	push	{r7}
 8043526:	b083      	sub	sp, #12
 8043528:	af00      	add	r7, sp, #0
 804352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 804352c:	687b      	ldr	r3, [r7, #4]
 804352e:	681b      	ldr	r3, [r3, #0]
 8043530:	6a1a      	ldr	r2, [r3, #32]
 8043532:	f241 1311 	movw	r3, #4369	; 0x1111
 8043536:	4013      	ands	r3, r2
 8043538:	2b00      	cmp	r3, #0
 804353a:	d10f      	bne.n	804355c <HAL_TIM_Base_Stop+0x38>
 804353c:	687b      	ldr	r3, [r7, #4]
 804353e:	681b      	ldr	r3, [r3, #0]
 8043540:	6a1a      	ldr	r2, [r3, #32]
 8043542:	f240 4344 	movw	r3, #1092	; 0x444
 8043546:	4013      	ands	r3, r2
 8043548:	2b00      	cmp	r3, #0
 804354a:	d107      	bne.n	804355c <HAL_TIM_Base_Stop+0x38>
 804354c:	687b      	ldr	r3, [r7, #4]
 804354e:	681b      	ldr	r3, [r3, #0]
 8043550:	681a      	ldr	r2, [r3, #0]
 8043552:	687b      	ldr	r3, [r7, #4]
 8043554:	681b      	ldr	r3, [r3, #0]
 8043556:	f022 0201 	bic.w	r2, r2, #1
 804355a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 804355c:	687b      	ldr	r3, [r7, #4]
 804355e:	2201      	movs	r2, #1
 8043560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8043564:	2300      	movs	r3, #0
}
 8043566:	4618      	mov	r0, r3
 8043568:	370c      	adds	r7, #12
 804356a:	46bd      	mov	sp, r7
 804356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043570:	4770      	bx	lr

08043572 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8043572:	b580      	push	{r7, lr}
 8043574:	b084      	sub	sp, #16
 8043576:	af00      	add	r7, sp, #0
 8043578:	6078      	str	r0, [r7, #4]
 804357a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 804357c:	687b      	ldr	r3, [r7, #4]
 804357e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8043582:	2b01      	cmp	r3, #1
 8043584:	d101      	bne.n	804358a <HAL_TIM_ConfigClockSource+0x18>
 8043586:	2302      	movs	r3, #2
 8043588:	e0b5      	b.n	80436f6 <HAL_TIM_ConfigClockSource+0x184>
 804358a:	687b      	ldr	r3, [r7, #4]
 804358c:	2201      	movs	r2, #1
 804358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8043592:	687b      	ldr	r3, [r7, #4]
 8043594:	2202      	movs	r2, #2
 8043596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 804359a:	687b      	ldr	r3, [r7, #4]
 804359c:	681b      	ldr	r3, [r3, #0]
 804359e:	689b      	ldr	r3, [r3, #8]
 80435a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80435a2:	68fb      	ldr	r3, [r7, #12]
 80435a4:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80435a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80435ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80435ae:	68fb      	ldr	r3, [r7, #12]
 80435b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80435b4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80435b6:	687b      	ldr	r3, [r7, #4]
 80435b8:	681b      	ldr	r3, [r3, #0]
 80435ba:	68fa      	ldr	r2, [r7, #12]
 80435bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80435be:	683b      	ldr	r3, [r7, #0]
 80435c0:	681b      	ldr	r3, [r3, #0]
 80435c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80435c6:	d03e      	beq.n	8043646 <HAL_TIM_ConfigClockSource+0xd4>
 80435c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80435cc:	f200 8087 	bhi.w	80436de <HAL_TIM_ConfigClockSource+0x16c>
 80435d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80435d4:	f000 8085 	beq.w	80436e2 <HAL_TIM_ConfigClockSource+0x170>
 80435d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80435dc:	d87f      	bhi.n	80436de <HAL_TIM_ConfigClockSource+0x16c>
 80435de:	2b70      	cmp	r3, #112	; 0x70
 80435e0:	d01a      	beq.n	8043618 <HAL_TIM_ConfigClockSource+0xa6>
 80435e2:	2b70      	cmp	r3, #112	; 0x70
 80435e4:	d87b      	bhi.n	80436de <HAL_TIM_ConfigClockSource+0x16c>
 80435e6:	2b60      	cmp	r3, #96	; 0x60
 80435e8:	d050      	beq.n	804368c <HAL_TIM_ConfigClockSource+0x11a>
 80435ea:	2b60      	cmp	r3, #96	; 0x60
 80435ec:	d877      	bhi.n	80436de <HAL_TIM_ConfigClockSource+0x16c>
 80435ee:	2b50      	cmp	r3, #80	; 0x50
 80435f0:	d03c      	beq.n	804366c <HAL_TIM_ConfigClockSource+0xfa>
 80435f2:	2b50      	cmp	r3, #80	; 0x50
 80435f4:	d873      	bhi.n	80436de <HAL_TIM_ConfigClockSource+0x16c>
 80435f6:	2b40      	cmp	r3, #64	; 0x40
 80435f8:	d058      	beq.n	80436ac <HAL_TIM_ConfigClockSource+0x13a>
 80435fa:	2b40      	cmp	r3, #64	; 0x40
 80435fc:	d86f      	bhi.n	80436de <HAL_TIM_ConfigClockSource+0x16c>
 80435fe:	2b30      	cmp	r3, #48	; 0x30
 8043600:	d064      	beq.n	80436cc <HAL_TIM_ConfigClockSource+0x15a>
 8043602:	2b30      	cmp	r3, #48	; 0x30
 8043604:	d86b      	bhi.n	80436de <HAL_TIM_ConfigClockSource+0x16c>
 8043606:	2b20      	cmp	r3, #32
 8043608:	d060      	beq.n	80436cc <HAL_TIM_ConfigClockSource+0x15a>
 804360a:	2b20      	cmp	r3, #32
 804360c:	d867      	bhi.n	80436de <HAL_TIM_ConfigClockSource+0x16c>
 804360e:	2b00      	cmp	r3, #0
 8043610:	d05c      	beq.n	80436cc <HAL_TIM_ConfigClockSource+0x15a>
 8043612:	2b10      	cmp	r3, #16
 8043614:	d05a      	beq.n	80436cc <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8043616:	e062      	b.n	80436de <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8043618:	687b      	ldr	r3, [r7, #4]
 804361a:	6818      	ldr	r0, [r3, #0]
 804361c:	683b      	ldr	r3, [r7, #0]
 804361e:	6899      	ldr	r1, [r3, #8]
 8043620:	683b      	ldr	r3, [r7, #0]
 8043622:	685a      	ldr	r2, [r3, #4]
 8043624:	683b      	ldr	r3, [r7, #0]
 8043626:	68db      	ldr	r3, [r3, #12]
 8043628:	f000 f980 	bl	804392c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 804362c:	687b      	ldr	r3, [r7, #4]
 804362e:	681b      	ldr	r3, [r3, #0]
 8043630:	689b      	ldr	r3, [r3, #8]
 8043632:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8043634:	68fb      	ldr	r3, [r7, #12]
 8043636:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 804363a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 804363c:	687b      	ldr	r3, [r7, #4]
 804363e:	681b      	ldr	r3, [r3, #0]
 8043640:	68fa      	ldr	r2, [r7, #12]
 8043642:	609a      	str	r2, [r3, #8]
      break;
 8043644:	e04e      	b.n	80436e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8043646:	687b      	ldr	r3, [r7, #4]
 8043648:	6818      	ldr	r0, [r3, #0]
 804364a:	683b      	ldr	r3, [r7, #0]
 804364c:	6899      	ldr	r1, [r3, #8]
 804364e:	683b      	ldr	r3, [r7, #0]
 8043650:	685a      	ldr	r2, [r3, #4]
 8043652:	683b      	ldr	r3, [r7, #0]
 8043654:	68db      	ldr	r3, [r3, #12]
 8043656:	f000 f969 	bl	804392c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 804365a:	687b      	ldr	r3, [r7, #4]
 804365c:	681b      	ldr	r3, [r3, #0]
 804365e:	689a      	ldr	r2, [r3, #8]
 8043660:	687b      	ldr	r3, [r7, #4]
 8043662:	681b      	ldr	r3, [r3, #0]
 8043664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8043668:	609a      	str	r2, [r3, #8]
      break;
 804366a:	e03b      	b.n	80436e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 804366c:	687b      	ldr	r3, [r7, #4]
 804366e:	6818      	ldr	r0, [r3, #0]
 8043670:	683b      	ldr	r3, [r7, #0]
 8043672:	6859      	ldr	r1, [r3, #4]
 8043674:	683b      	ldr	r3, [r7, #0]
 8043676:	68db      	ldr	r3, [r3, #12]
 8043678:	461a      	mov	r2, r3
 804367a:	f000 f8db 	bl	8043834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 804367e:	687b      	ldr	r3, [r7, #4]
 8043680:	681b      	ldr	r3, [r3, #0]
 8043682:	2150      	movs	r1, #80	; 0x50
 8043684:	4618      	mov	r0, r3
 8043686:	f000 f934 	bl	80438f2 <TIM_ITRx_SetConfig>
      break;
 804368a:	e02b      	b.n	80436e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 804368c:	687b      	ldr	r3, [r7, #4]
 804368e:	6818      	ldr	r0, [r3, #0]
 8043690:	683b      	ldr	r3, [r7, #0]
 8043692:	6859      	ldr	r1, [r3, #4]
 8043694:	683b      	ldr	r3, [r7, #0]
 8043696:	68db      	ldr	r3, [r3, #12]
 8043698:	461a      	mov	r2, r3
 804369a:	f000 f8fa 	bl	8043892 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 804369e:	687b      	ldr	r3, [r7, #4]
 80436a0:	681b      	ldr	r3, [r3, #0]
 80436a2:	2160      	movs	r1, #96	; 0x60
 80436a4:	4618      	mov	r0, r3
 80436a6:	f000 f924 	bl	80438f2 <TIM_ITRx_SetConfig>
      break;
 80436aa:	e01b      	b.n	80436e4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80436ac:	687b      	ldr	r3, [r7, #4]
 80436ae:	6818      	ldr	r0, [r3, #0]
 80436b0:	683b      	ldr	r3, [r7, #0]
 80436b2:	6859      	ldr	r1, [r3, #4]
 80436b4:	683b      	ldr	r3, [r7, #0]
 80436b6:	68db      	ldr	r3, [r3, #12]
 80436b8:	461a      	mov	r2, r3
 80436ba:	f000 f8bb 	bl	8043834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80436be:	687b      	ldr	r3, [r7, #4]
 80436c0:	681b      	ldr	r3, [r3, #0]
 80436c2:	2140      	movs	r1, #64	; 0x40
 80436c4:	4618      	mov	r0, r3
 80436c6:	f000 f914 	bl	80438f2 <TIM_ITRx_SetConfig>
      break;
 80436ca:	e00b      	b.n	80436e4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80436cc:	687b      	ldr	r3, [r7, #4]
 80436ce:	681a      	ldr	r2, [r3, #0]
 80436d0:	683b      	ldr	r3, [r7, #0]
 80436d2:	681b      	ldr	r3, [r3, #0]
 80436d4:	4619      	mov	r1, r3
 80436d6:	4610      	mov	r0, r2
 80436d8:	f000 f90b 	bl	80438f2 <TIM_ITRx_SetConfig>
        break;
 80436dc:	e002      	b.n	80436e4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80436de:	bf00      	nop
 80436e0:	e000      	b.n	80436e4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80436e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80436e4:	687b      	ldr	r3, [r7, #4]
 80436e6:	2201      	movs	r2, #1
 80436e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80436ec:	687b      	ldr	r3, [r7, #4]
 80436ee:	2200      	movs	r2, #0
 80436f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80436f4:	2300      	movs	r3, #0
}
 80436f6:	4618      	mov	r0, r3
 80436f8:	3710      	adds	r7, #16
 80436fa:	46bd      	mov	sp, r7
 80436fc:	bd80      	pop	{r7, pc}
	...

08043700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8043700:	b480      	push	{r7}
 8043702:	b085      	sub	sp, #20
 8043704:	af00      	add	r7, sp, #0
 8043706:	6078      	str	r0, [r7, #4]
 8043708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804370a:	687b      	ldr	r3, [r7, #4]
 804370c:	681b      	ldr	r3, [r3, #0]
 804370e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8043710:	687b      	ldr	r3, [r7, #4]
 8043712:	4a40      	ldr	r2, [pc, #256]	; (8043814 <TIM_Base_SetConfig+0x114>)
 8043714:	4293      	cmp	r3, r2
 8043716:	d013      	beq.n	8043740 <TIM_Base_SetConfig+0x40>
 8043718:	687b      	ldr	r3, [r7, #4]
 804371a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804371e:	d00f      	beq.n	8043740 <TIM_Base_SetConfig+0x40>
 8043720:	687b      	ldr	r3, [r7, #4]
 8043722:	4a3d      	ldr	r2, [pc, #244]	; (8043818 <TIM_Base_SetConfig+0x118>)
 8043724:	4293      	cmp	r3, r2
 8043726:	d00b      	beq.n	8043740 <TIM_Base_SetConfig+0x40>
 8043728:	687b      	ldr	r3, [r7, #4]
 804372a:	4a3c      	ldr	r2, [pc, #240]	; (804381c <TIM_Base_SetConfig+0x11c>)
 804372c:	4293      	cmp	r3, r2
 804372e:	d007      	beq.n	8043740 <TIM_Base_SetConfig+0x40>
 8043730:	687b      	ldr	r3, [r7, #4]
 8043732:	4a3b      	ldr	r2, [pc, #236]	; (8043820 <TIM_Base_SetConfig+0x120>)
 8043734:	4293      	cmp	r3, r2
 8043736:	d003      	beq.n	8043740 <TIM_Base_SetConfig+0x40>
 8043738:	687b      	ldr	r3, [r7, #4]
 804373a:	4a3a      	ldr	r2, [pc, #232]	; (8043824 <TIM_Base_SetConfig+0x124>)
 804373c:	4293      	cmp	r3, r2
 804373e:	d108      	bne.n	8043752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8043740:	68fb      	ldr	r3, [r7, #12]
 8043742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8043746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8043748:	683b      	ldr	r3, [r7, #0]
 804374a:	685b      	ldr	r3, [r3, #4]
 804374c:	68fa      	ldr	r2, [r7, #12]
 804374e:	4313      	orrs	r3, r2
 8043750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8043752:	687b      	ldr	r3, [r7, #4]
 8043754:	4a2f      	ldr	r2, [pc, #188]	; (8043814 <TIM_Base_SetConfig+0x114>)
 8043756:	4293      	cmp	r3, r2
 8043758:	d01f      	beq.n	804379a <TIM_Base_SetConfig+0x9a>
 804375a:	687b      	ldr	r3, [r7, #4]
 804375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043760:	d01b      	beq.n	804379a <TIM_Base_SetConfig+0x9a>
 8043762:	687b      	ldr	r3, [r7, #4]
 8043764:	4a2c      	ldr	r2, [pc, #176]	; (8043818 <TIM_Base_SetConfig+0x118>)
 8043766:	4293      	cmp	r3, r2
 8043768:	d017      	beq.n	804379a <TIM_Base_SetConfig+0x9a>
 804376a:	687b      	ldr	r3, [r7, #4]
 804376c:	4a2b      	ldr	r2, [pc, #172]	; (804381c <TIM_Base_SetConfig+0x11c>)
 804376e:	4293      	cmp	r3, r2
 8043770:	d013      	beq.n	804379a <TIM_Base_SetConfig+0x9a>
 8043772:	687b      	ldr	r3, [r7, #4]
 8043774:	4a2a      	ldr	r2, [pc, #168]	; (8043820 <TIM_Base_SetConfig+0x120>)
 8043776:	4293      	cmp	r3, r2
 8043778:	d00f      	beq.n	804379a <TIM_Base_SetConfig+0x9a>
 804377a:	687b      	ldr	r3, [r7, #4]
 804377c:	4a29      	ldr	r2, [pc, #164]	; (8043824 <TIM_Base_SetConfig+0x124>)
 804377e:	4293      	cmp	r3, r2
 8043780:	d00b      	beq.n	804379a <TIM_Base_SetConfig+0x9a>
 8043782:	687b      	ldr	r3, [r7, #4]
 8043784:	4a28      	ldr	r2, [pc, #160]	; (8043828 <TIM_Base_SetConfig+0x128>)
 8043786:	4293      	cmp	r3, r2
 8043788:	d007      	beq.n	804379a <TIM_Base_SetConfig+0x9a>
 804378a:	687b      	ldr	r3, [r7, #4]
 804378c:	4a27      	ldr	r2, [pc, #156]	; (804382c <TIM_Base_SetConfig+0x12c>)
 804378e:	4293      	cmp	r3, r2
 8043790:	d003      	beq.n	804379a <TIM_Base_SetConfig+0x9a>
 8043792:	687b      	ldr	r3, [r7, #4]
 8043794:	4a26      	ldr	r2, [pc, #152]	; (8043830 <TIM_Base_SetConfig+0x130>)
 8043796:	4293      	cmp	r3, r2
 8043798:	d108      	bne.n	80437ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804379a:	68fb      	ldr	r3, [r7, #12]
 804379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80437a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80437a2:	683b      	ldr	r3, [r7, #0]
 80437a4:	68db      	ldr	r3, [r3, #12]
 80437a6:	68fa      	ldr	r2, [r7, #12]
 80437a8:	4313      	orrs	r3, r2
 80437aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80437ac:	68fb      	ldr	r3, [r7, #12]
 80437ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80437b2:	683b      	ldr	r3, [r7, #0]
 80437b4:	695b      	ldr	r3, [r3, #20]
 80437b6:	4313      	orrs	r3, r2
 80437b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80437ba:	687b      	ldr	r3, [r7, #4]
 80437bc:	68fa      	ldr	r2, [r7, #12]
 80437be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80437c0:	683b      	ldr	r3, [r7, #0]
 80437c2:	689a      	ldr	r2, [r3, #8]
 80437c4:	687b      	ldr	r3, [r7, #4]
 80437c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80437c8:	683b      	ldr	r3, [r7, #0]
 80437ca:	681a      	ldr	r2, [r3, #0]
 80437cc:	687b      	ldr	r3, [r7, #4]
 80437ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80437d0:	687b      	ldr	r3, [r7, #4]
 80437d2:	4a10      	ldr	r2, [pc, #64]	; (8043814 <TIM_Base_SetConfig+0x114>)
 80437d4:	4293      	cmp	r3, r2
 80437d6:	d00f      	beq.n	80437f8 <TIM_Base_SetConfig+0xf8>
 80437d8:	687b      	ldr	r3, [r7, #4]
 80437da:	4a12      	ldr	r2, [pc, #72]	; (8043824 <TIM_Base_SetConfig+0x124>)
 80437dc:	4293      	cmp	r3, r2
 80437de:	d00b      	beq.n	80437f8 <TIM_Base_SetConfig+0xf8>
 80437e0:	687b      	ldr	r3, [r7, #4]
 80437e2:	4a11      	ldr	r2, [pc, #68]	; (8043828 <TIM_Base_SetConfig+0x128>)
 80437e4:	4293      	cmp	r3, r2
 80437e6:	d007      	beq.n	80437f8 <TIM_Base_SetConfig+0xf8>
 80437e8:	687b      	ldr	r3, [r7, #4]
 80437ea:	4a10      	ldr	r2, [pc, #64]	; (804382c <TIM_Base_SetConfig+0x12c>)
 80437ec:	4293      	cmp	r3, r2
 80437ee:	d003      	beq.n	80437f8 <TIM_Base_SetConfig+0xf8>
 80437f0:	687b      	ldr	r3, [r7, #4]
 80437f2:	4a0f      	ldr	r2, [pc, #60]	; (8043830 <TIM_Base_SetConfig+0x130>)
 80437f4:	4293      	cmp	r3, r2
 80437f6:	d103      	bne.n	8043800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80437f8:	683b      	ldr	r3, [r7, #0]
 80437fa:	691a      	ldr	r2, [r3, #16]
 80437fc:	687b      	ldr	r3, [r7, #4]
 80437fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8043800:	687b      	ldr	r3, [r7, #4]
 8043802:	2201      	movs	r2, #1
 8043804:	615a      	str	r2, [r3, #20]
}
 8043806:	bf00      	nop
 8043808:	3714      	adds	r7, #20
 804380a:	46bd      	mov	sp, r7
 804380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043810:	4770      	bx	lr
 8043812:	bf00      	nop
 8043814:	40012c00 	.word	0x40012c00
 8043818:	40000400 	.word	0x40000400
 804381c:	40000800 	.word	0x40000800
 8043820:	40000c00 	.word	0x40000c00
 8043824:	40013400 	.word	0x40013400
 8043828:	40014000 	.word	0x40014000
 804382c:	40014400 	.word	0x40014400
 8043830:	40014800 	.word	0x40014800

08043834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8043834:	b480      	push	{r7}
 8043836:	b087      	sub	sp, #28
 8043838:	af00      	add	r7, sp, #0
 804383a:	60f8      	str	r0, [r7, #12]
 804383c:	60b9      	str	r1, [r7, #8]
 804383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8043840:	68fb      	ldr	r3, [r7, #12]
 8043842:	6a1b      	ldr	r3, [r3, #32]
 8043844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8043846:	68fb      	ldr	r3, [r7, #12]
 8043848:	6a1b      	ldr	r3, [r3, #32]
 804384a:	f023 0201 	bic.w	r2, r3, #1
 804384e:	68fb      	ldr	r3, [r7, #12]
 8043850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8043852:	68fb      	ldr	r3, [r7, #12]
 8043854:	699b      	ldr	r3, [r3, #24]
 8043856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8043858:	693b      	ldr	r3, [r7, #16]
 804385a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804385e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8043860:	687b      	ldr	r3, [r7, #4]
 8043862:	011b      	lsls	r3, r3, #4
 8043864:	693a      	ldr	r2, [r7, #16]
 8043866:	4313      	orrs	r3, r2
 8043868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 804386a:	697b      	ldr	r3, [r7, #20]
 804386c:	f023 030a 	bic.w	r3, r3, #10
 8043870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8043872:	697a      	ldr	r2, [r7, #20]
 8043874:	68bb      	ldr	r3, [r7, #8]
 8043876:	4313      	orrs	r3, r2
 8043878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 804387a:	68fb      	ldr	r3, [r7, #12]
 804387c:	693a      	ldr	r2, [r7, #16]
 804387e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8043880:	68fb      	ldr	r3, [r7, #12]
 8043882:	697a      	ldr	r2, [r7, #20]
 8043884:	621a      	str	r2, [r3, #32]
}
 8043886:	bf00      	nop
 8043888:	371c      	adds	r7, #28
 804388a:	46bd      	mov	sp, r7
 804388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043890:	4770      	bx	lr

08043892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8043892:	b480      	push	{r7}
 8043894:	b087      	sub	sp, #28
 8043896:	af00      	add	r7, sp, #0
 8043898:	60f8      	str	r0, [r7, #12]
 804389a:	60b9      	str	r1, [r7, #8]
 804389c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 804389e:	68fb      	ldr	r3, [r7, #12]
 80438a0:	6a1b      	ldr	r3, [r3, #32]
 80438a2:	f023 0210 	bic.w	r2, r3, #16
 80438a6:	68fb      	ldr	r3, [r7, #12]
 80438a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80438aa:	68fb      	ldr	r3, [r7, #12]
 80438ac:	699b      	ldr	r3, [r3, #24]
 80438ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80438b0:	68fb      	ldr	r3, [r7, #12]
 80438b2:	6a1b      	ldr	r3, [r3, #32]
 80438b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80438b6:	697b      	ldr	r3, [r7, #20]
 80438b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80438bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80438be:	687b      	ldr	r3, [r7, #4]
 80438c0:	031b      	lsls	r3, r3, #12
 80438c2:	697a      	ldr	r2, [r7, #20]
 80438c4:	4313      	orrs	r3, r2
 80438c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80438c8:	693b      	ldr	r3, [r7, #16]
 80438ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80438ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80438d0:	68bb      	ldr	r3, [r7, #8]
 80438d2:	011b      	lsls	r3, r3, #4
 80438d4:	693a      	ldr	r2, [r7, #16]
 80438d6:	4313      	orrs	r3, r2
 80438d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80438da:	68fb      	ldr	r3, [r7, #12]
 80438dc:	697a      	ldr	r2, [r7, #20]
 80438de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80438e0:	68fb      	ldr	r3, [r7, #12]
 80438e2:	693a      	ldr	r2, [r7, #16]
 80438e4:	621a      	str	r2, [r3, #32]
}
 80438e6:	bf00      	nop
 80438e8:	371c      	adds	r7, #28
 80438ea:	46bd      	mov	sp, r7
 80438ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438f0:	4770      	bx	lr

080438f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80438f2:	b480      	push	{r7}
 80438f4:	b085      	sub	sp, #20
 80438f6:	af00      	add	r7, sp, #0
 80438f8:	6078      	str	r0, [r7, #4]
 80438fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80438fc:	687b      	ldr	r3, [r7, #4]
 80438fe:	689b      	ldr	r3, [r3, #8]
 8043900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8043902:	68fb      	ldr	r3, [r7, #12]
 8043904:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8043908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804390c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804390e:	683a      	ldr	r2, [r7, #0]
 8043910:	68fb      	ldr	r3, [r7, #12]
 8043912:	4313      	orrs	r3, r2
 8043914:	f043 0307 	orr.w	r3, r3, #7
 8043918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804391a:	687b      	ldr	r3, [r7, #4]
 804391c:	68fa      	ldr	r2, [r7, #12]
 804391e:	609a      	str	r2, [r3, #8]
}
 8043920:	bf00      	nop
 8043922:	3714      	adds	r7, #20
 8043924:	46bd      	mov	sp, r7
 8043926:	f85d 7b04 	ldr.w	r7, [sp], #4
 804392a:	4770      	bx	lr

0804392c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 804392c:	b480      	push	{r7}
 804392e:	b087      	sub	sp, #28
 8043930:	af00      	add	r7, sp, #0
 8043932:	60f8      	str	r0, [r7, #12]
 8043934:	60b9      	str	r1, [r7, #8]
 8043936:	607a      	str	r2, [r7, #4]
 8043938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 804393a:	68fb      	ldr	r3, [r7, #12]
 804393c:	689b      	ldr	r3, [r3, #8]
 804393e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8043940:	697b      	ldr	r3, [r7, #20]
 8043942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8043946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8043948:	683b      	ldr	r3, [r7, #0]
 804394a:	021a      	lsls	r2, r3, #8
 804394c:	687b      	ldr	r3, [r7, #4]
 804394e:	431a      	orrs	r2, r3
 8043950:	68bb      	ldr	r3, [r7, #8]
 8043952:	4313      	orrs	r3, r2
 8043954:	697a      	ldr	r2, [r7, #20]
 8043956:	4313      	orrs	r3, r2
 8043958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804395a:	68fb      	ldr	r3, [r7, #12]
 804395c:	697a      	ldr	r2, [r7, #20]
 804395e:	609a      	str	r2, [r3, #8]
}
 8043960:	bf00      	nop
 8043962:	371c      	adds	r7, #28
 8043964:	46bd      	mov	sp, r7
 8043966:	f85d 7b04 	ldr.w	r7, [sp], #4
 804396a:	4770      	bx	lr

0804396c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 804396c:	b480      	push	{r7}
 804396e:	b085      	sub	sp, #20
 8043970:	af00      	add	r7, sp, #0
 8043972:	6078      	str	r0, [r7, #4]
 8043974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8043976:	687b      	ldr	r3, [r7, #4]
 8043978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804397c:	2b01      	cmp	r3, #1
 804397e:	d101      	bne.n	8043984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8043980:	2302      	movs	r3, #2
 8043982:	e068      	b.n	8043a56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8043984:	687b      	ldr	r3, [r7, #4]
 8043986:	2201      	movs	r2, #1
 8043988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 804398c:	687b      	ldr	r3, [r7, #4]
 804398e:	2202      	movs	r2, #2
 8043990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8043994:	687b      	ldr	r3, [r7, #4]
 8043996:	681b      	ldr	r3, [r3, #0]
 8043998:	685b      	ldr	r3, [r3, #4]
 804399a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 804399c:	687b      	ldr	r3, [r7, #4]
 804399e:	681b      	ldr	r3, [r3, #0]
 80439a0:	689b      	ldr	r3, [r3, #8]
 80439a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80439a4:	687b      	ldr	r3, [r7, #4]
 80439a6:	681b      	ldr	r3, [r3, #0]
 80439a8:	4a2e      	ldr	r2, [pc, #184]	; (8043a64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80439aa:	4293      	cmp	r3, r2
 80439ac:	d004      	beq.n	80439b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80439ae:	687b      	ldr	r3, [r7, #4]
 80439b0:	681b      	ldr	r3, [r3, #0]
 80439b2:	4a2d      	ldr	r2, [pc, #180]	; (8043a68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80439b4:	4293      	cmp	r3, r2
 80439b6:	d108      	bne.n	80439ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80439b8:	68fb      	ldr	r3, [r7, #12]
 80439ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80439be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80439c0:	683b      	ldr	r3, [r7, #0]
 80439c2:	685b      	ldr	r3, [r3, #4]
 80439c4:	68fa      	ldr	r2, [r7, #12]
 80439c6:	4313      	orrs	r3, r2
 80439c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80439ca:	68fb      	ldr	r3, [r7, #12]
 80439cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80439d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80439d2:	683b      	ldr	r3, [r7, #0]
 80439d4:	681b      	ldr	r3, [r3, #0]
 80439d6:	68fa      	ldr	r2, [r7, #12]
 80439d8:	4313      	orrs	r3, r2
 80439da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80439dc:	687b      	ldr	r3, [r7, #4]
 80439de:	681b      	ldr	r3, [r3, #0]
 80439e0:	68fa      	ldr	r2, [r7, #12]
 80439e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80439e4:	687b      	ldr	r3, [r7, #4]
 80439e6:	681b      	ldr	r3, [r3, #0]
 80439e8:	4a1e      	ldr	r2, [pc, #120]	; (8043a64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80439ea:	4293      	cmp	r3, r2
 80439ec:	d01d      	beq.n	8043a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80439ee:	687b      	ldr	r3, [r7, #4]
 80439f0:	681b      	ldr	r3, [r3, #0]
 80439f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80439f6:	d018      	beq.n	8043a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80439f8:	687b      	ldr	r3, [r7, #4]
 80439fa:	681b      	ldr	r3, [r3, #0]
 80439fc:	4a1b      	ldr	r2, [pc, #108]	; (8043a6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80439fe:	4293      	cmp	r3, r2
 8043a00:	d013      	beq.n	8043a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8043a02:	687b      	ldr	r3, [r7, #4]
 8043a04:	681b      	ldr	r3, [r3, #0]
 8043a06:	4a1a      	ldr	r2, [pc, #104]	; (8043a70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8043a08:	4293      	cmp	r3, r2
 8043a0a:	d00e      	beq.n	8043a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8043a0c:	687b      	ldr	r3, [r7, #4]
 8043a0e:	681b      	ldr	r3, [r3, #0]
 8043a10:	4a18      	ldr	r2, [pc, #96]	; (8043a74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8043a12:	4293      	cmp	r3, r2
 8043a14:	d009      	beq.n	8043a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8043a16:	687b      	ldr	r3, [r7, #4]
 8043a18:	681b      	ldr	r3, [r3, #0]
 8043a1a:	4a13      	ldr	r2, [pc, #76]	; (8043a68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8043a1c:	4293      	cmp	r3, r2
 8043a1e:	d004      	beq.n	8043a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8043a20:	687b      	ldr	r3, [r7, #4]
 8043a22:	681b      	ldr	r3, [r3, #0]
 8043a24:	4a14      	ldr	r2, [pc, #80]	; (8043a78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8043a26:	4293      	cmp	r3, r2
 8043a28:	d10c      	bne.n	8043a44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8043a2a:	68bb      	ldr	r3, [r7, #8]
 8043a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8043a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8043a32:	683b      	ldr	r3, [r7, #0]
 8043a34:	689b      	ldr	r3, [r3, #8]
 8043a36:	68ba      	ldr	r2, [r7, #8]
 8043a38:	4313      	orrs	r3, r2
 8043a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8043a3c:	687b      	ldr	r3, [r7, #4]
 8043a3e:	681b      	ldr	r3, [r3, #0]
 8043a40:	68ba      	ldr	r2, [r7, #8]
 8043a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8043a44:	687b      	ldr	r3, [r7, #4]
 8043a46:	2201      	movs	r2, #1
 8043a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8043a4c:	687b      	ldr	r3, [r7, #4]
 8043a4e:	2200      	movs	r2, #0
 8043a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8043a54:	2300      	movs	r3, #0
}
 8043a56:	4618      	mov	r0, r3
 8043a58:	3714      	adds	r7, #20
 8043a5a:	46bd      	mov	sp, r7
 8043a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043a60:	4770      	bx	lr
 8043a62:	bf00      	nop
 8043a64:	40012c00 	.word	0x40012c00
 8043a68:	40013400 	.word	0x40013400
 8043a6c:	40000400 	.word	0x40000400
 8043a70:	40000800 	.word	0x40000800
 8043a74:	40000c00 	.word	0x40000c00
 8043a78:	40014000 	.word	0x40014000

08043a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8043a7c:	b580      	push	{r7, lr}
 8043a7e:	b082      	sub	sp, #8
 8043a80:	af00      	add	r7, sp, #0
 8043a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8043a84:	687b      	ldr	r3, [r7, #4]
 8043a86:	2b00      	cmp	r3, #0
 8043a88:	d101      	bne.n	8043a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8043a8a:	2301      	movs	r3, #1
 8043a8c:	e042      	b.n	8043b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8043a8e:	687b      	ldr	r3, [r7, #4]
 8043a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043a94:	2b00      	cmp	r3, #0
 8043a96:	d106      	bne.n	8043aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8043a98:	687b      	ldr	r3, [r7, #4]
 8043a9a:	2200      	movs	r2, #0
 8043a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8043aa0:	6878      	ldr	r0, [r7, #4]
 8043aa2:	f7fd f891 	bl	8040bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8043aa6:	687b      	ldr	r3, [r7, #4]
 8043aa8:	2224      	movs	r2, #36	; 0x24
 8043aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8043aae:	687b      	ldr	r3, [r7, #4]
 8043ab0:	681b      	ldr	r3, [r3, #0]
 8043ab2:	681a      	ldr	r2, [r3, #0]
 8043ab4:	687b      	ldr	r3, [r7, #4]
 8043ab6:	681b      	ldr	r3, [r3, #0]
 8043ab8:	f022 0201 	bic.w	r2, r2, #1
 8043abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8043abe:	6878      	ldr	r0, [r7, #4]
 8043ac0:	f000 f8c2 	bl	8043c48 <UART_SetConfig>
 8043ac4:	4603      	mov	r3, r0
 8043ac6:	2b01      	cmp	r3, #1
 8043ac8:	d101      	bne.n	8043ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8043aca:	2301      	movs	r3, #1
 8043acc:	e022      	b.n	8043b14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8043ace:	687b      	ldr	r3, [r7, #4]
 8043ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043ad2:	2b00      	cmp	r3, #0
 8043ad4:	d002      	beq.n	8043adc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8043ad6:	6878      	ldr	r0, [r7, #4]
 8043ad8:	f000 fb84 	bl	80441e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8043adc:	687b      	ldr	r3, [r7, #4]
 8043ade:	681b      	ldr	r3, [r3, #0]
 8043ae0:	685a      	ldr	r2, [r3, #4]
 8043ae2:	687b      	ldr	r3, [r7, #4]
 8043ae4:	681b      	ldr	r3, [r3, #0]
 8043ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8043aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8043aec:	687b      	ldr	r3, [r7, #4]
 8043aee:	681b      	ldr	r3, [r3, #0]
 8043af0:	689a      	ldr	r2, [r3, #8]
 8043af2:	687b      	ldr	r3, [r7, #4]
 8043af4:	681b      	ldr	r3, [r3, #0]
 8043af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8043afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8043afc:	687b      	ldr	r3, [r7, #4]
 8043afe:	681b      	ldr	r3, [r3, #0]
 8043b00:	681a      	ldr	r2, [r3, #0]
 8043b02:	687b      	ldr	r3, [r7, #4]
 8043b04:	681b      	ldr	r3, [r3, #0]
 8043b06:	f042 0201 	orr.w	r2, r2, #1
 8043b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8043b0c:	6878      	ldr	r0, [r7, #4]
 8043b0e:	f000 fc0b 	bl	8044328 <UART_CheckIdleState>
 8043b12:	4603      	mov	r3, r0
}
 8043b14:	4618      	mov	r0, r3
 8043b16:	3708      	adds	r7, #8
 8043b18:	46bd      	mov	sp, r7
 8043b1a:	bd80      	pop	{r7, pc}

08043b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8043b1c:	b580      	push	{r7, lr}
 8043b1e:	b08a      	sub	sp, #40	; 0x28
 8043b20:	af02      	add	r7, sp, #8
 8043b22:	60f8      	str	r0, [r7, #12]
 8043b24:	60b9      	str	r1, [r7, #8]
 8043b26:	603b      	str	r3, [r7, #0]
 8043b28:	4613      	mov	r3, r2
 8043b2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8043b2c:	68fb      	ldr	r3, [r7, #12]
 8043b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043b32:	2b20      	cmp	r3, #32
 8043b34:	f040 8083 	bne.w	8043c3e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8043b38:	68bb      	ldr	r3, [r7, #8]
 8043b3a:	2b00      	cmp	r3, #0
 8043b3c:	d002      	beq.n	8043b44 <HAL_UART_Transmit+0x28>
 8043b3e:	88fb      	ldrh	r3, [r7, #6]
 8043b40:	2b00      	cmp	r3, #0
 8043b42:	d101      	bne.n	8043b48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8043b44:	2301      	movs	r3, #1
 8043b46:	e07b      	b.n	8043c40 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8043b48:	68fb      	ldr	r3, [r7, #12]
 8043b4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8043b4e:	2b01      	cmp	r3, #1
 8043b50:	d101      	bne.n	8043b56 <HAL_UART_Transmit+0x3a>
 8043b52:	2302      	movs	r3, #2
 8043b54:	e074      	b.n	8043c40 <HAL_UART_Transmit+0x124>
 8043b56:	68fb      	ldr	r3, [r7, #12]
 8043b58:	2201      	movs	r2, #1
 8043b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043b5e:	68fb      	ldr	r3, [r7, #12]
 8043b60:	2200      	movs	r2, #0
 8043b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8043b66:	68fb      	ldr	r3, [r7, #12]
 8043b68:	2221      	movs	r2, #33	; 0x21
 8043b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8043b6e:	f7fd f91f 	bl	8040db0 <HAL_GetTick>
 8043b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8043b74:	68fb      	ldr	r3, [r7, #12]
 8043b76:	88fa      	ldrh	r2, [r7, #6]
 8043b78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8043b7c:	68fb      	ldr	r3, [r7, #12]
 8043b7e:	88fa      	ldrh	r2, [r7, #6]
 8043b80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8043b84:	68fb      	ldr	r3, [r7, #12]
 8043b86:	689b      	ldr	r3, [r3, #8]
 8043b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043b8c:	d108      	bne.n	8043ba0 <HAL_UART_Transmit+0x84>
 8043b8e:	68fb      	ldr	r3, [r7, #12]
 8043b90:	691b      	ldr	r3, [r3, #16]
 8043b92:	2b00      	cmp	r3, #0
 8043b94:	d104      	bne.n	8043ba0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8043b96:	2300      	movs	r3, #0
 8043b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8043b9a:	68bb      	ldr	r3, [r7, #8]
 8043b9c:	61bb      	str	r3, [r7, #24]
 8043b9e:	e003      	b.n	8043ba8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8043ba0:	68bb      	ldr	r3, [r7, #8]
 8043ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8043ba4:	2300      	movs	r3, #0
 8043ba6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8043ba8:	68fb      	ldr	r3, [r7, #12]
 8043baa:	2200      	movs	r2, #0
 8043bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8043bb0:	e02c      	b.n	8043c0c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8043bb2:	683b      	ldr	r3, [r7, #0]
 8043bb4:	9300      	str	r3, [sp, #0]
 8043bb6:	697b      	ldr	r3, [r7, #20]
 8043bb8:	2200      	movs	r2, #0
 8043bba:	2180      	movs	r1, #128	; 0x80
 8043bbc:	68f8      	ldr	r0, [r7, #12]
 8043bbe:	f000 fbfe 	bl	80443be <UART_WaitOnFlagUntilTimeout>
 8043bc2:	4603      	mov	r3, r0
 8043bc4:	2b00      	cmp	r3, #0
 8043bc6:	d001      	beq.n	8043bcc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8043bc8:	2303      	movs	r3, #3
 8043bca:	e039      	b.n	8043c40 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8043bcc:	69fb      	ldr	r3, [r7, #28]
 8043bce:	2b00      	cmp	r3, #0
 8043bd0:	d10b      	bne.n	8043bea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8043bd2:	69bb      	ldr	r3, [r7, #24]
 8043bd4:	881b      	ldrh	r3, [r3, #0]
 8043bd6:	461a      	mov	r2, r3
 8043bd8:	68fb      	ldr	r3, [r7, #12]
 8043bda:	681b      	ldr	r3, [r3, #0]
 8043bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8043be0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8043be2:	69bb      	ldr	r3, [r7, #24]
 8043be4:	3302      	adds	r3, #2
 8043be6:	61bb      	str	r3, [r7, #24]
 8043be8:	e007      	b.n	8043bfa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8043bea:	69fb      	ldr	r3, [r7, #28]
 8043bec:	781a      	ldrb	r2, [r3, #0]
 8043bee:	68fb      	ldr	r3, [r7, #12]
 8043bf0:	681b      	ldr	r3, [r3, #0]
 8043bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8043bf4:	69fb      	ldr	r3, [r7, #28]
 8043bf6:	3301      	adds	r3, #1
 8043bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8043bfa:	68fb      	ldr	r3, [r7, #12]
 8043bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043c00:	b29b      	uxth	r3, r3
 8043c02:	3b01      	subs	r3, #1
 8043c04:	b29a      	uxth	r2, r3
 8043c06:	68fb      	ldr	r3, [r7, #12]
 8043c08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8043c0c:	68fb      	ldr	r3, [r7, #12]
 8043c0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043c12:	b29b      	uxth	r3, r3
 8043c14:	2b00      	cmp	r3, #0
 8043c16:	d1cc      	bne.n	8043bb2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8043c18:	683b      	ldr	r3, [r7, #0]
 8043c1a:	9300      	str	r3, [sp, #0]
 8043c1c:	697b      	ldr	r3, [r7, #20]
 8043c1e:	2200      	movs	r2, #0
 8043c20:	2140      	movs	r1, #64	; 0x40
 8043c22:	68f8      	ldr	r0, [r7, #12]
 8043c24:	f000 fbcb 	bl	80443be <UART_WaitOnFlagUntilTimeout>
 8043c28:	4603      	mov	r3, r0
 8043c2a:	2b00      	cmp	r3, #0
 8043c2c:	d001      	beq.n	8043c32 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8043c2e:	2303      	movs	r3, #3
 8043c30:	e006      	b.n	8043c40 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8043c32:	68fb      	ldr	r3, [r7, #12]
 8043c34:	2220      	movs	r2, #32
 8043c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8043c3a:	2300      	movs	r3, #0
 8043c3c:	e000      	b.n	8043c40 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8043c3e:	2302      	movs	r3, #2
  }
}
 8043c40:	4618      	mov	r0, r3
 8043c42:	3720      	adds	r7, #32
 8043c44:	46bd      	mov	sp, r7
 8043c46:	bd80      	pop	{r7, pc}

08043c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8043c48:	b5b0      	push	{r4, r5, r7, lr}
 8043c4a:	b088      	sub	sp, #32
 8043c4c:	af00      	add	r7, sp, #0
 8043c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8043c50:	2300      	movs	r3, #0
 8043c52:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8043c54:	687b      	ldr	r3, [r7, #4]
 8043c56:	689a      	ldr	r2, [r3, #8]
 8043c58:	687b      	ldr	r3, [r7, #4]
 8043c5a:	691b      	ldr	r3, [r3, #16]
 8043c5c:	431a      	orrs	r2, r3
 8043c5e:	687b      	ldr	r3, [r7, #4]
 8043c60:	695b      	ldr	r3, [r3, #20]
 8043c62:	431a      	orrs	r2, r3
 8043c64:	687b      	ldr	r3, [r7, #4]
 8043c66:	69db      	ldr	r3, [r3, #28]
 8043c68:	4313      	orrs	r3, r2
 8043c6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8043c6c:	687b      	ldr	r3, [r7, #4]
 8043c6e:	681b      	ldr	r3, [r3, #0]
 8043c70:	681a      	ldr	r2, [r3, #0]
 8043c72:	4bb1      	ldr	r3, [pc, #708]	; (8043f38 <UART_SetConfig+0x2f0>)
 8043c74:	4013      	ands	r3, r2
 8043c76:	687a      	ldr	r2, [r7, #4]
 8043c78:	6812      	ldr	r2, [r2, #0]
 8043c7a:	69f9      	ldr	r1, [r7, #28]
 8043c7c:	430b      	orrs	r3, r1
 8043c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8043c80:	687b      	ldr	r3, [r7, #4]
 8043c82:	681b      	ldr	r3, [r3, #0]
 8043c84:	685b      	ldr	r3, [r3, #4]
 8043c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8043c8a:	687b      	ldr	r3, [r7, #4]
 8043c8c:	68da      	ldr	r2, [r3, #12]
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	681b      	ldr	r3, [r3, #0]
 8043c92:	430a      	orrs	r2, r1
 8043c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8043c96:	687b      	ldr	r3, [r7, #4]
 8043c98:	699b      	ldr	r3, [r3, #24]
 8043c9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8043c9c:	687b      	ldr	r3, [r7, #4]
 8043c9e:	681b      	ldr	r3, [r3, #0]
 8043ca0:	4aa6      	ldr	r2, [pc, #664]	; (8043f3c <UART_SetConfig+0x2f4>)
 8043ca2:	4293      	cmp	r3, r2
 8043ca4:	d004      	beq.n	8043cb0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8043ca6:	687b      	ldr	r3, [r7, #4]
 8043ca8:	6a1b      	ldr	r3, [r3, #32]
 8043caa:	69fa      	ldr	r2, [r7, #28]
 8043cac:	4313      	orrs	r3, r2
 8043cae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8043cb0:	687b      	ldr	r3, [r7, #4]
 8043cb2:	681b      	ldr	r3, [r3, #0]
 8043cb4:	689b      	ldr	r3, [r3, #8]
 8043cb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8043cba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8043cbe:	687a      	ldr	r2, [r7, #4]
 8043cc0:	6812      	ldr	r2, [r2, #0]
 8043cc2:	69f9      	ldr	r1, [r7, #28]
 8043cc4:	430b      	orrs	r3, r1
 8043cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8043cc8:	687b      	ldr	r3, [r7, #4]
 8043cca:	681b      	ldr	r3, [r3, #0]
 8043ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043cce:	f023 010f 	bic.w	r1, r3, #15
 8043cd2:	687b      	ldr	r3, [r7, #4]
 8043cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043cd6:	687b      	ldr	r3, [r7, #4]
 8043cd8:	681b      	ldr	r3, [r3, #0]
 8043cda:	430a      	orrs	r2, r1
 8043cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8043cde:	687b      	ldr	r3, [r7, #4]
 8043ce0:	681b      	ldr	r3, [r3, #0]
 8043ce2:	4a97      	ldr	r2, [pc, #604]	; (8043f40 <UART_SetConfig+0x2f8>)
 8043ce4:	4293      	cmp	r3, r2
 8043ce6:	d120      	bne.n	8043d2a <UART_SetConfig+0xe2>
 8043ce8:	4b96      	ldr	r3, [pc, #600]	; (8043f44 <UART_SetConfig+0x2fc>)
 8043cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043cee:	f003 0303 	and.w	r3, r3, #3
 8043cf2:	2b03      	cmp	r3, #3
 8043cf4:	d816      	bhi.n	8043d24 <UART_SetConfig+0xdc>
 8043cf6:	a201      	add	r2, pc, #4	; (adr r2, 8043cfc <UART_SetConfig+0xb4>)
 8043cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043cfc:	08043d0d 	.word	0x08043d0d
 8043d00:	08043d19 	.word	0x08043d19
 8043d04:	08043d13 	.word	0x08043d13
 8043d08:	08043d1f 	.word	0x08043d1f
 8043d0c:	2301      	movs	r3, #1
 8043d0e:	76fb      	strb	r3, [r7, #27]
 8043d10:	e0e7      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d12:	2302      	movs	r3, #2
 8043d14:	76fb      	strb	r3, [r7, #27]
 8043d16:	e0e4      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d18:	2304      	movs	r3, #4
 8043d1a:	76fb      	strb	r3, [r7, #27]
 8043d1c:	e0e1      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d1e:	2308      	movs	r3, #8
 8043d20:	76fb      	strb	r3, [r7, #27]
 8043d22:	e0de      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d24:	2310      	movs	r3, #16
 8043d26:	76fb      	strb	r3, [r7, #27]
 8043d28:	e0db      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d2a:	687b      	ldr	r3, [r7, #4]
 8043d2c:	681b      	ldr	r3, [r3, #0]
 8043d2e:	4a86      	ldr	r2, [pc, #536]	; (8043f48 <UART_SetConfig+0x300>)
 8043d30:	4293      	cmp	r3, r2
 8043d32:	d132      	bne.n	8043d9a <UART_SetConfig+0x152>
 8043d34:	4b83      	ldr	r3, [pc, #524]	; (8043f44 <UART_SetConfig+0x2fc>)
 8043d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043d3a:	f003 030c 	and.w	r3, r3, #12
 8043d3e:	2b0c      	cmp	r3, #12
 8043d40:	d828      	bhi.n	8043d94 <UART_SetConfig+0x14c>
 8043d42:	a201      	add	r2, pc, #4	; (adr r2, 8043d48 <UART_SetConfig+0x100>)
 8043d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043d48:	08043d7d 	.word	0x08043d7d
 8043d4c:	08043d95 	.word	0x08043d95
 8043d50:	08043d95 	.word	0x08043d95
 8043d54:	08043d95 	.word	0x08043d95
 8043d58:	08043d89 	.word	0x08043d89
 8043d5c:	08043d95 	.word	0x08043d95
 8043d60:	08043d95 	.word	0x08043d95
 8043d64:	08043d95 	.word	0x08043d95
 8043d68:	08043d83 	.word	0x08043d83
 8043d6c:	08043d95 	.word	0x08043d95
 8043d70:	08043d95 	.word	0x08043d95
 8043d74:	08043d95 	.word	0x08043d95
 8043d78:	08043d8f 	.word	0x08043d8f
 8043d7c:	2300      	movs	r3, #0
 8043d7e:	76fb      	strb	r3, [r7, #27]
 8043d80:	e0af      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d82:	2302      	movs	r3, #2
 8043d84:	76fb      	strb	r3, [r7, #27]
 8043d86:	e0ac      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d88:	2304      	movs	r3, #4
 8043d8a:	76fb      	strb	r3, [r7, #27]
 8043d8c:	e0a9      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d8e:	2308      	movs	r3, #8
 8043d90:	76fb      	strb	r3, [r7, #27]
 8043d92:	e0a6      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d94:	2310      	movs	r3, #16
 8043d96:	76fb      	strb	r3, [r7, #27]
 8043d98:	e0a3      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043d9a:	687b      	ldr	r3, [r7, #4]
 8043d9c:	681b      	ldr	r3, [r3, #0]
 8043d9e:	4a6b      	ldr	r2, [pc, #428]	; (8043f4c <UART_SetConfig+0x304>)
 8043da0:	4293      	cmp	r3, r2
 8043da2:	d120      	bne.n	8043de6 <UART_SetConfig+0x19e>
 8043da4:	4b67      	ldr	r3, [pc, #412]	; (8043f44 <UART_SetConfig+0x2fc>)
 8043da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043daa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8043dae:	2b30      	cmp	r3, #48	; 0x30
 8043db0:	d013      	beq.n	8043dda <UART_SetConfig+0x192>
 8043db2:	2b30      	cmp	r3, #48	; 0x30
 8043db4:	d814      	bhi.n	8043de0 <UART_SetConfig+0x198>
 8043db6:	2b20      	cmp	r3, #32
 8043db8:	d009      	beq.n	8043dce <UART_SetConfig+0x186>
 8043dba:	2b20      	cmp	r3, #32
 8043dbc:	d810      	bhi.n	8043de0 <UART_SetConfig+0x198>
 8043dbe:	2b00      	cmp	r3, #0
 8043dc0:	d002      	beq.n	8043dc8 <UART_SetConfig+0x180>
 8043dc2:	2b10      	cmp	r3, #16
 8043dc4:	d006      	beq.n	8043dd4 <UART_SetConfig+0x18c>
 8043dc6:	e00b      	b.n	8043de0 <UART_SetConfig+0x198>
 8043dc8:	2300      	movs	r3, #0
 8043dca:	76fb      	strb	r3, [r7, #27]
 8043dcc:	e089      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043dce:	2302      	movs	r3, #2
 8043dd0:	76fb      	strb	r3, [r7, #27]
 8043dd2:	e086      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043dd4:	2304      	movs	r3, #4
 8043dd6:	76fb      	strb	r3, [r7, #27]
 8043dd8:	e083      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043dda:	2308      	movs	r3, #8
 8043ddc:	76fb      	strb	r3, [r7, #27]
 8043dde:	e080      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043de0:	2310      	movs	r3, #16
 8043de2:	76fb      	strb	r3, [r7, #27]
 8043de4:	e07d      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043de6:	687b      	ldr	r3, [r7, #4]
 8043de8:	681b      	ldr	r3, [r3, #0]
 8043dea:	4a59      	ldr	r2, [pc, #356]	; (8043f50 <UART_SetConfig+0x308>)
 8043dec:	4293      	cmp	r3, r2
 8043dee:	d120      	bne.n	8043e32 <UART_SetConfig+0x1ea>
 8043df0:	4b54      	ldr	r3, [pc, #336]	; (8043f44 <UART_SetConfig+0x2fc>)
 8043df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043df6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8043dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8043dfc:	d013      	beq.n	8043e26 <UART_SetConfig+0x1de>
 8043dfe:	2bc0      	cmp	r3, #192	; 0xc0
 8043e00:	d814      	bhi.n	8043e2c <UART_SetConfig+0x1e4>
 8043e02:	2b80      	cmp	r3, #128	; 0x80
 8043e04:	d009      	beq.n	8043e1a <UART_SetConfig+0x1d2>
 8043e06:	2b80      	cmp	r3, #128	; 0x80
 8043e08:	d810      	bhi.n	8043e2c <UART_SetConfig+0x1e4>
 8043e0a:	2b00      	cmp	r3, #0
 8043e0c:	d002      	beq.n	8043e14 <UART_SetConfig+0x1cc>
 8043e0e:	2b40      	cmp	r3, #64	; 0x40
 8043e10:	d006      	beq.n	8043e20 <UART_SetConfig+0x1d8>
 8043e12:	e00b      	b.n	8043e2c <UART_SetConfig+0x1e4>
 8043e14:	2300      	movs	r3, #0
 8043e16:	76fb      	strb	r3, [r7, #27]
 8043e18:	e063      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e1a:	2302      	movs	r3, #2
 8043e1c:	76fb      	strb	r3, [r7, #27]
 8043e1e:	e060      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e20:	2304      	movs	r3, #4
 8043e22:	76fb      	strb	r3, [r7, #27]
 8043e24:	e05d      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e26:	2308      	movs	r3, #8
 8043e28:	76fb      	strb	r3, [r7, #27]
 8043e2a:	e05a      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e2c:	2310      	movs	r3, #16
 8043e2e:	76fb      	strb	r3, [r7, #27]
 8043e30:	e057      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e32:	687b      	ldr	r3, [r7, #4]
 8043e34:	681b      	ldr	r3, [r3, #0]
 8043e36:	4a47      	ldr	r2, [pc, #284]	; (8043f54 <UART_SetConfig+0x30c>)
 8043e38:	4293      	cmp	r3, r2
 8043e3a:	d125      	bne.n	8043e88 <UART_SetConfig+0x240>
 8043e3c:	4b41      	ldr	r3, [pc, #260]	; (8043f44 <UART_SetConfig+0x2fc>)
 8043e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8043e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043e4a:	d017      	beq.n	8043e7c <UART_SetConfig+0x234>
 8043e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043e50:	d817      	bhi.n	8043e82 <UART_SetConfig+0x23a>
 8043e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043e56:	d00b      	beq.n	8043e70 <UART_SetConfig+0x228>
 8043e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043e5c:	d811      	bhi.n	8043e82 <UART_SetConfig+0x23a>
 8043e5e:	2b00      	cmp	r3, #0
 8043e60:	d003      	beq.n	8043e6a <UART_SetConfig+0x222>
 8043e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043e66:	d006      	beq.n	8043e76 <UART_SetConfig+0x22e>
 8043e68:	e00b      	b.n	8043e82 <UART_SetConfig+0x23a>
 8043e6a:	2300      	movs	r3, #0
 8043e6c:	76fb      	strb	r3, [r7, #27]
 8043e6e:	e038      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e70:	2302      	movs	r3, #2
 8043e72:	76fb      	strb	r3, [r7, #27]
 8043e74:	e035      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e76:	2304      	movs	r3, #4
 8043e78:	76fb      	strb	r3, [r7, #27]
 8043e7a:	e032      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e7c:	2308      	movs	r3, #8
 8043e7e:	76fb      	strb	r3, [r7, #27]
 8043e80:	e02f      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e82:	2310      	movs	r3, #16
 8043e84:	76fb      	strb	r3, [r7, #27]
 8043e86:	e02c      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043e88:	687b      	ldr	r3, [r7, #4]
 8043e8a:	681b      	ldr	r3, [r3, #0]
 8043e8c:	4a2b      	ldr	r2, [pc, #172]	; (8043f3c <UART_SetConfig+0x2f4>)
 8043e8e:	4293      	cmp	r3, r2
 8043e90:	d125      	bne.n	8043ede <UART_SetConfig+0x296>
 8043e92:	4b2c      	ldr	r3, [pc, #176]	; (8043f44 <UART_SetConfig+0x2fc>)
 8043e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8043e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043ea0:	d017      	beq.n	8043ed2 <UART_SetConfig+0x28a>
 8043ea2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043ea6:	d817      	bhi.n	8043ed8 <UART_SetConfig+0x290>
 8043ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043eac:	d00b      	beq.n	8043ec6 <UART_SetConfig+0x27e>
 8043eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043eb2:	d811      	bhi.n	8043ed8 <UART_SetConfig+0x290>
 8043eb4:	2b00      	cmp	r3, #0
 8043eb6:	d003      	beq.n	8043ec0 <UART_SetConfig+0x278>
 8043eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043ebc:	d006      	beq.n	8043ecc <UART_SetConfig+0x284>
 8043ebe:	e00b      	b.n	8043ed8 <UART_SetConfig+0x290>
 8043ec0:	2300      	movs	r3, #0
 8043ec2:	76fb      	strb	r3, [r7, #27]
 8043ec4:	e00d      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043ec6:	2302      	movs	r3, #2
 8043ec8:	76fb      	strb	r3, [r7, #27]
 8043eca:	e00a      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043ecc:	2304      	movs	r3, #4
 8043ece:	76fb      	strb	r3, [r7, #27]
 8043ed0:	e007      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043ed2:	2308      	movs	r3, #8
 8043ed4:	76fb      	strb	r3, [r7, #27]
 8043ed6:	e004      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043ed8:	2310      	movs	r3, #16
 8043eda:	76fb      	strb	r3, [r7, #27]
 8043edc:	e001      	b.n	8043ee2 <UART_SetConfig+0x29a>
 8043ede:	2310      	movs	r3, #16
 8043ee0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8043ee2:	687b      	ldr	r3, [r7, #4]
 8043ee4:	681b      	ldr	r3, [r3, #0]
 8043ee6:	4a15      	ldr	r2, [pc, #84]	; (8043f3c <UART_SetConfig+0x2f4>)
 8043ee8:	4293      	cmp	r3, r2
 8043eea:	f040 80a3 	bne.w	8044034 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8043eee:	7efb      	ldrb	r3, [r7, #27]
 8043ef0:	2b08      	cmp	r3, #8
 8043ef2:	d83b      	bhi.n	8043f6c <UART_SetConfig+0x324>
 8043ef4:	a201      	add	r2, pc, #4	; (adr r2, 8043efc <UART_SetConfig+0x2b4>)
 8043ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043efa:	bf00      	nop
 8043efc:	08043f21 	.word	0x08043f21
 8043f00:	08043f29 	.word	0x08043f29
 8043f04:	08043f31 	.word	0x08043f31
 8043f08:	08043f6d 	.word	0x08043f6d
 8043f0c:	08043f5d 	.word	0x08043f5d
 8043f10:	08043f6d 	.word	0x08043f6d
 8043f14:	08043f6d 	.word	0x08043f6d
 8043f18:	08043f6d 	.word	0x08043f6d
 8043f1c:	08043f65 	.word	0x08043f65
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043f20:	f7fe fc26 	bl	8042770 <HAL_RCC_GetPCLK1Freq>
 8043f24:	6178      	str	r0, [r7, #20]
        break;
 8043f26:	e026      	b.n	8043f76 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043f28:	f7fe fc36 	bl	8042798 <HAL_RCC_GetPCLK2Freq>
 8043f2c:	6178      	str	r0, [r7, #20]
        break;
 8043f2e:	e022      	b.n	8043f76 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043f30:	4b09      	ldr	r3, [pc, #36]	; (8043f58 <UART_SetConfig+0x310>)
 8043f32:	617b      	str	r3, [r7, #20]
        break;
 8043f34:	e01f      	b.n	8043f76 <UART_SetConfig+0x32e>
 8043f36:	bf00      	nop
 8043f38:	cfff69f3 	.word	0xcfff69f3
 8043f3c:	40008000 	.word	0x40008000
 8043f40:	40013800 	.word	0x40013800
 8043f44:	40021000 	.word	0x40021000
 8043f48:	40004400 	.word	0x40004400
 8043f4c:	40004800 	.word	0x40004800
 8043f50:	40004c00 	.word	0x40004c00
 8043f54:	40005000 	.word	0x40005000
 8043f58:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043f5c:	f7fe fb58 	bl	8042610 <HAL_RCC_GetSysClockFreq>
 8043f60:	6178      	str	r0, [r7, #20]
        break;
 8043f62:	e008      	b.n	8043f76 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043f68:	617b      	str	r3, [r7, #20]
        break;
 8043f6a:	e004      	b.n	8043f76 <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 8043f6c:	2300      	movs	r3, #0
 8043f6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8043f70:	2301      	movs	r3, #1
 8043f72:	76bb      	strb	r3, [r7, #26]
        break;
 8043f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8043f76:	697b      	ldr	r3, [r7, #20]
 8043f78:	2b00      	cmp	r3, #0
 8043f7a:	f000 811b 	beq.w	80441b4 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8043f7e:	687b      	ldr	r3, [r7, #4]
 8043f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043f82:	4a96      	ldr	r2, [pc, #600]	; (80441dc <UART_SetConfig+0x594>)
 8043f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043f88:	461a      	mov	r2, r3
 8043f8a:	697b      	ldr	r3, [r7, #20]
 8043f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8043f90:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8043f92:	687b      	ldr	r3, [r7, #4]
 8043f94:	685a      	ldr	r2, [r3, #4]
 8043f96:	4613      	mov	r3, r2
 8043f98:	005b      	lsls	r3, r3, #1
 8043f9a:	4413      	add	r3, r2
 8043f9c:	68ba      	ldr	r2, [r7, #8]
 8043f9e:	429a      	cmp	r2, r3
 8043fa0:	d305      	bcc.n	8043fae <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8043fa2:	687b      	ldr	r3, [r7, #4]
 8043fa4:	685b      	ldr	r3, [r3, #4]
 8043fa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8043fa8:	68ba      	ldr	r2, [r7, #8]
 8043faa:	429a      	cmp	r2, r3
 8043fac:	d902      	bls.n	8043fb4 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 8043fae:	2301      	movs	r3, #1
 8043fb0:	76bb      	strb	r3, [r7, #26]
 8043fb2:	e0ff      	b.n	80441b4 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8043fb4:	697b      	ldr	r3, [r7, #20]
 8043fb6:	4618      	mov	r0, r3
 8043fb8:	f04f 0100 	mov.w	r1, #0
 8043fbc:	687b      	ldr	r3, [r7, #4]
 8043fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043fc0:	4a86      	ldr	r2, [pc, #536]	; (80441dc <UART_SetConfig+0x594>)
 8043fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043fc6:	b29a      	uxth	r2, r3
 8043fc8:	f04f 0300 	mov.w	r3, #0
 8043fcc:	f7fc f934 	bl	8040238 <__aeabi_uldivmod>
 8043fd0:	4602      	mov	r2, r0
 8043fd2:	460b      	mov	r3, r1
 8043fd4:	4610      	mov	r0, r2
 8043fd6:	4619      	mov	r1, r3
 8043fd8:	f04f 0200 	mov.w	r2, #0
 8043fdc:	f04f 0300 	mov.w	r3, #0
 8043fe0:	020b      	lsls	r3, r1, #8
 8043fe2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8043fe6:	0202      	lsls	r2, r0, #8
 8043fe8:	6879      	ldr	r1, [r7, #4]
 8043fea:	6849      	ldr	r1, [r1, #4]
 8043fec:	0849      	lsrs	r1, r1, #1
 8043fee:	4608      	mov	r0, r1
 8043ff0:	f04f 0100 	mov.w	r1, #0
 8043ff4:	1814      	adds	r4, r2, r0
 8043ff6:	eb43 0501 	adc.w	r5, r3, r1
 8043ffa:	687b      	ldr	r3, [r7, #4]
 8043ffc:	685b      	ldr	r3, [r3, #4]
 8043ffe:	461a      	mov	r2, r3
 8044000:	f04f 0300 	mov.w	r3, #0
 8044004:	4620      	mov	r0, r4
 8044006:	4629      	mov	r1, r5
 8044008:	f7fc f916 	bl	8040238 <__aeabi_uldivmod>
 804400c:	4602      	mov	r2, r0
 804400e:	460b      	mov	r3, r1
 8044010:	4613      	mov	r3, r2
 8044012:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8044014:	693b      	ldr	r3, [r7, #16]
 8044016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804401a:	d308      	bcc.n	804402e <UART_SetConfig+0x3e6>
 804401c:	693b      	ldr	r3, [r7, #16]
 804401e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044022:	d204      	bcs.n	804402e <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8044024:	687b      	ldr	r3, [r7, #4]
 8044026:	681b      	ldr	r3, [r3, #0]
 8044028:	693a      	ldr	r2, [r7, #16]
 804402a:	60da      	str	r2, [r3, #12]
 804402c:	e0c2      	b.n	80441b4 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 804402e:	2301      	movs	r3, #1
 8044030:	76bb      	strb	r3, [r7, #26]
 8044032:	e0bf      	b.n	80441b4 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8044034:	687b      	ldr	r3, [r7, #4]
 8044036:	69db      	ldr	r3, [r3, #28]
 8044038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804403c:	d165      	bne.n	804410a <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 804403e:	7efb      	ldrb	r3, [r7, #27]
 8044040:	2b08      	cmp	r3, #8
 8044042:	d828      	bhi.n	8044096 <UART_SetConfig+0x44e>
 8044044:	a201      	add	r2, pc, #4	; (adr r2, 804404c <UART_SetConfig+0x404>)
 8044046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804404a:	bf00      	nop
 804404c:	08044071 	.word	0x08044071
 8044050:	08044079 	.word	0x08044079
 8044054:	08044081 	.word	0x08044081
 8044058:	08044097 	.word	0x08044097
 804405c:	08044087 	.word	0x08044087
 8044060:	08044097 	.word	0x08044097
 8044064:	08044097 	.word	0x08044097
 8044068:	08044097 	.word	0x08044097
 804406c:	0804408f 	.word	0x0804408f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8044070:	f7fe fb7e 	bl	8042770 <HAL_RCC_GetPCLK1Freq>
 8044074:	6178      	str	r0, [r7, #20]
        break;
 8044076:	e013      	b.n	80440a0 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8044078:	f7fe fb8e 	bl	8042798 <HAL_RCC_GetPCLK2Freq>
 804407c:	6178      	str	r0, [r7, #20]
        break;
 804407e:	e00f      	b.n	80440a0 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8044080:	4b57      	ldr	r3, [pc, #348]	; (80441e0 <UART_SetConfig+0x598>)
 8044082:	617b      	str	r3, [r7, #20]
        break;
 8044084:	e00c      	b.n	80440a0 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8044086:	f7fe fac3 	bl	8042610 <HAL_RCC_GetSysClockFreq>
 804408a:	6178      	str	r0, [r7, #20]
        break;
 804408c:	e008      	b.n	80440a0 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804408e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044092:	617b      	str	r3, [r7, #20]
        break;
 8044094:	e004      	b.n	80440a0 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8044096:	2300      	movs	r3, #0
 8044098:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804409a:	2301      	movs	r3, #1
 804409c:	76bb      	strb	r3, [r7, #26]
        break;
 804409e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80440a0:	697b      	ldr	r3, [r7, #20]
 80440a2:	2b00      	cmp	r3, #0
 80440a4:	f000 8086 	beq.w	80441b4 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80440a8:	687b      	ldr	r3, [r7, #4]
 80440aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80440ac:	4a4b      	ldr	r2, [pc, #300]	; (80441dc <UART_SetConfig+0x594>)
 80440ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80440b2:	461a      	mov	r2, r3
 80440b4:	697b      	ldr	r3, [r7, #20]
 80440b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80440ba:	005a      	lsls	r2, r3, #1
 80440bc:	687b      	ldr	r3, [r7, #4]
 80440be:	685b      	ldr	r3, [r3, #4]
 80440c0:	085b      	lsrs	r3, r3, #1
 80440c2:	441a      	add	r2, r3
 80440c4:	687b      	ldr	r3, [r7, #4]
 80440c6:	685b      	ldr	r3, [r3, #4]
 80440c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80440cc:	b29b      	uxth	r3, r3
 80440ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80440d0:	693b      	ldr	r3, [r7, #16]
 80440d2:	2b0f      	cmp	r3, #15
 80440d4:	d916      	bls.n	8044104 <UART_SetConfig+0x4bc>
 80440d6:	693b      	ldr	r3, [r7, #16]
 80440d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80440dc:	d212      	bcs.n	8044104 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80440de:	693b      	ldr	r3, [r7, #16]
 80440e0:	b29b      	uxth	r3, r3
 80440e2:	f023 030f 	bic.w	r3, r3, #15
 80440e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80440e8:	693b      	ldr	r3, [r7, #16]
 80440ea:	085b      	lsrs	r3, r3, #1
 80440ec:	b29b      	uxth	r3, r3
 80440ee:	f003 0307 	and.w	r3, r3, #7
 80440f2:	b29a      	uxth	r2, r3
 80440f4:	89fb      	ldrh	r3, [r7, #14]
 80440f6:	4313      	orrs	r3, r2
 80440f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80440fa:	687b      	ldr	r3, [r7, #4]
 80440fc:	681b      	ldr	r3, [r3, #0]
 80440fe:	89fa      	ldrh	r2, [r7, #14]
 8044100:	60da      	str	r2, [r3, #12]
 8044102:	e057      	b.n	80441b4 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8044104:	2301      	movs	r3, #1
 8044106:	76bb      	strb	r3, [r7, #26]
 8044108:	e054      	b.n	80441b4 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 804410a:	7efb      	ldrb	r3, [r7, #27]
 804410c:	2b08      	cmp	r3, #8
 804410e:	d828      	bhi.n	8044162 <UART_SetConfig+0x51a>
 8044110:	a201      	add	r2, pc, #4	; (adr r2, 8044118 <UART_SetConfig+0x4d0>)
 8044112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044116:	bf00      	nop
 8044118:	0804413d 	.word	0x0804413d
 804411c:	08044145 	.word	0x08044145
 8044120:	0804414d 	.word	0x0804414d
 8044124:	08044163 	.word	0x08044163
 8044128:	08044153 	.word	0x08044153
 804412c:	08044163 	.word	0x08044163
 8044130:	08044163 	.word	0x08044163
 8044134:	08044163 	.word	0x08044163
 8044138:	0804415b 	.word	0x0804415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804413c:	f7fe fb18 	bl	8042770 <HAL_RCC_GetPCLK1Freq>
 8044140:	6178      	str	r0, [r7, #20]
        break;
 8044142:	e013      	b.n	804416c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8044144:	f7fe fb28 	bl	8042798 <HAL_RCC_GetPCLK2Freq>
 8044148:	6178      	str	r0, [r7, #20]
        break;
 804414a:	e00f      	b.n	804416c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804414c:	4b24      	ldr	r3, [pc, #144]	; (80441e0 <UART_SetConfig+0x598>)
 804414e:	617b      	str	r3, [r7, #20]
        break;
 8044150:	e00c      	b.n	804416c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8044152:	f7fe fa5d 	bl	8042610 <HAL_RCC_GetSysClockFreq>
 8044156:	6178      	str	r0, [r7, #20]
        break;
 8044158:	e008      	b.n	804416c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804415a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804415e:	617b      	str	r3, [r7, #20]
        break;
 8044160:	e004      	b.n	804416c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8044162:	2300      	movs	r3, #0
 8044164:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8044166:	2301      	movs	r3, #1
 8044168:	76bb      	strb	r3, [r7, #26]
        break;
 804416a:	bf00      	nop
    }

    if (pclk != 0U)
 804416c:	697b      	ldr	r3, [r7, #20]
 804416e:	2b00      	cmp	r3, #0
 8044170:	d020      	beq.n	80441b4 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8044172:	687b      	ldr	r3, [r7, #4]
 8044174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044176:	4a19      	ldr	r2, [pc, #100]	; (80441dc <UART_SetConfig+0x594>)
 8044178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804417c:	461a      	mov	r2, r3
 804417e:	697b      	ldr	r3, [r7, #20]
 8044180:	fbb3 f2f2 	udiv	r2, r3, r2
 8044184:	687b      	ldr	r3, [r7, #4]
 8044186:	685b      	ldr	r3, [r3, #4]
 8044188:	085b      	lsrs	r3, r3, #1
 804418a:	441a      	add	r2, r3
 804418c:	687b      	ldr	r3, [r7, #4]
 804418e:	685b      	ldr	r3, [r3, #4]
 8044190:	fbb2 f3f3 	udiv	r3, r2, r3
 8044194:	b29b      	uxth	r3, r3
 8044196:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8044198:	693b      	ldr	r3, [r7, #16]
 804419a:	2b0f      	cmp	r3, #15
 804419c:	d908      	bls.n	80441b0 <UART_SetConfig+0x568>
 804419e:	693b      	ldr	r3, [r7, #16]
 80441a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80441a4:	d204      	bcs.n	80441b0 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 80441a6:	687b      	ldr	r3, [r7, #4]
 80441a8:	681b      	ldr	r3, [r3, #0]
 80441aa:	693a      	ldr	r2, [r7, #16]
 80441ac:	60da      	str	r2, [r3, #12]
 80441ae:	e001      	b.n	80441b4 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 80441b0:	2301      	movs	r3, #1
 80441b2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80441b4:	687b      	ldr	r3, [r7, #4]
 80441b6:	2201      	movs	r2, #1
 80441b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80441bc:	687b      	ldr	r3, [r7, #4]
 80441be:	2201      	movs	r2, #1
 80441c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80441c4:	687b      	ldr	r3, [r7, #4]
 80441c6:	2200      	movs	r2, #0
 80441c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80441ca:	687b      	ldr	r3, [r7, #4]
 80441cc:	2200      	movs	r2, #0
 80441ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80441d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80441d2:	4618      	mov	r0, r3
 80441d4:	3720      	adds	r7, #32
 80441d6:	46bd      	mov	sp, r7
 80441d8:	bdb0      	pop	{r4, r5, r7, pc}
 80441da:	bf00      	nop
 80441dc:	0804568c 	.word	0x0804568c
 80441e0:	00f42400 	.word	0x00f42400

080441e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80441e4:	b480      	push	{r7}
 80441e6:	b083      	sub	sp, #12
 80441e8:	af00      	add	r7, sp, #0
 80441ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80441ec:	687b      	ldr	r3, [r7, #4]
 80441ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80441f0:	f003 0301 	and.w	r3, r3, #1
 80441f4:	2b00      	cmp	r3, #0
 80441f6:	d00a      	beq.n	804420e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80441f8:	687b      	ldr	r3, [r7, #4]
 80441fa:	681b      	ldr	r3, [r3, #0]
 80441fc:	685b      	ldr	r3, [r3, #4]
 80441fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8044202:	687b      	ldr	r3, [r7, #4]
 8044204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044206:	687b      	ldr	r3, [r7, #4]
 8044208:	681b      	ldr	r3, [r3, #0]
 804420a:	430a      	orrs	r2, r1
 804420c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804420e:	687b      	ldr	r3, [r7, #4]
 8044210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044212:	f003 0302 	and.w	r3, r3, #2
 8044216:	2b00      	cmp	r3, #0
 8044218:	d00a      	beq.n	8044230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804421a:	687b      	ldr	r3, [r7, #4]
 804421c:	681b      	ldr	r3, [r3, #0]
 804421e:	685b      	ldr	r3, [r3, #4]
 8044220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8044224:	687b      	ldr	r3, [r7, #4]
 8044226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8044228:	687b      	ldr	r3, [r7, #4]
 804422a:	681b      	ldr	r3, [r3, #0]
 804422c:	430a      	orrs	r2, r1
 804422e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8044230:	687b      	ldr	r3, [r7, #4]
 8044232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044234:	f003 0304 	and.w	r3, r3, #4
 8044238:	2b00      	cmp	r3, #0
 804423a:	d00a      	beq.n	8044252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 804423c:	687b      	ldr	r3, [r7, #4]
 804423e:	681b      	ldr	r3, [r3, #0]
 8044240:	685b      	ldr	r3, [r3, #4]
 8044242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8044246:	687b      	ldr	r3, [r7, #4]
 8044248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804424a:	687b      	ldr	r3, [r7, #4]
 804424c:	681b      	ldr	r3, [r3, #0]
 804424e:	430a      	orrs	r2, r1
 8044250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8044252:	687b      	ldr	r3, [r7, #4]
 8044254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044256:	f003 0308 	and.w	r3, r3, #8
 804425a:	2b00      	cmp	r3, #0
 804425c:	d00a      	beq.n	8044274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804425e:	687b      	ldr	r3, [r7, #4]
 8044260:	681b      	ldr	r3, [r3, #0]
 8044262:	685b      	ldr	r3, [r3, #4]
 8044264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8044268:	687b      	ldr	r3, [r7, #4]
 804426a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804426c:	687b      	ldr	r3, [r7, #4]
 804426e:	681b      	ldr	r3, [r3, #0]
 8044270:	430a      	orrs	r2, r1
 8044272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8044274:	687b      	ldr	r3, [r7, #4]
 8044276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044278:	f003 0310 	and.w	r3, r3, #16
 804427c:	2b00      	cmp	r3, #0
 804427e:	d00a      	beq.n	8044296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8044280:	687b      	ldr	r3, [r7, #4]
 8044282:	681b      	ldr	r3, [r3, #0]
 8044284:	689b      	ldr	r3, [r3, #8]
 8044286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804428a:	687b      	ldr	r3, [r7, #4]
 804428c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804428e:	687b      	ldr	r3, [r7, #4]
 8044290:	681b      	ldr	r3, [r3, #0]
 8044292:	430a      	orrs	r2, r1
 8044294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8044296:	687b      	ldr	r3, [r7, #4]
 8044298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804429a:	f003 0320 	and.w	r3, r3, #32
 804429e:	2b00      	cmp	r3, #0
 80442a0:	d00a      	beq.n	80442b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80442a2:	687b      	ldr	r3, [r7, #4]
 80442a4:	681b      	ldr	r3, [r3, #0]
 80442a6:	689b      	ldr	r3, [r3, #8]
 80442a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80442ac:	687b      	ldr	r3, [r7, #4]
 80442ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80442b0:	687b      	ldr	r3, [r7, #4]
 80442b2:	681b      	ldr	r3, [r3, #0]
 80442b4:	430a      	orrs	r2, r1
 80442b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80442b8:	687b      	ldr	r3, [r7, #4]
 80442ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80442bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80442c0:	2b00      	cmp	r3, #0
 80442c2:	d01a      	beq.n	80442fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80442c4:	687b      	ldr	r3, [r7, #4]
 80442c6:	681b      	ldr	r3, [r3, #0]
 80442c8:	685b      	ldr	r3, [r3, #4]
 80442ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80442ce:	687b      	ldr	r3, [r7, #4]
 80442d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80442d2:	687b      	ldr	r3, [r7, #4]
 80442d4:	681b      	ldr	r3, [r3, #0]
 80442d6:	430a      	orrs	r2, r1
 80442d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80442da:	687b      	ldr	r3, [r7, #4]
 80442dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80442de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80442e2:	d10a      	bne.n	80442fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80442e4:	687b      	ldr	r3, [r7, #4]
 80442e6:	681b      	ldr	r3, [r3, #0]
 80442e8:	685b      	ldr	r3, [r3, #4]
 80442ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80442ee:	687b      	ldr	r3, [r7, #4]
 80442f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80442f2:	687b      	ldr	r3, [r7, #4]
 80442f4:	681b      	ldr	r3, [r3, #0]
 80442f6:	430a      	orrs	r2, r1
 80442f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80442fa:	687b      	ldr	r3, [r7, #4]
 80442fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80442fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044302:	2b00      	cmp	r3, #0
 8044304:	d00a      	beq.n	804431c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8044306:	687b      	ldr	r3, [r7, #4]
 8044308:	681b      	ldr	r3, [r3, #0]
 804430a:	685b      	ldr	r3, [r3, #4]
 804430c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8044310:	687b      	ldr	r3, [r7, #4]
 8044312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8044314:	687b      	ldr	r3, [r7, #4]
 8044316:	681b      	ldr	r3, [r3, #0]
 8044318:	430a      	orrs	r2, r1
 804431a:	605a      	str	r2, [r3, #4]
  }
}
 804431c:	bf00      	nop
 804431e:	370c      	adds	r7, #12
 8044320:	46bd      	mov	sp, r7
 8044322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044326:	4770      	bx	lr

08044328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8044328:	b580      	push	{r7, lr}
 804432a:	b086      	sub	sp, #24
 804432c:	af02      	add	r7, sp, #8
 804432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8044330:	687b      	ldr	r3, [r7, #4]
 8044332:	2200      	movs	r2, #0
 8044334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8044338:	f7fc fd3a 	bl	8040db0 <HAL_GetTick>
 804433c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 804433e:	687b      	ldr	r3, [r7, #4]
 8044340:	681b      	ldr	r3, [r3, #0]
 8044342:	681b      	ldr	r3, [r3, #0]
 8044344:	f003 0308 	and.w	r3, r3, #8
 8044348:	2b08      	cmp	r3, #8
 804434a:	d10e      	bne.n	804436a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804434c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8044350:	9300      	str	r3, [sp, #0]
 8044352:	68fb      	ldr	r3, [r7, #12]
 8044354:	2200      	movs	r2, #0
 8044356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804435a:	6878      	ldr	r0, [r7, #4]
 804435c:	f000 f82f 	bl	80443be <UART_WaitOnFlagUntilTimeout>
 8044360:	4603      	mov	r3, r0
 8044362:	2b00      	cmp	r3, #0
 8044364:	d001      	beq.n	804436a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8044366:	2303      	movs	r3, #3
 8044368:	e025      	b.n	80443b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 804436a:	687b      	ldr	r3, [r7, #4]
 804436c:	681b      	ldr	r3, [r3, #0]
 804436e:	681b      	ldr	r3, [r3, #0]
 8044370:	f003 0304 	and.w	r3, r3, #4
 8044374:	2b04      	cmp	r3, #4
 8044376:	d10e      	bne.n	8044396 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8044378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804437c:	9300      	str	r3, [sp, #0]
 804437e:	68fb      	ldr	r3, [r7, #12]
 8044380:	2200      	movs	r2, #0
 8044382:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8044386:	6878      	ldr	r0, [r7, #4]
 8044388:	f000 f819 	bl	80443be <UART_WaitOnFlagUntilTimeout>
 804438c:	4603      	mov	r3, r0
 804438e:	2b00      	cmp	r3, #0
 8044390:	d001      	beq.n	8044396 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8044392:	2303      	movs	r3, #3
 8044394:	e00f      	b.n	80443b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8044396:	687b      	ldr	r3, [r7, #4]
 8044398:	2220      	movs	r2, #32
 804439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 804439e:	687b      	ldr	r3, [r7, #4]
 80443a0:	2220      	movs	r2, #32
 80443a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80443a6:	687b      	ldr	r3, [r7, #4]
 80443a8:	2200      	movs	r2, #0
 80443aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80443ac:	687b      	ldr	r3, [r7, #4]
 80443ae:	2200      	movs	r2, #0
 80443b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80443b4:	2300      	movs	r3, #0
}
 80443b6:	4618      	mov	r0, r3
 80443b8:	3710      	adds	r7, #16
 80443ba:	46bd      	mov	sp, r7
 80443bc:	bd80      	pop	{r7, pc}

080443be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80443be:	b580      	push	{r7, lr}
 80443c0:	b084      	sub	sp, #16
 80443c2:	af00      	add	r7, sp, #0
 80443c4:	60f8      	str	r0, [r7, #12]
 80443c6:	60b9      	str	r1, [r7, #8]
 80443c8:	603b      	str	r3, [r7, #0]
 80443ca:	4613      	mov	r3, r2
 80443cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80443ce:	e062      	b.n	8044496 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80443d0:	69bb      	ldr	r3, [r7, #24]
 80443d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80443d6:	d05e      	beq.n	8044496 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80443d8:	f7fc fcea 	bl	8040db0 <HAL_GetTick>
 80443dc:	4602      	mov	r2, r0
 80443de:	683b      	ldr	r3, [r7, #0]
 80443e0:	1ad3      	subs	r3, r2, r3
 80443e2:	69ba      	ldr	r2, [r7, #24]
 80443e4:	429a      	cmp	r2, r3
 80443e6:	d302      	bcc.n	80443ee <UART_WaitOnFlagUntilTimeout+0x30>
 80443e8:	69bb      	ldr	r3, [r7, #24]
 80443ea:	2b00      	cmp	r3, #0
 80443ec:	d11d      	bne.n	804442a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80443ee:	68fb      	ldr	r3, [r7, #12]
 80443f0:	681b      	ldr	r3, [r3, #0]
 80443f2:	681a      	ldr	r2, [r3, #0]
 80443f4:	68fb      	ldr	r3, [r7, #12]
 80443f6:	681b      	ldr	r3, [r3, #0]
 80443f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80443fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80443fe:	68fb      	ldr	r3, [r7, #12]
 8044400:	681b      	ldr	r3, [r3, #0]
 8044402:	689a      	ldr	r2, [r3, #8]
 8044404:	68fb      	ldr	r3, [r7, #12]
 8044406:	681b      	ldr	r3, [r3, #0]
 8044408:	f022 0201 	bic.w	r2, r2, #1
 804440c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 804440e:	68fb      	ldr	r3, [r7, #12]
 8044410:	2220      	movs	r2, #32
 8044412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8044416:	68fb      	ldr	r3, [r7, #12]
 8044418:	2220      	movs	r2, #32
 804441a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 804441e:	68fb      	ldr	r3, [r7, #12]
 8044420:	2200      	movs	r2, #0
 8044422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8044426:	2303      	movs	r3, #3
 8044428:	e045      	b.n	80444b6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 804442a:	68fb      	ldr	r3, [r7, #12]
 804442c:	681b      	ldr	r3, [r3, #0]
 804442e:	681b      	ldr	r3, [r3, #0]
 8044430:	f003 0304 	and.w	r3, r3, #4
 8044434:	2b00      	cmp	r3, #0
 8044436:	d02e      	beq.n	8044496 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8044438:	68fb      	ldr	r3, [r7, #12]
 804443a:	681b      	ldr	r3, [r3, #0]
 804443c:	69db      	ldr	r3, [r3, #28]
 804443e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8044442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8044446:	d126      	bne.n	8044496 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8044448:	68fb      	ldr	r3, [r7, #12]
 804444a:	681b      	ldr	r3, [r3, #0]
 804444c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8044450:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8044452:	68fb      	ldr	r3, [r7, #12]
 8044454:	681b      	ldr	r3, [r3, #0]
 8044456:	681a      	ldr	r2, [r3, #0]
 8044458:	68fb      	ldr	r3, [r7, #12]
 804445a:	681b      	ldr	r3, [r3, #0]
 804445c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8044460:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8044462:	68fb      	ldr	r3, [r7, #12]
 8044464:	681b      	ldr	r3, [r3, #0]
 8044466:	689a      	ldr	r2, [r3, #8]
 8044468:	68fb      	ldr	r3, [r7, #12]
 804446a:	681b      	ldr	r3, [r3, #0]
 804446c:	f022 0201 	bic.w	r2, r2, #1
 8044470:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8044472:	68fb      	ldr	r3, [r7, #12]
 8044474:	2220      	movs	r2, #32
 8044476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 804447a:	68fb      	ldr	r3, [r7, #12]
 804447c:	2220      	movs	r2, #32
 804447e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8044482:	68fb      	ldr	r3, [r7, #12]
 8044484:	2220      	movs	r2, #32
 8044486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 804448a:	68fb      	ldr	r3, [r7, #12]
 804448c:	2200      	movs	r2, #0
 804448e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8044492:	2303      	movs	r3, #3
 8044494:	e00f      	b.n	80444b6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8044496:	68fb      	ldr	r3, [r7, #12]
 8044498:	681b      	ldr	r3, [r3, #0]
 804449a:	69da      	ldr	r2, [r3, #28]
 804449c:	68bb      	ldr	r3, [r7, #8]
 804449e:	4013      	ands	r3, r2
 80444a0:	68ba      	ldr	r2, [r7, #8]
 80444a2:	429a      	cmp	r2, r3
 80444a4:	bf0c      	ite	eq
 80444a6:	2301      	moveq	r3, #1
 80444a8:	2300      	movne	r3, #0
 80444aa:	b2db      	uxtb	r3, r3
 80444ac:	461a      	mov	r2, r3
 80444ae:	79fb      	ldrb	r3, [r7, #7]
 80444b0:	429a      	cmp	r2, r3
 80444b2:	d08d      	beq.n	80443d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80444b4:	2300      	movs	r3, #0
}
 80444b6:	4618      	mov	r0, r3
 80444b8:	3710      	adds	r7, #16
 80444ba:	46bd      	mov	sp, r7
 80444bc:	bd80      	pop	{r7, pc}

080444be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80444be:	b480      	push	{r7}
 80444c0:	b085      	sub	sp, #20
 80444c2:	af00      	add	r7, sp, #0
 80444c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80444c6:	687b      	ldr	r3, [r7, #4]
 80444c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80444cc:	2b01      	cmp	r3, #1
 80444ce:	d101      	bne.n	80444d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80444d0:	2302      	movs	r3, #2
 80444d2:	e027      	b.n	8044524 <HAL_UARTEx_DisableFifoMode+0x66>
 80444d4:	687b      	ldr	r3, [r7, #4]
 80444d6:	2201      	movs	r2, #1
 80444d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80444dc:	687b      	ldr	r3, [r7, #4]
 80444de:	2224      	movs	r2, #36	; 0x24
 80444e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80444e4:	687b      	ldr	r3, [r7, #4]
 80444e6:	681b      	ldr	r3, [r3, #0]
 80444e8:	681b      	ldr	r3, [r3, #0]
 80444ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80444ec:	687b      	ldr	r3, [r7, #4]
 80444ee:	681b      	ldr	r3, [r3, #0]
 80444f0:	681a      	ldr	r2, [r3, #0]
 80444f2:	687b      	ldr	r3, [r7, #4]
 80444f4:	681b      	ldr	r3, [r3, #0]
 80444f6:	f022 0201 	bic.w	r2, r2, #1
 80444fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80444fc:	68fb      	ldr	r3, [r7, #12]
 80444fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8044502:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8044504:	687b      	ldr	r3, [r7, #4]
 8044506:	2200      	movs	r2, #0
 8044508:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804450a:	687b      	ldr	r3, [r7, #4]
 804450c:	681b      	ldr	r3, [r3, #0]
 804450e:	68fa      	ldr	r2, [r7, #12]
 8044510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8044512:	687b      	ldr	r3, [r7, #4]
 8044514:	2220      	movs	r2, #32
 8044516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804451a:	687b      	ldr	r3, [r7, #4]
 804451c:	2200      	movs	r2, #0
 804451e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8044522:	2300      	movs	r3, #0
}
 8044524:	4618      	mov	r0, r3
 8044526:	3714      	adds	r7, #20
 8044528:	46bd      	mov	sp, r7
 804452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804452e:	4770      	bx	lr

08044530 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8044530:	b580      	push	{r7, lr}
 8044532:	b084      	sub	sp, #16
 8044534:	af00      	add	r7, sp, #0
 8044536:	6078      	str	r0, [r7, #4]
 8044538:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804453a:	687b      	ldr	r3, [r7, #4]
 804453c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8044540:	2b01      	cmp	r3, #1
 8044542:	d101      	bne.n	8044548 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8044544:	2302      	movs	r3, #2
 8044546:	e02d      	b.n	80445a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8044548:	687b      	ldr	r3, [r7, #4]
 804454a:	2201      	movs	r2, #1
 804454c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8044550:	687b      	ldr	r3, [r7, #4]
 8044552:	2224      	movs	r2, #36	; 0x24
 8044554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8044558:	687b      	ldr	r3, [r7, #4]
 804455a:	681b      	ldr	r3, [r3, #0]
 804455c:	681b      	ldr	r3, [r3, #0]
 804455e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8044560:	687b      	ldr	r3, [r7, #4]
 8044562:	681b      	ldr	r3, [r3, #0]
 8044564:	681a      	ldr	r2, [r3, #0]
 8044566:	687b      	ldr	r3, [r7, #4]
 8044568:	681b      	ldr	r3, [r3, #0]
 804456a:	f022 0201 	bic.w	r2, r2, #1
 804456e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8044570:	687b      	ldr	r3, [r7, #4]
 8044572:	681b      	ldr	r3, [r3, #0]
 8044574:	689b      	ldr	r3, [r3, #8]
 8044576:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 804457a:	687b      	ldr	r3, [r7, #4]
 804457c:	681b      	ldr	r3, [r3, #0]
 804457e:	683a      	ldr	r2, [r7, #0]
 8044580:	430a      	orrs	r2, r1
 8044582:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8044584:	6878      	ldr	r0, [r7, #4]
 8044586:	f000 f84f 	bl	8044628 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804458a:	687b      	ldr	r3, [r7, #4]
 804458c:	681b      	ldr	r3, [r3, #0]
 804458e:	68fa      	ldr	r2, [r7, #12]
 8044590:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8044592:	687b      	ldr	r3, [r7, #4]
 8044594:	2220      	movs	r2, #32
 8044596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804459a:	687b      	ldr	r3, [r7, #4]
 804459c:	2200      	movs	r2, #0
 804459e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80445a2:	2300      	movs	r3, #0
}
 80445a4:	4618      	mov	r0, r3
 80445a6:	3710      	adds	r7, #16
 80445a8:	46bd      	mov	sp, r7
 80445aa:	bd80      	pop	{r7, pc}

080445ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80445ac:	b580      	push	{r7, lr}
 80445ae:	b084      	sub	sp, #16
 80445b0:	af00      	add	r7, sp, #0
 80445b2:	6078      	str	r0, [r7, #4]
 80445b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80445b6:	687b      	ldr	r3, [r7, #4]
 80445b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80445bc:	2b01      	cmp	r3, #1
 80445be:	d101      	bne.n	80445c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80445c0:	2302      	movs	r3, #2
 80445c2:	e02d      	b.n	8044620 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80445c4:	687b      	ldr	r3, [r7, #4]
 80445c6:	2201      	movs	r2, #1
 80445c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80445cc:	687b      	ldr	r3, [r7, #4]
 80445ce:	2224      	movs	r2, #36	; 0x24
 80445d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80445d4:	687b      	ldr	r3, [r7, #4]
 80445d6:	681b      	ldr	r3, [r3, #0]
 80445d8:	681b      	ldr	r3, [r3, #0]
 80445da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80445dc:	687b      	ldr	r3, [r7, #4]
 80445de:	681b      	ldr	r3, [r3, #0]
 80445e0:	681a      	ldr	r2, [r3, #0]
 80445e2:	687b      	ldr	r3, [r7, #4]
 80445e4:	681b      	ldr	r3, [r3, #0]
 80445e6:	f022 0201 	bic.w	r2, r2, #1
 80445ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80445ec:	687b      	ldr	r3, [r7, #4]
 80445ee:	681b      	ldr	r3, [r3, #0]
 80445f0:	689b      	ldr	r3, [r3, #8]
 80445f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80445f6:	687b      	ldr	r3, [r7, #4]
 80445f8:	681b      	ldr	r3, [r3, #0]
 80445fa:	683a      	ldr	r2, [r7, #0]
 80445fc:	430a      	orrs	r2, r1
 80445fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8044600:	6878      	ldr	r0, [r7, #4]
 8044602:	f000 f811 	bl	8044628 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8044606:	687b      	ldr	r3, [r7, #4]
 8044608:	681b      	ldr	r3, [r3, #0]
 804460a:	68fa      	ldr	r2, [r7, #12]
 804460c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804460e:	687b      	ldr	r3, [r7, #4]
 8044610:	2220      	movs	r2, #32
 8044612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8044616:	687b      	ldr	r3, [r7, #4]
 8044618:	2200      	movs	r2, #0
 804461a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804461e:	2300      	movs	r3, #0
}
 8044620:	4618      	mov	r0, r3
 8044622:	3710      	adds	r7, #16
 8044624:	46bd      	mov	sp, r7
 8044626:	bd80      	pop	{r7, pc}

08044628 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8044628:	b480      	push	{r7}
 804462a:	b085      	sub	sp, #20
 804462c:	af00      	add	r7, sp, #0
 804462e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8044630:	687b      	ldr	r3, [r7, #4]
 8044632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8044634:	2b00      	cmp	r3, #0
 8044636:	d108      	bne.n	804464a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8044638:	687b      	ldr	r3, [r7, #4]
 804463a:	2201      	movs	r2, #1
 804463c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8044640:	687b      	ldr	r3, [r7, #4]
 8044642:	2201      	movs	r2, #1
 8044644:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8044648:	e031      	b.n	80446ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 804464a:	2308      	movs	r3, #8
 804464c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 804464e:	2308      	movs	r3, #8
 8044650:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8044652:	687b      	ldr	r3, [r7, #4]
 8044654:	681b      	ldr	r3, [r3, #0]
 8044656:	689b      	ldr	r3, [r3, #8]
 8044658:	0e5b      	lsrs	r3, r3, #25
 804465a:	b2db      	uxtb	r3, r3
 804465c:	f003 0307 	and.w	r3, r3, #7
 8044660:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8044662:	687b      	ldr	r3, [r7, #4]
 8044664:	681b      	ldr	r3, [r3, #0]
 8044666:	689b      	ldr	r3, [r3, #8]
 8044668:	0f5b      	lsrs	r3, r3, #29
 804466a:	b2db      	uxtb	r3, r3
 804466c:	f003 0307 	and.w	r3, r3, #7
 8044670:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8044672:	7bbb      	ldrb	r3, [r7, #14]
 8044674:	7b3a      	ldrb	r2, [r7, #12]
 8044676:	4911      	ldr	r1, [pc, #68]	; (80446bc <UARTEx_SetNbDataToProcess+0x94>)
 8044678:	5c8a      	ldrb	r2, [r1, r2]
 804467a:	fb02 f303 	mul.w	r3, r2, r3
 804467e:	7b3a      	ldrb	r2, [r7, #12]
 8044680:	490f      	ldr	r1, [pc, #60]	; (80446c0 <UARTEx_SetNbDataToProcess+0x98>)
 8044682:	5c8a      	ldrb	r2, [r1, r2]
 8044684:	fb93 f3f2 	sdiv	r3, r3, r2
 8044688:	b29a      	uxth	r2, r3
 804468a:	687b      	ldr	r3, [r7, #4]
 804468c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8044690:	7bfb      	ldrb	r3, [r7, #15]
 8044692:	7b7a      	ldrb	r2, [r7, #13]
 8044694:	4909      	ldr	r1, [pc, #36]	; (80446bc <UARTEx_SetNbDataToProcess+0x94>)
 8044696:	5c8a      	ldrb	r2, [r1, r2]
 8044698:	fb02 f303 	mul.w	r3, r2, r3
 804469c:	7b7a      	ldrb	r2, [r7, #13]
 804469e:	4908      	ldr	r1, [pc, #32]	; (80446c0 <UARTEx_SetNbDataToProcess+0x98>)
 80446a0:	5c8a      	ldrb	r2, [r1, r2]
 80446a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80446a6:	b29a      	uxth	r2, r3
 80446a8:	687b      	ldr	r3, [r7, #4]
 80446aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80446ae:	bf00      	nop
 80446b0:	3714      	adds	r7, #20
 80446b2:	46bd      	mov	sp, r7
 80446b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80446b8:	4770      	bx	lr
 80446ba:	bf00      	nop
 80446bc:	080456a4 	.word	0x080456a4
 80446c0:	080456ac 	.word	0x080456ac

080446c4 <__errno>:
 80446c4:	4b01      	ldr	r3, [pc, #4]	; (80446cc <__errno+0x8>)
 80446c6:	6818      	ldr	r0, [r3, #0]
 80446c8:	4770      	bx	lr
 80446ca:	bf00      	nop
 80446cc:	2003000c 	.word	0x2003000c

080446d0 <__libc_init_array>:
 80446d0:	b570      	push	{r4, r5, r6, lr}
 80446d2:	4d0d      	ldr	r5, [pc, #52]	; (8044708 <__libc_init_array+0x38>)
 80446d4:	2600      	movs	r6, #0
 80446d6:	4c0d      	ldr	r4, [pc, #52]	; (804470c <__libc_init_array+0x3c>)
 80446d8:	1b64      	subs	r4, r4, r5
 80446da:	10a4      	asrs	r4, r4, #2
 80446dc:	42a6      	cmp	r6, r4
 80446de:	d109      	bne.n	80446f4 <__libc_init_array+0x24>
 80446e0:	4d0b      	ldr	r5, [pc, #44]	; (8044710 <__libc_init_array+0x40>)
 80446e2:	2600      	movs	r6, #0
 80446e4:	4c0b      	ldr	r4, [pc, #44]	; (8044714 <__libc_init_array+0x44>)
 80446e6:	f000 ff83 	bl	80455f0 <_init>
 80446ea:	1b64      	subs	r4, r4, r5
 80446ec:	10a4      	asrs	r4, r4, #2
 80446ee:	42a6      	cmp	r6, r4
 80446f0:	d105      	bne.n	80446fe <__libc_init_array+0x2e>
 80446f2:	bd70      	pop	{r4, r5, r6, pc}
 80446f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80446f8:	3601      	adds	r6, #1
 80446fa:	4798      	blx	r3
 80446fc:	e7ee      	b.n	80446dc <__libc_init_array+0xc>
 80446fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8044702:	3601      	adds	r6, #1
 8044704:	4798      	blx	r3
 8044706:	e7f2      	b.n	80446ee <__libc_init_array+0x1e>
 8044708:	08045754 	.word	0x08045754
 804470c:	08045754 	.word	0x08045754
 8044710:	08045754 	.word	0x08045754
 8044714:	08045758 	.word	0x08045758

08044718 <memset>:
 8044718:	4402      	add	r2, r0
 804471a:	4603      	mov	r3, r0
 804471c:	4293      	cmp	r3, r2
 804471e:	d100      	bne.n	8044722 <memset+0xa>
 8044720:	4770      	bx	lr
 8044722:	f803 1b01 	strb.w	r1, [r3], #1
 8044726:	e7f9      	b.n	804471c <memset+0x4>

08044728 <iprintf>:
 8044728:	b40f      	push	{r0, r1, r2, r3}
 804472a:	4b0a      	ldr	r3, [pc, #40]	; (8044754 <iprintf+0x2c>)
 804472c:	b513      	push	{r0, r1, r4, lr}
 804472e:	681c      	ldr	r4, [r3, #0]
 8044730:	b124      	cbz	r4, 804473c <iprintf+0x14>
 8044732:	69a3      	ldr	r3, [r4, #24]
 8044734:	b913      	cbnz	r3, 804473c <iprintf+0x14>
 8044736:	4620      	mov	r0, r4
 8044738:	f000 f866 	bl	8044808 <__sinit>
 804473c:	ab05      	add	r3, sp, #20
 804473e:	9a04      	ldr	r2, [sp, #16]
 8044740:	68a1      	ldr	r1, [r4, #8]
 8044742:	4620      	mov	r0, r4
 8044744:	9301      	str	r3, [sp, #4]
 8044746:	f000 f983 	bl	8044a50 <_vfiprintf_r>
 804474a:	b002      	add	sp, #8
 804474c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8044750:	b004      	add	sp, #16
 8044752:	4770      	bx	lr
 8044754:	2003000c 	.word	0x2003000c

08044758 <std>:
 8044758:	2300      	movs	r3, #0
 804475a:	b510      	push	{r4, lr}
 804475c:	4604      	mov	r4, r0
 804475e:	6083      	str	r3, [r0, #8]
 8044760:	8181      	strh	r1, [r0, #12]
 8044762:	4619      	mov	r1, r3
 8044764:	6643      	str	r3, [r0, #100]	; 0x64
 8044766:	81c2      	strh	r2, [r0, #14]
 8044768:	2208      	movs	r2, #8
 804476a:	6183      	str	r3, [r0, #24]
 804476c:	e9c0 3300 	strd	r3, r3, [r0]
 8044770:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8044774:	305c      	adds	r0, #92	; 0x5c
 8044776:	f7ff ffcf 	bl	8044718 <memset>
 804477a:	4b05      	ldr	r3, [pc, #20]	; (8044790 <std+0x38>)
 804477c:	6224      	str	r4, [r4, #32]
 804477e:	6263      	str	r3, [r4, #36]	; 0x24
 8044780:	4b04      	ldr	r3, [pc, #16]	; (8044794 <std+0x3c>)
 8044782:	62a3      	str	r3, [r4, #40]	; 0x28
 8044784:	4b04      	ldr	r3, [pc, #16]	; (8044798 <std+0x40>)
 8044786:	62e3      	str	r3, [r4, #44]	; 0x2c
 8044788:	4b04      	ldr	r3, [pc, #16]	; (804479c <std+0x44>)
 804478a:	6323      	str	r3, [r4, #48]	; 0x30
 804478c:	bd10      	pop	{r4, pc}
 804478e:	bf00      	nop
 8044790:	08044ffd 	.word	0x08044ffd
 8044794:	0804501f 	.word	0x0804501f
 8044798:	08045057 	.word	0x08045057
 804479c:	0804507b 	.word	0x0804507b

080447a0 <_cleanup_r>:
 80447a0:	4901      	ldr	r1, [pc, #4]	; (80447a8 <_cleanup_r+0x8>)
 80447a2:	f000 b8af 	b.w	8044904 <_fwalk_reent>
 80447a6:	bf00      	nop
 80447a8:	08045351 	.word	0x08045351

080447ac <__sfmoreglue>:
 80447ac:	b570      	push	{r4, r5, r6, lr}
 80447ae:	1e4a      	subs	r2, r1, #1
 80447b0:	2568      	movs	r5, #104	; 0x68
 80447b2:	460e      	mov	r6, r1
 80447b4:	4355      	muls	r5, r2
 80447b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80447ba:	f000 f8c5 	bl	8044948 <_malloc_r>
 80447be:	4604      	mov	r4, r0
 80447c0:	b140      	cbz	r0, 80447d4 <__sfmoreglue+0x28>
 80447c2:	2100      	movs	r1, #0
 80447c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80447c8:	e9c0 1600 	strd	r1, r6, [r0]
 80447cc:	300c      	adds	r0, #12
 80447ce:	60a0      	str	r0, [r4, #8]
 80447d0:	f7ff ffa2 	bl	8044718 <memset>
 80447d4:	4620      	mov	r0, r4
 80447d6:	bd70      	pop	{r4, r5, r6, pc}

080447d8 <__sfp_lock_acquire>:
 80447d8:	4801      	ldr	r0, [pc, #4]	; (80447e0 <__sfp_lock_acquire+0x8>)
 80447da:	f000 b8b3 	b.w	8044944 <__retarget_lock_acquire_recursive>
 80447de:	bf00      	nop
 80447e0:	200301f8 	.word	0x200301f8

080447e4 <__sfp_lock_release>:
 80447e4:	4801      	ldr	r0, [pc, #4]	; (80447ec <__sfp_lock_release+0x8>)
 80447e6:	f000 b8ae 	b.w	8044946 <__retarget_lock_release_recursive>
 80447ea:	bf00      	nop
 80447ec:	200301f8 	.word	0x200301f8

080447f0 <__sinit_lock_acquire>:
 80447f0:	4801      	ldr	r0, [pc, #4]	; (80447f8 <__sinit_lock_acquire+0x8>)
 80447f2:	f000 b8a7 	b.w	8044944 <__retarget_lock_acquire_recursive>
 80447f6:	bf00      	nop
 80447f8:	200301f3 	.word	0x200301f3

080447fc <__sinit_lock_release>:
 80447fc:	4801      	ldr	r0, [pc, #4]	; (8044804 <__sinit_lock_release+0x8>)
 80447fe:	f000 b8a2 	b.w	8044946 <__retarget_lock_release_recursive>
 8044802:	bf00      	nop
 8044804:	200301f3 	.word	0x200301f3

08044808 <__sinit>:
 8044808:	b510      	push	{r4, lr}
 804480a:	4604      	mov	r4, r0
 804480c:	f7ff fff0 	bl	80447f0 <__sinit_lock_acquire>
 8044810:	69a3      	ldr	r3, [r4, #24]
 8044812:	b11b      	cbz	r3, 804481c <__sinit+0x14>
 8044814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8044818:	f7ff bff0 	b.w	80447fc <__sinit_lock_release>
 804481c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8044820:	6523      	str	r3, [r4, #80]	; 0x50
 8044822:	4620      	mov	r0, r4
 8044824:	4b12      	ldr	r3, [pc, #72]	; (8044870 <__sinit+0x68>)
 8044826:	4a13      	ldr	r2, [pc, #76]	; (8044874 <__sinit+0x6c>)
 8044828:	681b      	ldr	r3, [r3, #0]
 804482a:	62a2      	str	r2, [r4, #40]	; 0x28
 804482c:	42a3      	cmp	r3, r4
 804482e:	bf04      	itt	eq
 8044830:	2301      	moveq	r3, #1
 8044832:	61a3      	streq	r3, [r4, #24]
 8044834:	f000 f820 	bl	8044878 <__sfp>
 8044838:	6060      	str	r0, [r4, #4]
 804483a:	4620      	mov	r0, r4
 804483c:	f000 f81c 	bl	8044878 <__sfp>
 8044840:	60a0      	str	r0, [r4, #8]
 8044842:	4620      	mov	r0, r4
 8044844:	f000 f818 	bl	8044878 <__sfp>
 8044848:	2200      	movs	r2, #0
 804484a:	2104      	movs	r1, #4
 804484c:	60e0      	str	r0, [r4, #12]
 804484e:	6860      	ldr	r0, [r4, #4]
 8044850:	f7ff ff82 	bl	8044758 <std>
 8044854:	2201      	movs	r2, #1
 8044856:	2109      	movs	r1, #9
 8044858:	68a0      	ldr	r0, [r4, #8]
 804485a:	f7ff ff7d 	bl	8044758 <std>
 804485e:	2202      	movs	r2, #2
 8044860:	2112      	movs	r1, #18
 8044862:	68e0      	ldr	r0, [r4, #12]
 8044864:	f7ff ff78 	bl	8044758 <std>
 8044868:	2301      	movs	r3, #1
 804486a:	61a3      	str	r3, [r4, #24]
 804486c:	e7d2      	b.n	8044814 <__sinit+0xc>
 804486e:	bf00      	nop
 8044870:	080456b4 	.word	0x080456b4
 8044874:	080447a1 	.word	0x080447a1

08044878 <__sfp>:
 8044878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804487a:	4607      	mov	r7, r0
 804487c:	f7ff ffac 	bl	80447d8 <__sfp_lock_acquire>
 8044880:	4b1e      	ldr	r3, [pc, #120]	; (80448fc <__sfp+0x84>)
 8044882:	681e      	ldr	r6, [r3, #0]
 8044884:	69b3      	ldr	r3, [r6, #24]
 8044886:	b913      	cbnz	r3, 804488e <__sfp+0x16>
 8044888:	4630      	mov	r0, r6
 804488a:	f7ff ffbd 	bl	8044808 <__sinit>
 804488e:	3648      	adds	r6, #72	; 0x48
 8044890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8044894:	3b01      	subs	r3, #1
 8044896:	d503      	bpl.n	80448a0 <__sfp+0x28>
 8044898:	6833      	ldr	r3, [r6, #0]
 804489a:	b30b      	cbz	r3, 80448e0 <__sfp+0x68>
 804489c:	6836      	ldr	r6, [r6, #0]
 804489e:	e7f7      	b.n	8044890 <__sfp+0x18>
 80448a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80448a4:	b9d5      	cbnz	r5, 80448dc <__sfp+0x64>
 80448a6:	4b16      	ldr	r3, [pc, #88]	; (8044900 <__sfp+0x88>)
 80448a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80448ac:	6665      	str	r5, [r4, #100]	; 0x64
 80448ae:	60e3      	str	r3, [r4, #12]
 80448b0:	f000 f847 	bl	8044942 <__retarget_lock_init_recursive>
 80448b4:	f7ff ff96 	bl	80447e4 <__sfp_lock_release>
 80448b8:	2208      	movs	r2, #8
 80448ba:	4629      	mov	r1, r5
 80448bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80448c0:	6025      	str	r5, [r4, #0]
 80448c2:	61a5      	str	r5, [r4, #24]
 80448c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80448c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80448cc:	f7ff ff24 	bl	8044718 <memset>
 80448d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80448d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80448d8:	4620      	mov	r0, r4
 80448da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80448dc:	3468      	adds	r4, #104	; 0x68
 80448de:	e7d9      	b.n	8044894 <__sfp+0x1c>
 80448e0:	2104      	movs	r1, #4
 80448e2:	4638      	mov	r0, r7
 80448e4:	f7ff ff62 	bl	80447ac <__sfmoreglue>
 80448e8:	4604      	mov	r4, r0
 80448ea:	6030      	str	r0, [r6, #0]
 80448ec:	2800      	cmp	r0, #0
 80448ee:	d1d5      	bne.n	804489c <__sfp+0x24>
 80448f0:	f7ff ff78 	bl	80447e4 <__sfp_lock_release>
 80448f4:	230c      	movs	r3, #12
 80448f6:	603b      	str	r3, [r7, #0]
 80448f8:	e7ee      	b.n	80448d8 <__sfp+0x60>
 80448fa:	bf00      	nop
 80448fc:	080456b4 	.word	0x080456b4
 8044900:	ffff0001 	.word	0xffff0001

08044904 <_fwalk_reent>:
 8044904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8044908:	4606      	mov	r6, r0
 804490a:	4688      	mov	r8, r1
 804490c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8044910:	2700      	movs	r7, #0
 8044912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8044916:	f1b9 0901 	subs.w	r9, r9, #1
 804491a:	d505      	bpl.n	8044928 <_fwalk_reent+0x24>
 804491c:	6824      	ldr	r4, [r4, #0]
 804491e:	2c00      	cmp	r4, #0
 8044920:	d1f7      	bne.n	8044912 <_fwalk_reent+0xe>
 8044922:	4638      	mov	r0, r7
 8044924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8044928:	89ab      	ldrh	r3, [r5, #12]
 804492a:	2b01      	cmp	r3, #1
 804492c:	d907      	bls.n	804493e <_fwalk_reent+0x3a>
 804492e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8044932:	3301      	adds	r3, #1
 8044934:	d003      	beq.n	804493e <_fwalk_reent+0x3a>
 8044936:	4629      	mov	r1, r5
 8044938:	4630      	mov	r0, r6
 804493a:	47c0      	blx	r8
 804493c:	4307      	orrs	r7, r0
 804493e:	3568      	adds	r5, #104	; 0x68
 8044940:	e7e9      	b.n	8044916 <_fwalk_reent+0x12>

08044942 <__retarget_lock_init_recursive>:
 8044942:	4770      	bx	lr

08044944 <__retarget_lock_acquire_recursive>:
 8044944:	4770      	bx	lr

08044946 <__retarget_lock_release_recursive>:
 8044946:	4770      	bx	lr

08044948 <_malloc_r>:
 8044948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804494a:	1ccd      	adds	r5, r1, #3
 804494c:	4606      	mov	r6, r0
 804494e:	f025 0503 	bic.w	r5, r5, #3
 8044952:	3508      	adds	r5, #8
 8044954:	2d0c      	cmp	r5, #12
 8044956:	bf38      	it	cc
 8044958:	250c      	movcc	r5, #12
 804495a:	2d00      	cmp	r5, #0
 804495c:	db01      	blt.n	8044962 <_malloc_r+0x1a>
 804495e:	42a9      	cmp	r1, r5
 8044960:	d903      	bls.n	804496a <_malloc_r+0x22>
 8044962:	230c      	movs	r3, #12
 8044964:	6033      	str	r3, [r6, #0]
 8044966:	2000      	movs	r0, #0
 8044968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804496a:	f000 fdb1 	bl	80454d0 <__malloc_lock>
 804496e:	4921      	ldr	r1, [pc, #132]	; (80449f4 <_malloc_r+0xac>)
 8044970:	680a      	ldr	r2, [r1, #0]
 8044972:	4614      	mov	r4, r2
 8044974:	b99c      	cbnz	r4, 804499e <_malloc_r+0x56>
 8044976:	4f20      	ldr	r7, [pc, #128]	; (80449f8 <_malloc_r+0xb0>)
 8044978:	683b      	ldr	r3, [r7, #0]
 804497a:	b923      	cbnz	r3, 8044986 <_malloc_r+0x3e>
 804497c:	4621      	mov	r1, r4
 804497e:	4630      	mov	r0, r6
 8044980:	f000 fb2c 	bl	8044fdc <_sbrk_r>
 8044984:	6038      	str	r0, [r7, #0]
 8044986:	4629      	mov	r1, r5
 8044988:	4630      	mov	r0, r6
 804498a:	f000 fb27 	bl	8044fdc <_sbrk_r>
 804498e:	1c43      	adds	r3, r0, #1
 8044990:	d123      	bne.n	80449da <_malloc_r+0x92>
 8044992:	230c      	movs	r3, #12
 8044994:	4630      	mov	r0, r6
 8044996:	6033      	str	r3, [r6, #0]
 8044998:	f000 fda0 	bl	80454dc <__malloc_unlock>
 804499c:	e7e3      	b.n	8044966 <_malloc_r+0x1e>
 804499e:	6823      	ldr	r3, [r4, #0]
 80449a0:	1b5b      	subs	r3, r3, r5
 80449a2:	d417      	bmi.n	80449d4 <_malloc_r+0x8c>
 80449a4:	2b0b      	cmp	r3, #11
 80449a6:	d903      	bls.n	80449b0 <_malloc_r+0x68>
 80449a8:	6023      	str	r3, [r4, #0]
 80449aa:	441c      	add	r4, r3
 80449ac:	6025      	str	r5, [r4, #0]
 80449ae:	e004      	b.n	80449ba <_malloc_r+0x72>
 80449b0:	6863      	ldr	r3, [r4, #4]
 80449b2:	42a2      	cmp	r2, r4
 80449b4:	bf0c      	ite	eq
 80449b6:	600b      	streq	r3, [r1, #0]
 80449b8:	6053      	strne	r3, [r2, #4]
 80449ba:	4630      	mov	r0, r6
 80449bc:	f000 fd8e 	bl	80454dc <__malloc_unlock>
 80449c0:	f104 000b 	add.w	r0, r4, #11
 80449c4:	1d23      	adds	r3, r4, #4
 80449c6:	f020 0007 	bic.w	r0, r0, #7
 80449ca:	1ac2      	subs	r2, r0, r3
 80449cc:	d0cc      	beq.n	8044968 <_malloc_r+0x20>
 80449ce:	1a1b      	subs	r3, r3, r0
 80449d0:	50a3      	str	r3, [r4, r2]
 80449d2:	e7c9      	b.n	8044968 <_malloc_r+0x20>
 80449d4:	4622      	mov	r2, r4
 80449d6:	6864      	ldr	r4, [r4, #4]
 80449d8:	e7cc      	b.n	8044974 <_malloc_r+0x2c>
 80449da:	1cc4      	adds	r4, r0, #3
 80449dc:	f024 0403 	bic.w	r4, r4, #3
 80449e0:	42a0      	cmp	r0, r4
 80449e2:	d0e3      	beq.n	80449ac <_malloc_r+0x64>
 80449e4:	1a21      	subs	r1, r4, r0
 80449e6:	4630      	mov	r0, r6
 80449e8:	f000 faf8 	bl	8044fdc <_sbrk_r>
 80449ec:	3001      	adds	r0, #1
 80449ee:	d1dd      	bne.n	80449ac <_malloc_r+0x64>
 80449f0:	e7cf      	b.n	8044992 <_malloc_r+0x4a>
 80449f2:	bf00      	nop
 80449f4:	200300a0 	.word	0x200300a0
 80449f8:	200300a4 	.word	0x200300a4

080449fc <__sfputc_r>:
 80449fc:	6893      	ldr	r3, [r2, #8]
 80449fe:	3b01      	subs	r3, #1
 8044a00:	2b00      	cmp	r3, #0
 8044a02:	6093      	str	r3, [r2, #8]
 8044a04:	b410      	push	{r4}
 8044a06:	da08      	bge.n	8044a1a <__sfputc_r+0x1e>
 8044a08:	6994      	ldr	r4, [r2, #24]
 8044a0a:	42a3      	cmp	r3, r4
 8044a0c:	db01      	blt.n	8044a12 <__sfputc_r+0x16>
 8044a0e:	290a      	cmp	r1, #10
 8044a10:	d103      	bne.n	8044a1a <__sfputc_r+0x1e>
 8044a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8044a16:	f000 bb35 	b.w	8045084 <__swbuf_r>
 8044a1a:	6813      	ldr	r3, [r2, #0]
 8044a1c:	1c58      	adds	r0, r3, #1
 8044a1e:	6010      	str	r0, [r2, #0]
 8044a20:	4608      	mov	r0, r1
 8044a22:	7019      	strb	r1, [r3, #0]
 8044a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8044a28:	4770      	bx	lr

08044a2a <__sfputs_r>:
 8044a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044a2c:	4606      	mov	r6, r0
 8044a2e:	460f      	mov	r7, r1
 8044a30:	4614      	mov	r4, r2
 8044a32:	18d5      	adds	r5, r2, r3
 8044a34:	42ac      	cmp	r4, r5
 8044a36:	d101      	bne.n	8044a3c <__sfputs_r+0x12>
 8044a38:	2000      	movs	r0, #0
 8044a3a:	e007      	b.n	8044a4c <__sfputs_r+0x22>
 8044a3c:	463a      	mov	r2, r7
 8044a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8044a42:	4630      	mov	r0, r6
 8044a44:	f7ff ffda 	bl	80449fc <__sfputc_r>
 8044a48:	1c43      	adds	r3, r0, #1
 8044a4a:	d1f3      	bne.n	8044a34 <__sfputs_r+0xa>
 8044a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08044a50 <_vfiprintf_r>:
 8044a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044a54:	460d      	mov	r5, r1
 8044a56:	b09d      	sub	sp, #116	; 0x74
 8044a58:	4614      	mov	r4, r2
 8044a5a:	4698      	mov	r8, r3
 8044a5c:	4606      	mov	r6, r0
 8044a5e:	b118      	cbz	r0, 8044a68 <_vfiprintf_r+0x18>
 8044a60:	6983      	ldr	r3, [r0, #24]
 8044a62:	b90b      	cbnz	r3, 8044a68 <_vfiprintf_r+0x18>
 8044a64:	f7ff fed0 	bl	8044808 <__sinit>
 8044a68:	4b89      	ldr	r3, [pc, #548]	; (8044c90 <_vfiprintf_r+0x240>)
 8044a6a:	429d      	cmp	r5, r3
 8044a6c:	d11b      	bne.n	8044aa6 <_vfiprintf_r+0x56>
 8044a6e:	6875      	ldr	r5, [r6, #4]
 8044a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8044a72:	07d9      	lsls	r1, r3, #31
 8044a74:	d405      	bmi.n	8044a82 <_vfiprintf_r+0x32>
 8044a76:	89ab      	ldrh	r3, [r5, #12]
 8044a78:	059a      	lsls	r2, r3, #22
 8044a7a:	d402      	bmi.n	8044a82 <_vfiprintf_r+0x32>
 8044a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8044a7e:	f7ff ff61 	bl	8044944 <__retarget_lock_acquire_recursive>
 8044a82:	89ab      	ldrh	r3, [r5, #12]
 8044a84:	071b      	lsls	r3, r3, #28
 8044a86:	d501      	bpl.n	8044a8c <_vfiprintf_r+0x3c>
 8044a88:	692b      	ldr	r3, [r5, #16]
 8044a8a:	b9eb      	cbnz	r3, 8044ac8 <_vfiprintf_r+0x78>
 8044a8c:	4629      	mov	r1, r5
 8044a8e:	4630      	mov	r0, r6
 8044a90:	f000 fb5c 	bl	804514c <__swsetup_r>
 8044a94:	b1c0      	cbz	r0, 8044ac8 <_vfiprintf_r+0x78>
 8044a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8044a98:	07dc      	lsls	r4, r3, #31
 8044a9a:	d50e      	bpl.n	8044aba <_vfiprintf_r+0x6a>
 8044a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8044aa0:	b01d      	add	sp, #116	; 0x74
 8044aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044aa6:	4b7b      	ldr	r3, [pc, #492]	; (8044c94 <_vfiprintf_r+0x244>)
 8044aa8:	429d      	cmp	r5, r3
 8044aaa:	d101      	bne.n	8044ab0 <_vfiprintf_r+0x60>
 8044aac:	68b5      	ldr	r5, [r6, #8]
 8044aae:	e7df      	b.n	8044a70 <_vfiprintf_r+0x20>
 8044ab0:	4b79      	ldr	r3, [pc, #484]	; (8044c98 <_vfiprintf_r+0x248>)
 8044ab2:	429d      	cmp	r5, r3
 8044ab4:	bf08      	it	eq
 8044ab6:	68f5      	ldreq	r5, [r6, #12]
 8044ab8:	e7da      	b.n	8044a70 <_vfiprintf_r+0x20>
 8044aba:	89ab      	ldrh	r3, [r5, #12]
 8044abc:	0598      	lsls	r0, r3, #22
 8044abe:	d4ed      	bmi.n	8044a9c <_vfiprintf_r+0x4c>
 8044ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8044ac2:	f7ff ff40 	bl	8044946 <__retarget_lock_release_recursive>
 8044ac6:	e7e9      	b.n	8044a9c <_vfiprintf_r+0x4c>
 8044ac8:	2300      	movs	r3, #0
 8044aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8044ace:	f04f 0901 	mov.w	r9, #1
 8044ad2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8044c9c <_vfiprintf_r+0x24c>
 8044ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8044ad8:	2320      	movs	r3, #32
 8044ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8044ade:	2330      	movs	r3, #48	; 0x30
 8044ae0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8044ae4:	4623      	mov	r3, r4
 8044ae6:	469a      	mov	sl, r3
 8044ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8044aec:	b10a      	cbz	r2, 8044af2 <_vfiprintf_r+0xa2>
 8044aee:	2a25      	cmp	r2, #37	; 0x25
 8044af0:	d1f9      	bne.n	8044ae6 <_vfiprintf_r+0x96>
 8044af2:	ebba 0b04 	subs.w	fp, sl, r4
 8044af6:	d00b      	beq.n	8044b10 <_vfiprintf_r+0xc0>
 8044af8:	465b      	mov	r3, fp
 8044afa:	4622      	mov	r2, r4
 8044afc:	4629      	mov	r1, r5
 8044afe:	4630      	mov	r0, r6
 8044b00:	f7ff ff93 	bl	8044a2a <__sfputs_r>
 8044b04:	3001      	adds	r0, #1
 8044b06:	f000 80aa 	beq.w	8044c5e <_vfiprintf_r+0x20e>
 8044b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8044b0c:	445a      	add	r2, fp
 8044b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8044b10:	f89a 3000 	ldrb.w	r3, [sl]
 8044b14:	2b00      	cmp	r3, #0
 8044b16:	f000 80a2 	beq.w	8044c5e <_vfiprintf_r+0x20e>
 8044b1a:	2300      	movs	r3, #0
 8044b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8044b20:	f10a 0a01 	add.w	sl, sl, #1
 8044b24:	9304      	str	r3, [sp, #16]
 8044b26:	9307      	str	r3, [sp, #28]
 8044b28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8044b2c:	931a      	str	r3, [sp, #104]	; 0x68
 8044b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8044b32:	4654      	mov	r4, sl
 8044b34:	2205      	movs	r2, #5
 8044b36:	4859      	ldr	r0, [pc, #356]	; (8044c9c <_vfiprintf_r+0x24c>)
 8044b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8044b3c:	f000 fcba 	bl	80454b4 <memchr>
 8044b40:	9a04      	ldr	r2, [sp, #16]
 8044b42:	b9d8      	cbnz	r0, 8044b7c <_vfiprintf_r+0x12c>
 8044b44:	06d1      	lsls	r1, r2, #27
 8044b46:	bf44      	itt	mi
 8044b48:	2320      	movmi	r3, #32
 8044b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8044b4e:	0713      	lsls	r3, r2, #28
 8044b50:	bf44      	itt	mi
 8044b52:	232b      	movmi	r3, #43	; 0x2b
 8044b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8044b58:	f89a 3000 	ldrb.w	r3, [sl]
 8044b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8044b5e:	d015      	beq.n	8044b8c <_vfiprintf_r+0x13c>
 8044b60:	9a07      	ldr	r2, [sp, #28]
 8044b62:	4654      	mov	r4, sl
 8044b64:	2000      	movs	r0, #0
 8044b66:	f04f 0c0a 	mov.w	ip, #10
 8044b6a:	4621      	mov	r1, r4
 8044b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8044b70:	3b30      	subs	r3, #48	; 0x30
 8044b72:	2b09      	cmp	r3, #9
 8044b74:	d94e      	bls.n	8044c14 <_vfiprintf_r+0x1c4>
 8044b76:	b1b0      	cbz	r0, 8044ba6 <_vfiprintf_r+0x156>
 8044b78:	9207      	str	r2, [sp, #28]
 8044b7a:	e014      	b.n	8044ba6 <_vfiprintf_r+0x156>
 8044b7c:	eba0 0308 	sub.w	r3, r0, r8
 8044b80:	46a2      	mov	sl, r4
 8044b82:	fa09 f303 	lsl.w	r3, r9, r3
 8044b86:	4313      	orrs	r3, r2
 8044b88:	9304      	str	r3, [sp, #16]
 8044b8a:	e7d2      	b.n	8044b32 <_vfiprintf_r+0xe2>
 8044b8c:	9b03      	ldr	r3, [sp, #12]
 8044b8e:	1d19      	adds	r1, r3, #4
 8044b90:	681b      	ldr	r3, [r3, #0]
 8044b92:	2b00      	cmp	r3, #0
 8044b94:	9103      	str	r1, [sp, #12]
 8044b96:	bfbb      	ittet	lt
 8044b98:	425b      	neglt	r3, r3
 8044b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8044b9e:	9307      	strge	r3, [sp, #28]
 8044ba0:	9307      	strlt	r3, [sp, #28]
 8044ba2:	bfb8      	it	lt
 8044ba4:	9204      	strlt	r2, [sp, #16]
 8044ba6:	7823      	ldrb	r3, [r4, #0]
 8044ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8044baa:	d10c      	bne.n	8044bc6 <_vfiprintf_r+0x176>
 8044bac:	7863      	ldrb	r3, [r4, #1]
 8044bae:	2b2a      	cmp	r3, #42	; 0x2a
 8044bb0:	d135      	bne.n	8044c1e <_vfiprintf_r+0x1ce>
 8044bb2:	9b03      	ldr	r3, [sp, #12]
 8044bb4:	3402      	adds	r4, #2
 8044bb6:	1d1a      	adds	r2, r3, #4
 8044bb8:	681b      	ldr	r3, [r3, #0]
 8044bba:	2b00      	cmp	r3, #0
 8044bbc:	9203      	str	r2, [sp, #12]
 8044bbe:	bfb8      	it	lt
 8044bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8044bc4:	9305      	str	r3, [sp, #20]
 8044bc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8044cac <_vfiprintf_r+0x25c>
 8044bca:	2203      	movs	r2, #3
 8044bcc:	7821      	ldrb	r1, [r4, #0]
 8044bce:	4650      	mov	r0, sl
 8044bd0:	f000 fc70 	bl	80454b4 <memchr>
 8044bd4:	b140      	cbz	r0, 8044be8 <_vfiprintf_r+0x198>
 8044bd6:	2340      	movs	r3, #64	; 0x40
 8044bd8:	eba0 000a 	sub.w	r0, r0, sl
 8044bdc:	3401      	adds	r4, #1
 8044bde:	fa03 f000 	lsl.w	r0, r3, r0
 8044be2:	9b04      	ldr	r3, [sp, #16]
 8044be4:	4303      	orrs	r3, r0
 8044be6:	9304      	str	r3, [sp, #16]
 8044be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8044bec:	2206      	movs	r2, #6
 8044bee:	482c      	ldr	r0, [pc, #176]	; (8044ca0 <_vfiprintf_r+0x250>)
 8044bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8044bf4:	f000 fc5e 	bl	80454b4 <memchr>
 8044bf8:	2800      	cmp	r0, #0
 8044bfa:	d03f      	beq.n	8044c7c <_vfiprintf_r+0x22c>
 8044bfc:	4b29      	ldr	r3, [pc, #164]	; (8044ca4 <_vfiprintf_r+0x254>)
 8044bfe:	bb1b      	cbnz	r3, 8044c48 <_vfiprintf_r+0x1f8>
 8044c00:	9b03      	ldr	r3, [sp, #12]
 8044c02:	3307      	adds	r3, #7
 8044c04:	f023 0307 	bic.w	r3, r3, #7
 8044c08:	3308      	adds	r3, #8
 8044c0a:	9303      	str	r3, [sp, #12]
 8044c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8044c0e:	443b      	add	r3, r7
 8044c10:	9309      	str	r3, [sp, #36]	; 0x24
 8044c12:	e767      	b.n	8044ae4 <_vfiprintf_r+0x94>
 8044c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8044c18:	460c      	mov	r4, r1
 8044c1a:	2001      	movs	r0, #1
 8044c1c:	e7a5      	b.n	8044b6a <_vfiprintf_r+0x11a>
 8044c1e:	2300      	movs	r3, #0
 8044c20:	3401      	adds	r4, #1
 8044c22:	f04f 0c0a 	mov.w	ip, #10
 8044c26:	4619      	mov	r1, r3
 8044c28:	9305      	str	r3, [sp, #20]
 8044c2a:	4620      	mov	r0, r4
 8044c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8044c30:	3a30      	subs	r2, #48	; 0x30
 8044c32:	2a09      	cmp	r2, #9
 8044c34:	d903      	bls.n	8044c3e <_vfiprintf_r+0x1ee>
 8044c36:	2b00      	cmp	r3, #0
 8044c38:	d0c5      	beq.n	8044bc6 <_vfiprintf_r+0x176>
 8044c3a:	9105      	str	r1, [sp, #20]
 8044c3c:	e7c3      	b.n	8044bc6 <_vfiprintf_r+0x176>
 8044c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8044c42:	4604      	mov	r4, r0
 8044c44:	2301      	movs	r3, #1
 8044c46:	e7f0      	b.n	8044c2a <_vfiprintf_r+0x1da>
 8044c48:	ab03      	add	r3, sp, #12
 8044c4a:	462a      	mov	r2, r5
 8044c4c:	a904      	add	r1, sp, #16
 8044c4e:	4630      	mov	r0, r6
 8044c50:	9300      	str	r3, [sp, #0]
 8044c52:	4b15      	ldr	r3, [pc, #84]	; (8044ca8 <_vfiprintf_r+0x258>)
 8044c54:	e000      	b.n	8044c58 <_vfiprintf_r+0x208>
 8044c56:	bf00      	nop
 8044c58:	4607      	mov	r7, r0
 8044c5a:	1c78      	adds	r0, r7, #1
 8044c5c:	d1d6      	bne.n	8044c0c <_vfiprintf_r+0x1bc>
 8044c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8044c60:	07d9      	lsls	r1, r3, #31
 8044c62:	d405      	bmi.n	8044c70 <_vfiprintf_r+0x220>
 8044c64:	89ab      	ldrh	r3, [r5, #12]
 8044c66:	059a      	lsls	r2, r3, #22
 8044c68:	d402      	bmi.n	8044c70 <_vfiprintf_r+0x220>
 8044c6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8044c6c:	f7ff fe6b 	bl	8044946 <__retarget_lock_release_recursive>
 8044c70:	89ab      	ldrh	r3, [r5, #12]
 8044c72:	065b      	lsls	r3, r3, #25
 8044c74:	f53f af12 	bmi.w	8044a9c <_vfiprintf_r+0x4c>
 8044c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8044c7a:	e711      	b.n	8044aa0 <_vfiprintf_r+0x50>
 8044c7c:	ab03      	add	r3, sp, #12
 8044c7e:	462a      	mov	r2, r5
 8044c80:	a904      	add	r1, sp, #16
 8044c82:	4630      	mov	r0, r6
 8044c84:	9300      	str	r3, [sp, #0]
 8044c86:	4b08      	ldr	r3, [pc, #32]	; (8044ca8 <_vfiprintf_r+0x258>)
 8044c88:	f000 f882 	bl	8044d90 <_printf_i>
 8044c8c:	e7e4      	b.n	8044c58 <_vfiprintf_r+0x208>
 8044c8e:	bf00      	nop
 8044c90:	080456d8 	.word	0x080456d8
 8044c94:	080456f8 	.word	0x080456f8
 8044c98:	080456b8 	.word	0x080456b8
 8044c9c:	08045718 	.word	0x08045718
 8044ca0:	08045722 	.word	0x08045722
 8044ca4:	00000000 	.word	0x00000000
 8044ca8:	08044a2b 	.word	0x08044a2b
 8044cac:	0804571e 	.word	0x0804571e

08044cb0 <_printf_common>:
 8044cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8044cb4:	4616      	mov	r6, r2
 8044cb6:	4699      	mov	r9, r3
 8044cb8:	688a      	ldr	r2, [r1, #8]
 8044cba:	4607      	mov	r7, r0
 8044cbc:	690b      	ldr	r3, [r1, #16]
 8044cbe:	460c      	mov	r4, r1
 8044cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8044cc4:	4293      	cmp	r3, r2
 8044cc6:	bfb8      	it	lt
 8044cc8:	4613      	movlt	r3, r2
 8044cca:	6033      	str	r3, [r6, #0]
 8044ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8044cd0:	b10a      	cbz	r2, 8044cd6 <_printf_common+0x26>
 8044cd2:	3301      	adds	r3, #1
 8044cd4:	6033      	str	r3, [r6, #0]
 8044cd6:	6823      	ldr	r3, [r4, #0]
 8044cd8:	0699      	lsls	r1, r3, #26
 8044cda:	bf42      	ittt	mi
 8044cdc:	6833      	ldrmi	r3, [r6, #0]
 8044cde:	3302      	addmi	r3, #2
 8044ce0:	6033      	strmi	r3, [r6, #0]
 8044ce2:	6825      	ldr	r5, [r4, #0]
 8044ce4:	f015 0506 	ands.w	r5, r5, #6
 8044ce8:	d106      	bne.n	8044cf8 <_printf_common+0x48>
 8044cea:	f104 0a19 	add.w	sl, r4, #25
 8044cee:	68e3      	ldr	r3, [r4, #12]
 8044cf0:	6832      	ldr	r2, [r6, #0]
 8044cf2:	1a9b      	subs	r3, r3, r2
 8044cf4:	42ab      	cmp	r3, r5
 8044cf6:	dc29      	bgt.n	8044d4c <_printf_common+0x9c>
 8044cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8044cfc:	1e13      	subs	r3, r2, #0
 8044cfe:	6822      	ldr	r2, [r4, #0]
 8044d00:	bf18      	it	ne
 8044d02:	2301      	movne	r3, #1
 8044d04:	0692      	lsls	r2, r2, #26
 8044d06:	d42e      	bmi.n	8044d66 <_printf_common+0xb6>
 8044d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8044d0c:	4649      	mov	r1, r9
 8044d0e:	4638      	mov	r0, r7
 8044d10:	47c0      	blx	r8
 8044d12:	3001      	adds	r0, #1
 8044d14:	d021      	beq.n	8044d5a <_printf_common+0xaa>
 8044d16:	6823      	ldr	r3, [r4, #0]
 8044d18:	341a      	adds	r4, #26
 8044d1a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8044d1e:	f003 0306 	and.w	r3, r3, #6
 8044d22:	6832      	ldr	r2, [r6, #0]
 8044d24:	2600      	movs	r6, #0
 8044d26:	2b04      	cmp	r3, #4
 8044d28:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8044d2c:	bf08      	it	eq
 8044d2e:	1aad      	subeq	r5, r5, r2
 8044d30:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8044d34:	bf14      	ite	ne
 8044d36:	2500      	movne	r5, #0
 8044d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8044d3c:	4293      	cmp	r3, r2
 8044d3e:	bfc4      	itt	gt
 8044d40:	1a9b      	subgt	r3, r3, r2
 8044d42:	18ed      	addgt	r5, r5, r3
 8044d44:	42b5      	cmp	r5, r6
 8044d46:	d11a      	bne.n	8044d7e <_printf_common+0xce>
 8044d48:	2000      	movs	r0, #0
 8044d4a:	e008      	b.n	8044d5e <_printf_common+0xae>
 8044d4c:	2301      	movs	r3, #1
 8044d4e:	4652      	mov	r2, sl
 8044d50:	4649      	mov	r1, r9
 8044d52:	4638      	mov	r0, r7
 8044d54:	47c0      	blx	r8
 8044d56:	3001      	adds	r0, #1
 8044d58:	d103      	bne.n	8044d62 <_printf_common+0xb2>
 8044d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8044d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044d62:	3501      	adds	r5, #1
 8044d64:	e7c3      	b.n	8044cee <_printf_common+0x3e>
 8044d66:	18e1      	adds	r1, r4, r3
 8044d68:	1c5a      	adds	r2, r3, #1
 8044d6a:	2030      	movs	r0, #48	; 0x30
 8044d6c:	3302      	adds	r3, #2
 8044d6e:	4422      	add	r2, r4
 8044d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8044d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8044d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8044d7c:	e7c4      	b.n	8044d08 <_printf_common+0x58>
 8044d7e:	2301      	movs	r3, #1
 8044d80:	4622      	mov	r2, r4
 8044d82:	4649      	mov	r1, r9
 8044d84:	4638      	mov	r0, r7
 8044d86:	47c0      	blx	r8
 8044d88:	3001      	adds	r0, #1
 8044d8a:	d0e6      	beq.n	8044d5a <_printf_common+0xaa>
 8044d8c:	3601      	adds	r6, #1
 8044d8e:	e7d9      	b.n	8044d44 <_printf_common+0x94>

08044d90 <_printf_i>:
 8044d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8044d94:	460c      	mov	r4, r1
 8044d96:	4691      	mov	r9, r2
 8044d98:	4680      	mov	r8, r0
 8044d9a:	469a      	mov	sl, r3
 8044d9c:	7e27      	ldrb	r7, [r4, #24]
 8044d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8044da2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8044da4:	2f78      	cmp	r7, #120	; 0x78
 8044da6:	d807      	bhi.n	8044db8 <_printf_i+0x28>
 8044da8:	2f62      	cmp	r7, #98	; 0x62
 8044daa:	d80a      	bhi.n	8044dc2 <_printf_i+0x32>
 8044dac:	2f00      	cmp	r7, #0
 8044dae:	f000 80d8 	beq.w	8044f62 <_printf_i+0x1d2>
 8044db2:	2f58      	cmp	r7, #88	; 0x58
 8044db4:	f000 80a3 	beq.w	8044efe <_printf_i+0x16e>
 8044db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8044dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8044dc0:	e03a      	b.n	8044e38 <_printf_i+0xa8>
 8044dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8044dc6:	2b15      	cmp	r3, #21
 8044dc8:	d8f6      	bhi.n	8044db8 <_printf_i+0x28>
 8044dca:	a001      	add	r0, pc, #4	; (adr r0, 8044dd0 <_printf_i+0x40>)
 8044dcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8044dd0:	08044e29 	.word	0x08044e29
 8044dd4:	08044e3d 	.word	0x08044e3d
 8044dd8:	08044db9 	.word	0x08044db9
 8044ddc:	08044db9 	.word	0x08044db9
 8044de0:	08044db9 	.word	0x08044db9
 8044de4:	08044db9 	.word	0x08044db9
 8044de8:	08044e3d 	.word	0x08044e3d
 8044dec:	08044db9 	.word	0x08044db9
 8044df0:	08044db9 	.word	0x08044db9
 8044df4:	08044db9 	.word	0x08044db9
 8044df8:	08044db9 	.word	0x08044db9
 8044dfc:	08044f49 	.word	0x08044f49
 8044e00:	08044e6d 	.word	0x08044e6d
 8044e04:	08044f2b 	.word	0x08044f2b
 8044e08:	08044db9 	.word	0x08044db9
 8044e0c:	08044db9 	.word	0x08044db9
 8044e10:	08044f6b 	.word	0x08044f6b
 8044e14:	08044db9 	.word	0x08044db9
 8044e18:	08044e6d 	.word	0x08044e6d
 8044e1c:	08044db9 	.word	0x08044db9
 8044e20:	08044db9 	.word	0x08044db9
 8044e24:	08044f33 	.word	0x08044f33
 8044e28:	680b      	ldr	r3, [r1, #0]
 8044e2a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8044e2e:	1d1a      	adds	r2, r3, #4
 8044e30:	681b      	ldr	r3, [r3, #0]
 8044e32:	600a      	str	r2, [r1, #0]
 8044e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8044e38:	2301      	movs	r3, #1
 8044e3a:	e0a3      	b.n	8044f84 <_printf_i+0x1f4>
 8044e3c:	6825      	ldr	r5, [r4, #0]
 8044e3e:	6808      	ldr	r0, [r1, #0]
 8044e40:	062e      	lsls	r6, r5, #24
 8044e42:	f100 0304 	add.w	r3, r0, #4
 8044e46:	d50a      	bpl.n	8044e5e <_printf_i+0xce>
 8044e48:	6805      	ldr	r5, [r0, #0]
 8044e4a:	600b      	str	r3, [r1, #0]
 8044e4c:	2d00      	cmp	r5, #0
 8044e4e:	da03      	bge.n	8044e58 <_printf_i+0xc8>
 8044e50:	232d      	movs	r3, #45	; 0x2d
 8044e52:	426d      	negs	r5, r5
 8044e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8044e58:	485e      	ldr	r0, [pc, #376]	; (8044fd4 <_printf_i+0x244>)
 8044e5a:	230a      	movs	r3, #10
 8044e5c:	e019      	b.n	8044e92 <_printf_i+0x102>
 8044e5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8044e62:	6805      	ldr	r5, [r0, #0]
 8044e64:	600b      	str	r3, [r1, #0]
 8044e66:	bf18      	it	ne
 8044e68:	b22d      	sxthne	r5, r5
 8044e6a:	e7ef      	b.n	8044e4c <_printf_i+0xbc>
 8044e6c:	680b      	ldr	r3, [r1, #0]
 8044e6e:	6825      	ldr	r5, [r4, #0]
 8044e70:	1d18      	adds	r0, r3, #4
 8044e72:	6008      	str	r0, [r1, #0]
 8044e74:	0628      	lsls	r0, r5, #24
 8044e76:	d501      	bpl.n	8044e7c <_printf_i+0xec>
 8044e78:	681d      	ldr	r5, [r3, #0]
 8044e7a:	e002      	b.n	8044e82 <_printf_i+0xf2>
 8044e7c:	0669      	lsls	r1, r5, #25
 8044e7e:	d5fb      	bpl.n	8044e78 <_printf_i+0xe8>
 8044e80:	881d      	ldrh	r5, [r3, #0]
 8044e82:	2f6f      	cmp	r7, #111	; 0x6f
 8044e84:	4853      	ldr	r0, [pc, #332]	; (8044fd4 <_printf_i+0x244>)
 8044e86:	bf0c      	ite	eq
 8044e88:	2308      	moveq	r3, #8
 8044e8a:	230a      	movne	r3, #10
 8044e8c:	2100      	movs	r1, #0
 8044e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8044e92:	6866      	ldr	r6, [r4, #4]
 8044e94:	2e00      	cmp	r6, #0
 8044e96:	60a6      	str	r6, [r4, #8]
 8044e98:	bfa2      	ittt	ge
 8044e9a:	6821      	ldrge	r1, [r4, #0]
 8044e9c:	f021 0104 	bicge.w	r1, r1, #4
 8044ea0:	6021      	strge	r1, [r4, #0]
 8044ea2:	b90d      	cbnz	r5, 8044ea8 <_printf_i+0x118>
 8044ea4:	2e00      	cmp	r6, #0
 8044ea6:	d04d      	beq.n	8044f44 <_printf_i+0x1b4>
 8044ea8:	4616      	mov	r6, r2
 8044eaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8044eae:	fb03 5711 	mls	r7, r3, r1, r5
 8044eb2:	5dc7      	ldrb	r7, [r0, r7]
 8044eb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8044eb8:	462f      	mov	r7, r5
 8044eba:	460d      	mov	r5, r1
 8044ebc:	42bb      	cmp	r3, r7
 8044ebe:	d9f4      	bls.n	8044eaa <_printf_i+0x11a>
 8044ec0:	2b08      	cmp	r3, #8
 8044ec2:	d10b      	bne.n	8044edc <_printf_i+0x14c>
 8044ec4:	6823      	ldr	r3, [r4, #0]
 8044ec6:	07df      	lsls	r7, r3, #31
 8044ec8:	d508      	bpl.n	8044edc <_printf_i+0x14c>
 8044eca:	6923      	ldr	r3, [r4, #16]
 8044ecc:	6861      	ldr	r1, [r4, #4]
 8044ece:	4299      	cmp	r1, r3
 8044ed0:	bfde      	ittt	le
 8044ed2:	2330      	movle	r3, #48	; 0x30
 8044ed4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8044ed8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8044edc:	1b92      	subs	r2, r2, r6
 8044ede:	6122      	str	r2, [r4, #16]
 8044ee0:	464b      	mov	r3, r9
 8044ee2:	aa03      	add	r2, sp, #12
 8044ee4:	4621      	mov	r1, r4
 8044ee6:	4640      	mov	r0, r8
 8044ee8:	f8cd a000 	str.w	sl, [sp]
 8044eec:	f7ff fee0 	bl	8044cb0 <_printf_common>
 8044ef0:	3001      	adds	r0, #1
 8044ef2:	d14c      	bne.n	8044f8e <_printf_i+0x1fe>
 8044ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8044ef8:	b004      	add	sp, #16
 8044efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044efe:	4835      	ldr	r0, [pc, #212]	; (8044fd4 <_printf_i+0x244>)
 8044f00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8044f04:	6823      	ldr	r3, [r4, #0]
 8044f06:	680e      	ldr	r6, [r1, #0]
 8044f08:	061f      	lsls	r7, r3, #24
 8044f0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8044f0e:	600e      	str	r6, [r1, #0]
 8044f10:	d514      	bpl.n	8044f3c <_printf_i+0x1ac>
 8044f12:	07d9      	lsls	r1, r3, #31
 8044f14:	bf44      	itt	mi
 8044f16:	f043 0320 	orrmi.w	r3, r3, #32
 8044f1a:	6023      	strmi	r3, [r4, #0]
 8044f1c:	b91d      	cbnz	r5, 8044f26 <_printf_i+0x196>
 8044f1e:	6823      	ldr	r3, [r4, #0]
 8044f20:	f023 0320 	bic.w	r3, r3, #32
 8044f24:	6023      	str	r3, [r4, #0]
 8044f26:	2310      	movs	r3, #16
 8044f28:	e7b0      	b.n	8044e8c <_printf_i+0xfc>
 8044f2a:	6823      	ldr	r3, [r4, #0]
 8044f2c:	f043 0320 	orr.w	r3, r3, #32
 8044f30:	6023      	str	r3, [r4, #0]
 8044f32:	2378      	movs	r3, #120	; 0x78
 8044f34:	4828      	ldr	r0, [pc, #160]	; (8044fd8 <_printf_i+0x248>)
 8044f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8044f3a:	e7e3      	b.n	8044f04 <_printf_i+0x174>
 8044f3c:	065e      	lsls	r6, r3, #25
 8044f3e:	bf48      	it	mi
 8044f40:	b2ad      	uxthmi	r5, r5
 8044f42:	e7e6      	b.n	8044f12 <_printf_i+0x182>
 8044f44:	4616      	mov	r6, r2
 8044f46:	e7bb      	b.n	8044ec0 <_printf_i+0x130>
 8044f48:	680b      	ldr	r3, [r1, #0]
 8044f4a:	6826      	ldr	r6, [r4, #0]
 8044f4c:	1d1d      	adds	r5, r3, #4
 8044f4e:	6960      	ldr	r0, [r4, #20]
 8044f50:	600d      	str	r5, [r1, #0]
 8044f52:	0635      	lsls	r5, r6, #24
 8044f54:	681b      	ldr	r3, [r3, #0]
 8044f56:	d501      	bpl.n	8044f5c <_printf_i+0x1cc>
 8044f58:	6018      	str	r0, [r3, #0]
 8044f5a:	e002      	b.n	8044f62 <_printf_i+0x1d2>
 8044f5c:	0671      	lsls	r1, r6, #25
 8044f5e:	d5fb      	bpl.n	8044f58 <_printf_i+0x1c8>
 8044f60:	8018      	strh	r0, [r3, #0]
 8044f62:	2300      	movs	r3, #0
 8044f64:	4616      	mov	r6, r2
 8044f66:	6123      	str	r3, [r4, #16]
 8044f68:	e7ba      	b.n	8044ee0 <_printf_i+0x150>
 8044f6a:	680b      	ldr	r3, [r1, #0]
 8044f6c:	1d1a      	adds	r2, r3, #4
 8044f6e:	600a      	str	r2, [r1, #0]
 8044f70:	2100      	movs	r1, #0
 8044f72:	681e      	ldr	r6, [r3, #0]
 8044f74:	6862      	ldr	r2, [r4, #4]
 8044f76:	4630      	mov	r0, r6
 8044f78:	f000 fa9c 	bl	80454b4 <memchr>
 8044f7c:	b108      	cbz	r0, 8044f82 <_printf_i+0x1f2>
 8044f7e:	1b80      	subs	r0, r0, r6
 8044f80:	6060      	str	r0, [r4, #4]
 8044f82:	6863      	ldr	r3, [r4, #4]
 8044f84:	6123      	str	r3, [r4, #16]
 8044f86:	2300      	movs	r3, #0
 8044f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8044f8c:	e7a8      	b.n	8044ee0 <_printf_i+0x150>
 8044f8e:	6923      	ldr	r3, [r4, #16]
 8044f90:	4632      	mov	r2, r6
 8044f92:	4649      	mov	r1, r9
 8044f94:	4640      	mov	r0, r8
 8044f96:	47d0      	blx	sl
 8044f98:	3001      	adds	r0, #1
 8044f9a:	d0ab      	beq.n	8044ef4 <_printf_i+0x164>
 8044f9c:	6823      	ldr	r3, [r4, #0]
 8044f9e:	079b      	lsls	r3, r3, #30
 8044fa0:	d413      	bmi.n	8044fca <_printf_i+0x23a>
 8044fa2:	68e0      	ldr	r0, [r4, #12]
 8044fa4:	9b03      	ldr	r3, [sp, #12]
 8044fa6:	4298      	cmp	r0, r3
 8044fa8:	bfb8      	it	lt
 8044faa:	4618      	movlt	r0, r3
 8044fac:	e7a4      	b.n	8044ef8 <_printf_i+0x168>
 8044fae:	2301      	movs	r3, #1
 8044fb0:	4632      	mov	r2, r6
 8044fb2:	4649      	mov	r1, r9
 8044fb4:	4640      	mov	r0, r8
 8044fb6:	47d0      	blx	sl
 8044fb8:	3001      	adds	r0, #1
 8044fba:	d09b      	beq.n	8044ef4 <_printf_i+0x164>
 8044fbc:	3501      	adds	r5, #1
 8044fbe:	68e3      	ldr	r3, [r4, #12]
 8044fc0:	9903      	ldr	r1, [sp, #12]
 8044fc2:	1a5b      	subs	r3, r3, r1
 8044fc4:	42ab      	cmp	r3, r5
 8044fc6:	dcf2      	bgt.n	8044fae <_printf_i+0x21e>
 8044fc8:	e7eb      	b.n	8044fa2 <_printf_i+0x212>
 8044fca:	2500      	movs	r5, #0
 8044fcc:	f104 0619 	add.w	r6, r4, #25
 8044fd0:	e7f5      	b.n	8044fbe <_printf_i+0x22e>
 8044fd2:	bf00      	nop
 8044fd4:	08045729 	.word	0x08045729
 8044fd8:	0804573a 	.word	0x0804573a

08044fdc <_sbrk_r>:
 8044fdc:	b538      	push	{r3, r4, r5, lr}
 8044fde:	2300      	movs	r3, #0
 8044fe0:	4d05      	ldr	r5, [pc, #20]	; (8044ff8 <_sbrk_r+0x1c>)
 8044fe2:	4604      	mov	r4, r0
 8044fe4:	4608      	mov	r0, r1
 8044fe6:	602b      	str	r3, [r5, #0]
 8044fe8:	f7fb fcec 	bl	80409c4 <_sbrk>
 8044fec:	1c43      	adds	r3, r0, #1
 8044fee:	d102      	bne.n	8044ff6 <_sbrk_r+0x1a>
 8044ff0:	682b      	ldr	r3, [r5, #0]
 8044ff2:	b103      	cbz	r3, 8044ff6 <_sbrk_r+0x1a>
 8044ff4:	6023      	str	r3, [r4, #0]
 8044ff6:	bd38      	pop	{r3, r4, r5, pc}
 8044ff8:	200301fc 	.word	0x200301fc

08044ffc <__sread>:
 8044ffc:	b510      	push	{r4, lr}
 8044ffe:	460c      	mov	r4, r1
 8045000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8045004:	f000 fac0 	bl	8045588 <_read_r>
 8045008:	2800      	cmp	r0, #0
 804500a:	bfab      	itete	ge
 804500c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804500e:	89a3      	ldrhlt	r3, [r4, #12]
 8045010:	181b      	addge	r3, r3, r0
 8045012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8045016:	bfac      	ite	ge
 8045018:	6563      	strge	r3, [r4, #84]	; 0x54
 804501a:	81a3      	strhlt	r3, [r4, #12]
 804501c:	bd10      	pop	{r4, pc}

0804501e <__swrite>:
 804501e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8045022:	461f      	mov	r7, r3
 8045024:	898b      	ldrh	r3, [r1, #12]
 8045026:	4605      	mov	r5, r0
 8045028:	460c      	mov	r4, r1
 804502a:	05db      	lsls	r3, r3, #23
 804502c:	4616      	mov	r6, r2
 804502e:	d505      	bpl.n	804503c <__swrite+0x1e>
 8045030:	2302      	movs	r3, #2
 8045032:	2200      	movs	r2, #0
 8045034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8045038:	f000 f9c6 	bl	80453c8 <_lseek_r>
 804503c:	89a3      	ldrh	r3, [r4, #12]
 804503e:	4632      	mov	r2, r6
 8045040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8045044:	4628      	mov	r0, r5
 8045046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804504a:	81a3      	strh	r3, [r4, #12]
 804504c:	463b      	mov	r3, r7
 804504e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8045052:	f000 b869 	b.w	8045128 <_write_r>

08045056 <__sseek>:
 8045056:	b510      	push	{r4, lr}
 8045058:	460c      	mov	r4, r1
 804505a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804505e:	f000 f9b3 	bl	80453c8 <_lseek_r>
 8045062:	1c43      	adds	r3, r0, #1
 8045064:	89a3      	ldrh	r3, [r4, #12]
 8045066:	bf15      	itete	ne
 8045068:	6560      	strne	r0, [r4, #84]	; 0x54
 804506a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804506e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8045072:	81a3      	strheq	r3, [r4, #12]
 8045074:	bf18      	it	ne
 8045076:	81a3      	strhne	r3, [r4, #12]
 8045078:	bd10      	pop	{r4, pc}

0804507a <__sclose>:
 804507a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804507e:	f000 b8d3 	b.w	8045228 <_close_r>
	...

08045084 <__swbuf_r>:
 8045084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045086:	460e      	mov	r6, r1
 8045088:	4614      	mov	r4, r2
 804508a:	4605      	mov	r5, r0
 804508c:	b118      	cbz	r0, 8045096 <__swbuf_r+0x12>
 804508e:	6983      	ldr	r3, [r0, #24]
 8045090:	b90b      	cbnz	r3, 8045096 <__swbuf_r+0x12>
 8045092:	f7ff fbb9 	bl	8044808 <__sinit>
 8045096:	4b21      	ldr	r3, [pc, #132]	; (804511c <__swbuf_r+0x98>)
 8045098:	429c      	cmp	r4, r3
 804509a:	d12b      	bne.n	80450f4 <__swbuf_r+0x70>
 804509c:	686c      	ldr	r4, [r5, #4]
 804509e:	69a3      	ldr	r3, [r4, #24]
 80450a0:	60a3      	str	r3, [r4, #8]
 80450a2:	89a3      	ldrh	r3, [r4, #12]
 80450a4:	071a      	lsls	r2, r3, #28
 80450a6:	d52f      	bpl.n	8045108 <__swbuf_r+0x84>
 80450a8:	6923      	ldr	r3, [r4, #16]
 80450aa:	b36b      	cbz	r3, 8045108 <__swbuf_r+0x84>
 80450ac:	6923      	ldr	r3, [r4, #16]
 80450ae:	b2f6      	uxtb	r6, r6
 80450b0:	6820      	ldr	r0, [r4, #0]
 80450b2:	4637      	mov	r7, r6
 80450b4:	1ac0      	subs	r0, r0, r3
 80450b6:	6963      	ldr	r3, [r4, #20]
 80450b8:	4283      	cmp	r3, r0
 80450ba:	dc04      	bgt.n	80450c6 <__swbuf_r+0x42>
 80450bc:	4621      	mov	r1, r4
 80450be:	4628      	mov	r0, r5
 80450c0:	f000 f946 	bl	8045350 <_fflush_r>
 80450c4:	bb30      	cbnz	r0, 8045114 <__swbuf_r+0x90>
 80450c6:	68a3      	ldr	r3, [r4, #8]
 80450c8:	3001      	adds	r0, #1
 80450ca:	3b01      	subs	r3, #1
 80450cc:	60a3      	str	r3, [r4, #8]
 80450ce:	6823      	ldr	r3, [r4, #0]
 80450d0:	1c5a      	adds	r2, r3, #1
 80450d2:	6022      	str	r2, [r4, #0]
 80450d4:	701e      	strb	r6, [r3, #0]
 80450d6:	6963      	ldr	r3, [r4, #20]
 80450d8:	4283      	cmp	r3, r0
 80450da:	d004      	beq.n	80450e6 <__swbuf_r+0x62>
 80450dc:	89a3      	ldrh	r3, [r4, #12]
 80450de:	07db      	lsls	r3, r3, #31
 80450e0:	d506      	bpl.n	80450f0 <__swbuf_r+0x6c>
 80450e2:	2e0a      	cmp	r6, #10
 80450e4:	d104      	bne.n	80450f0 <__swbuf_r+0x6c>
 80450e6:	4621      	mov	r1, r4
 80450e8:	4628      	mov	r0, r5
 80450ea:	f000 f931 	bl	8045350 <_fflush_r>
 80450ee:	b988      	cbnz	r0, 8045114 <__swbuf_r+0x90>
 80450f0:	4638      	mov	r0, r7
 80450f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80450f4:	4b0a      	ldr	r3, [pc, #40]	; (8045120 <__swbuf_r+0x9c>)
 80450f6:	429c      	cmp	r4, r3
 80450f8:	d101      	bne.n	80450fe <__swbuf_r+0x7a>
 80450fa:	68ac      	ldr	r4, [r5, #8]
 80450fc:	e7cf      	b.n	804509e <__swbuf_r+0x1a>
 80450fe:	4b09      	ldr	r3, [pc, #36]	; (8045124 <__swbuf_r+0xa0>)
 8045100:	429c      	cmp	r4, r3
 8045102:	bf08      	it	eq
 8045104:	68ec      	ldreq	r4, [r5, #12]
 8045106:	e7ca      	b.n	804509e <__swbuf_r+0x1a>
 8045108:	4621      	mov	r1, r4
 804510a:	4628      	mov	r0, r5
 804510c:	f000 f81e 	bl	804514c <__swsetup_r>
 8045110:	2800      	cmp	r0, #0
 8045112:	d0cb      	beq.n	80450ac <__swbuf_r+0x28>
 8045114:	f04f 37ff 	mov.w	r7, #4294967295
 8045118:	e7ea      	b.n	80450f0 <__swbuf_r+0x6c>
 804511a:	bf00      	nop
 804511c:	080456d8 	.word	0x080456d8
 8045120:	080456f8 	.word	0x080456f8
 8045124:	080456b8 	.word	0x080456b8

08045128 <_write_r>:
 8045128:	b538      	push	{r3, r4, r5, lr}
 804512a:	4604      	mov	r4, r0
 804512c:	4d06      	ldr	r5, [pc, #24]	; (8045148 <_write_r+0x20>)
 804512e:	4608      	mov	r0, r1
 8045130:	4611      	mov	r1, r2
 8045132:	2200      	movs	r2, #0
 8045134:	602a      	str	r2, [r5, #0]
 8045136:	461a      	mov	r2, r3
 8045138:	f7fb fa9c 	bl	8040674 <_write>
 804513c:	1c43      	adds	r3, r0, #1
 804513e:	d102      	bne.n	8045146 <_write_r+0x1e>
 8045140:	682b      	ldr	r3, [r5, #0]
 8045142:	b103      	cbz	r3, 8045146 <_write_r+0x1e>
 8045144:	6023      	str	r3, [r4, #0]
 8045146:	bd38      	pop	{r3, r4, r5, pc}
 8045148:	200301fc 	.word	0x200301fc

0804514c <__swsetup_r>:
 804514c:	4b32      	ldr	r3, [pc, #200]	; (8045218 <__swsetup_r+0xcc>)
 804514e:	b570      	push	{r4, r5, r6, lr}
 8045150:	681d      	ldr	r5, [r3, #0]
 8045152:	4606      	mov	r6, r0
 8045154:	460c      	mov	r4, r1
 8045156:	b125      	cbz	r5, 8045162 <__swsetup_r+0x16>
 8045158:	69ab      	ldr	r3, [r5, #24]
 804515a:	b913      	cbnz	r3, 8045162 <__swsetup_r+0x16>
 804515c:	4628      	mov	r0, r5
 804515e:	f7ff fb53 	bl	8044808 <__sinit>
 8045162:	4b2e      	ldr	r3, [pc, #184]	; (804521c <__swsetup_r+0xd0>)
 8045164:	429c      	cmp	r4, r3
 8045166:	d10f      	bne.n	8045188 <__swsetup_r+0x3c>
 8045168:	686c      	ldr	r4, [r5, #4]
 804516a:	89a3      	ldrh	r3, [r4, #12]
 804516c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8045170:	0719      	lsls	r1, r3, #28
 8045172:	d42c      	bmi.n	80451ce <__swsetup_r+0x82>
 8045174:	06dd      	lsls	r5, r3, #27
 8045176:	d411      	bmi.n	804519c <__swsetup_r+0x50>
 8045178:	2309      	movs	r3, #9
 804517a:	6033      	str	r3, [r6, #0]
 804517c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8045180:	f04f 30ff 	mov.w	r0, #4294967295
 8045184:	81a3      	strh	r3, [r4, #12]
 8045186:	e03e      	b.n	8045206 <__swsetup_r+0xba>
 8045188:	4b25      	ldr	r3, [pc, #148]	; (8045220 <__swsetup_r+0xd4>)
 804518a:	429c      	cmp	r4, r3
 804518c:	d101      	bne.n	8045192 <__swsetup_r+0x46>
 804518e:	68ac      	ldr	r4, [r5, #8]
 8045190:	e7eb      	b.n	804516a <__swsetup_r+0x1e>
 8045192:	4b24      	ldr	r3, [pc, #144]	; (8045224 <__swsetup_r+0xd8>)
 8045194:	429c      	cmp	r4, r3
 8045196:	bf08      	it	eq
 8045198:	68ec      	ldreq	r4, [r5, #12]
 804519a:	e7e6      	b.n	804516a <__swsetup_r+0x1e>
 804519c:	0758      	lsls	r0, r3, #29
 804519e:	d512      	bpl.n	80451c6 <__swsetup_r+0x7a>
 80451a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80451a2:	b141      	cbz	r1, 80451b6 <__swsetup_r+0x6a>
 80451a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80451a8:	4299      	cmp	r1, r3
 80451aa:	d002      	beq.n	80451b2 <__swsetup_r+0x66>
 80451ac:	4630      	mov	r0, r6
 80451ae:	f000 f99b 	bl	80454e8 <_free_r>
 80451b2:	2300      	movs	r3, #0
 80451b4:	6363      	str	r3, [r4, #52]	; 0x34
 80451b6:	89a3      	ldrh	r3, [r4, #12]
 80451b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80451bc:	81a3      	strh	r3, [r4, #12]
 80451be:	2300      	movs	r3, #0
 80451c0:	6063      	str	r3, [r4, #4]
 80451c2:	6923      	ldr	r3, [r4, #16]
 80451c4:	6023      	str	r3, [r4, #0]
 80451c6:	89a3      	ldrh	r3, [r4, #12]
 80451c8:	f043 0308 	orr.w	r3, r3, #8
 80451cc:	81a3      	strh	r3, [r4, #12]
 80451ce:	6923      	ldr	r3, [r4, #16]
 80451d0:	b94b      	cbnz	r3, 80451e6 <__swsetup_r+0x9a>
 80451d2:	89a3      	ldrh	r3, [r4, #12]
 80451d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80451d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80451dc:	d003      	beq.n	80451e6 <__swsetup_r+0x9a>
 80451de:	4621      	mov	r1, r4
 80451e0:	4630      	mov	r0, r6
 80451e2:	f000 f927 	bl	8045434 <__smakebuf_r>
 80451e6:	89a0      	ldrh	r0, [r4, #12]
 80451e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80451ec:	f010 0301 	ands.w	r3, r0, #1
 80451f0:	d00a      	beq.n	8045208 <__swsetup_r+0xbc>
 80451f2:	2300      	movs	r3, #0
 80451f4:	60a3      	str	r3, [r4, #8]
 80451f6:	6963      	ldr	r3, [r4, #20]
 80451f8:	425b      	negs	r3, r3
 80451fa:	61a3      	str	r3, [r4, #24]
 80451fc:	6923      	ldr	r3, [r4, #16]
 80451fe:	b943      	cbnz	r3, 8045212 <__swsetup_r+0xc6>
 8045200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8045204:	d1ba      	bne.n	804517c <__swsetup_r+0x30>
 8045206:	bd70      	pop	{r4, r5, r6, pc}
 8045208:	0781      	lsls	r1, r0, #30
 804520a:	bf58      	it	pl
 804520c:	6963      	ldrpl	r3, [r4, #20]
 804520e:	60a3      	str	r3, [r4, #8]
 8045210:	e7f4      	b.n	80451fc <__swsetup_r+0xb0>
 8045212:	2000      	movs	r0, #0
 8045214:	e7f7      	b.n	8045206 <__swsetup_r+0xba>
 8045216:	bf00      	nop
 8045218:	2003000c 	.word	0x2003000c
 804521c:	080456d8 	.word	0x080456d8
 8045220:	080456f8 	.word	0x080456f8
 8045224:	080456b8 	.word	0x080456b8

08045228 <_close_r>:
 8045228:	b538      	push	{r3, r4, r5, lr}
 804522a:	2300      	movs	r3, #0
 804522c:	4d05      	ldr	r5, [pc, #20]	; (8045244 <_close_r+0x1c>)
 804522e:	4604      	mov	r4, r0
 8045230:	4608      	mov	r0, r1
 8045232:	602b      	str	r3, [r5, #0]
 8045234:	f7fb fb91 	bl	804095a <_close>
 8045238:	1c43      	adds	r3, r0, #1
 804523a:	d102      	bne.n	8045242 <_close_r+0x1a>
 804523c:	682b      	ldr	r3, [r5, #0]
 804523e:	b103      	cbz	r3, 8045242 <_close_r+0x1a>
 8045240:	6023      	str	r3, [r4, #0]
 8045242:	bd38      	pop	{r3, r4, r5, pc}
 8045244:	200301fc 	.word	0x200301fc

08045248 <__sflush_r>:
 8045248:	898a      	ldrh	r2, [r1, #12]
 804524a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804524e:	4605      	mov	r5, r0
 8045250:	0710      	lsls	r0, r2, #28
 8045252:	460c      	mov	r4, r1
 8045254:	d458      	bmi.n	8045308 <__sflush_r+0xc0>
 8045256:	684b      	ldr	r3, [r1, #4]
 8045258:	2b00      	cmp	r3, #0
 804525a:	dc05      	bgt.n	8045268 <__sflush_r+0x20>
 804525c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804525e:	2b00      	cmp	r3, #0
 8045260:	dc02      	bgt.n	8045268 <__sflush_r+0x20>
 8045262:	2000      	movs	r0, #0
 8045264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8045268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804526a:	2e00      	cmp	r6, #0
 804526c:	d0f9      	beq.n	8045262 <__sflush_r+0x1a>
 804526e:	2300      	movs	r3, #0
 8045270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8045274:	682f      	ldr	r7, [r5, #0]
 8045276:	602b      	str	r3, [r5, #0]
 8045278:	d032      	beq.n	80452e0 <__sflush_r+0x98>
 804527a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804527c:	89a3      	ldrh	r3, [r4, #12]
 804527e:	075a      	lsls	r2, r3, #29
 8045280:	d505      	bpl.n	804528e <__sflush_r+0x46>
 8045282:	6863      	ldr	r3, [r4, #4]
 8045284:	1ac0      	subs	r0, r0, r3
 8045286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8045288:	b10b      	cbz	r3, 804528e <__sflush_r+0x46>
 804528a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804528c:	1ac0      	subs	r0, r0, r3
 804528e:	2300      	movs	r3, #0
 8045290:	4602      	mov	r2, r0
 8045292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8045294:	4628      	mov	r0, r5
 8045296:	6a21      	ldr	r1, [r4, #32]
 8045298:	47b0      	blx	r6
 804529a:	1c43      	adds	r3, r0, #1
 804529c:	89a3      	ldrh	r3, [r4, #12]
 804529e:	d106      	bne.n	80452ae <__sflush_r+0x66>
 80452a0:	6829      	ldr	r1, [r5, #0]
 80452a2:	291d      	cmp	r1, #29
 80452a4:	d82c      	bhi.n	8045300 <__sflush_r+0xb8>
 80452a6:	4a29      	ldr	r2, [pc, #164]	; (804534c <__sflush_r+0x104>)
 80452a8:	40ca      	lsrs	r2, r1
 80452aa:	07d6      	lsls	r6, r2, #31
 80452ac:	d528      	bpl.n	8045300 <__sflush_r+0xb8>
 80452ae:	2200      	movs	r2, #0
 80452b0:	04d9      	lsls	r1, r3, #19
 80452b2:	6062      	str	r2, [r4, #4]
 80452b4:	6922      	ldr	r2, [r4, #16]
 80452b6:	6022      	str	r2, [r4, #0]
 80452b8:	d504      	bpl.n	80452c4 <__sflush_r+0x7c>
 80452ba:	1c42      	adds	r2, r0, #1
 80452bc:	d101      	bne.n	80452c2 <__sflush_r+0x7a>
 80452be:	682b      	ldr	r3, [r5, #0]
 80452c0:	b903      	cbnz	r3, 80452c4 <__sflush_r+0x7c>
 80452c2:	6560      	str	r0, [r4, #84]	; 0x54
 80452c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80452c6:	602f      	str	r7, [r5, #0]
 80452c8:	2900      	cmp	r1, #0
 80452ca:	d0ca      	beq.n	8045262 <__sflush_r+0x1a>
 80452cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80452d0:	4299      	cmp	r1, r3
 80452d2:	d002      	beq.n	80452da <__sflush_r+0x92>
 80452d4:	4628      	mov	r0, r5
 80452d6:	f000 f907 	bl	80454e8 <_free_r>
 80452da:	2000      	movs	r0, #0
 80452dc:	6360      	str	r0, [r4, #52]	; 0x34
 80452de:	e7c1      	b.n	8045264 <__sflush_r+0x1c>
 80452e0:	6a21      	ldr	r1, [r4, #32]
 80452e2:	2301      	movs	r3, #1
 80452e4:	4628      	mov	r0, r5
 80452e6:	47b0      	blx	r6
 80452e8:	1c41      	adds	r1, r0, #1
 80452ea:	d1c7      	bne.n	804527c <__sflush_r+0x34>
 80452ec:	682b      	ldr	r3, [r5, #0]
 80452ee:	2b00      	cmp	r3, #0
 80452f0:	d0c4      	beq.n	804527c <__sflush_r+0x34>
 80452f2:	2b1d      	cmp	r3, #29
 80452f4:	d001      	beq.n	80452fa <__sflush_r+0xb2>
 80452f6:	2b16      	cmp	r3, #22
 80452f8:	d101      	bne.n	80452fe <__sflush_r+0xb6>
 80452fa:	602f      	str	r7, [r5, #0]
 80452fc:	e7b1      	b.n	8045262 <__sflush_r+0x1a>
 80452fe:	89a3      	ldrh	r3, [r4, #12]
 8045300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8045304:	81a3      	strh	r3, [r4, #12]
 8045306:	e7ad      	b.n	8045264 <__sflush_r+0x1c>
 8045308:	690f      	ldr	r7, [r1, #16]
 804530a:	2f00      	cmp	r7, #0
 804530c:	d0a9      	beq.n	8045262 <__sflush_r+0x1a>
 804530e:	0793      	lsls	r3, r2, #30
 8045310:	680e      	ldr	r6, [r1, #0]
 8045312:	600f      	str	r7, [r1, #0]
 8045314:	bf0c      	ite	eq
 8045316:	694b      	ldreq	r3, [r1, #20]
 8045318:	2300      	movne	r3, #0
 804531a:	eba6 0807 	sub.w	r8, r6, r7
 804531e:	608b      	str	r3, [r1, #8]
 8045320:	f1b8 0f00 	cmp.w	r8, #0
 8045324:	dd9d      	ble.n	8045262 <__sflush_r+0x1a>
 8045326:	4643      	mov	r3, r8
 8045328:	463a      	mov	r2, r7
 804532a:	6a21      	ldr	r1, [r4, #32]
 804532c:	4628      	mov	r0, r5
 804532e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8045330:	47b0      	blx	r6
 8045332:	2800      	cmp	r0, #0
 8045334:	dc06      	bgt.n	8045344 <__sflush_r+0xfc>
 8045336:	89a3      	ldrh	r3, [r4, #12]
 8045338:	f04f 30ff 	mov.w	r0, #4294967295
 804533c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8045340:	81a3      	strh	r3, [r4, #12]
 8045342:	e78f      	b.n	8045264 <__sflush_r+0x1c>
 8045344:	4407      	add	r7, r0
 8045346:	eba8 0800 	sub.w	r8, r8, r0
 804534a:	e7e9      	b.n	8045320 <__sflush_r+0xd8>
 804534c:	20400001 	.word	0x20400001

08045350 <_fflush_r>:
 8045350:	b538      	push	{r3, r4, r5, lr}
 8045352:	690b      	ldr	r3, [r1, #16]
 8045354:	4605      	mov	r5, r0
 8045356:	460c      	mov	r4, r1
 8045358:	b913      	cbnz	r3, 8045360 <_fflush_r+0x10>
 804535a:	2500      	movs	r5, #0
 804535c:	4628      	mov	r0, r5
 804535e:	bd38      	pop	{r3, r4, r5, pc}
 8045360:	b118      	cbz	r0, 804536a <_fflush_r+0x1a>
 8045362:	6983      	ldr	r3, [r0, #24]
 8045364:	b90b      	cbnz	r3, 804536a <_fflush_r+0x1a>
 8045366:	f7ff fa4f 	bl	8044808 <__sinit>
 804536a:	4b14      	ldr	r3, [pc, #80]	; (80453bc <_fflush_r+0x6c>)
 804536c:	429c      	cmp	r4, r3
 804536e:	d11b      	bne.n	80453a8 <_fflush_r+0x58>
 8045370:	686c      	ldr	r4, [r5, #4]
 8045372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8045376:	2b00      	cmp	r3, #0
 8045378:	d0ef      	beq.n	804535a <_fflush_r+0xa>
 804537a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804537c:	07d0      	lsls	r0, r2, #31
 804537e:	d404      	bmi.n	804538a <_fflush_r+0x3a>
 8045380:	0599      	lsls	r1, r3, #22
 8045382:	d402      	bmi.n	804538a <_fflush_r+0x3a>
 8045384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8045386:	f7ff fadd 	bl	8044944 <__retarget_lock_acquire_recursive>
 804538a:	4628      	mov	r0, r5
 804538c:	4621      	mov	r1, r4
 804538e:	f7ff ff5b 	bl	8045248 <__sflush_r>
 8045392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8045394:	4605      	mov	r5, r0
 8045396:	07da      	lsls	r2, r3, #31
 8045398:	d4e0      	bmi.n	804535c <_fflush_r+0xc>
 804539a:	89a3      	ldrh	r3, [r4, #12]
 804539c:	059b      	lsls	r3, r3, #22
 804539e:	d4dd      	bmi.n	804535c <_fflush_r+0xc>
 80453a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80453a2:	f7ff fad0 	bl	8044946 <__retarget_lock_release_recursive>
 80453a6:	e7d9      	b.n	804535c <_fflush_r+0xc>
 80453a8:	4b05      	ldr	r3, [pc, #20]	; (80453c0 <_fflush_r+0x70>)
 80453aa:	429c      	cmp	r4, r3
 80453ac:	d101      	bne.n	80453b2 <_fflush_r+0x62>
 80453ae:	68ac      	ldr	r4, [r5, #8]
 80453b0:	e7df      	b.n	8045372 <_fflush_r+0x22>
 80453b2:	4b04      	ldr	r3, [pc, #16]	; (80453c4 <_fflush_r+0x74>)
 80453b4:	429c      	cmp	r4, r3
 80453b6:	bf08      	it	eq
 80453b8:	68ec      	ldreq	r4, [r5, #12]
 80453ba:	e7da      	b.n	8045372 <_fflush_r+0x22>
 80453bc:	080456d8 	.word	0x080456d8
 80453c0:	080456f8 	.word	0x080456f8
 80453c4:	080456b8 	.word	0x080456b8

080453c8 <_lseek_r>:
 80453c8:	b538      	push	{r3, r4, r5, lr}
 80453ca:	4604      	mov	r4, r0
 80453cc:	4d06      	ldr	r5, [pc, #24]	; (80453e8 <_lseek_r+0x20>)
 80453ce:	4608      	mov	r0, r1
 80453d0:	4611      	mov	r1, r2
 80453d2:	2200      	movs	r2, #0
 80453d4:	602a      	str	r2, [r5, #0]
 80453d6:	461a      	mov	r2, r3
 80453d8:	f7fb fae6 	bl	80409a8 <_lseek>
 80453dc:	1c43      	adds	r3, r0, #1
 80453de:	d102      	bne.n	80453e6 <_lseek_r+0x1e>
 80453e0:	682b      	ldr	r3, [r5, #0]
 80453e2:	b103      	cbz	r3, 80453e6 <_lseek_r+0x1e>
 80453e4:	6023      	str	r3, [r4, #0]
 80453e6:	bd38      	pop	{r3, r4, r5, pc}
 80453e8:	200301fc 	.word	0x200301fc

080453ec <__swhatbuf_r>:
 80453ec:	b570      	push	{r4, r5, r6, lr}
 80453ee:	460e      	mov	r6, r1
 80453f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80453f4:	b096      	sub	sp, #88	; 0x58
 80453f6:	4614      	mov	r4, r2
 80453f8:	2900      	cmp	r1, #0
 80453fa:	461d      	mov	r5, r3
 80453fc:	da07      	bge.n	804540e <__swhatbuf_r+0x22>
 80453fe:	2300      	movs	r3, #0
 8045400:	602b      	str	r3, [r5, #0]
 8045402:	89b3      	ldrh	r3, [r6, #12]
 8045404:	061a      	lsls	r2, r3, #24
 8045406:	d410      	bmi.n	804542a <__swhatbuf_r+0x3e>
 8045408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804540c:	e00e      	b.n	804542c <__swhatbuf_r+0x40>
 804540e:	466a      	mov	r2, sp
 8045410:	f000 f8cc 	bl	80455ac <_fstat_r>
 8045414:	2800      	cmp	r0, #0
 8045416:	dbf2      	blt.n	80453fe <__swhatbuf_r+0x12>
 8045418:	9a01      	ldr	r2, [sp, #4]
 804541a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804541e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8045422:	425a      	negs	r2, r3
 8045424:	415a      	adcs	r2, r3
 8045426:	602a      	str	r2, [r5, #0]
 8045428:	e7ee      	b.n	8045408 <__swhatbuf_r+0x1c>
 804542a:	2340      	movs	r3, #64	; 0x40
 804542c:	2000      	movs	r0, #0
 804542e:	6023      	str	r3, [r4, #0]
 8045430:	b016      	add	sp, #88	; 0x58
 8045432:	bd70      	pop	{r4, r5, r6, pc}

08045434 <__smakebuf_r>:
 8045434:	898b      	ldrh	r3, [r1, #12]
 8045436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8045438:	079d      	lsls	r5, r3, #30
 804543a:	4606      	mov	r6, r0
 804543c:	460c      	mov	r4, r1
 804543e:	d507      	bpl.n	8045450 <__smakebuf_r+0x1c>
 8045440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8045444:	6023      	str	r3, [r4, #0]
 8045446:	6123      	str	r3, [r4, #16]
 8045448:	2301      	movs	r3, #1
 804544a:	6163      	str	r3, [r4, #20]
 804544c:	b002      	add	sp, #8
 804544e:	bd70      	pop	{r4, r5, r6, pc}
 8045450:	ab01      	add	r3, sp, #4
 8045452:	466a      	mov	r2, sp
 8045454:	f7ff ffca 	bl	80453ec <__swhatbuf_r>
 8045458:	9900      	ldr	r1, [sp, #0]
 804545a:	4605      	mov	r5, r0
 804545c:	4630      	mov	r0, r6
 804545e:	f7ff fa73 	bl	8044948 <_malloc_r>
 8045462:	b948      	cbnz	r0, 8045478 <__smakebuf_r+0x44>
 8045464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8045468:	059a      	lsls	r2, r3, #22
 804546a:	d4ef      	bmi.n	804544c <__smakebuf_r+0x18>
 804546c:	f023 0303 	bic.w	r3, r3, #3
 8045470:	f043 0302 	orr.w	r3, r3, #2
 8045474:	81a3      	strh	r3, [r4, #12]
 8045476:	e7e3      	b.n	8045440 <__smakebuf_r+0xc>
 8045478:	4b0d      	ldr	r3, [pc, #52]	; (80454b0 <__smakebuf_r+0x7c>)
 804547a:	62b3      	str	r3, [r6, #40]	; 0x28
 804547c:	89a3      	ldrh	r3, [r4, #12]
 804547e:	6020      	str	r0, [r4, #0]
 8045480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8045484:	6120      	str	r0, [r4, #16]
 8045486:	81a3      	strh	r3, [r4, #12]
 8045488:	9b00      	ldr	r3, [sp, #0]
 804548a:	6163      	str	r3, [r4, #20]
 804548c:	9b01      	ldr	r3, [sp, #4]
 804548e:	b15b      	cbz	r3, 80454a8 <__smakebuf_r+0x74>
 8045490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8045494:	4630      	mov	r0, r6
 8045496:	f000 f89b 	bl	80455d0 <_isatty_r>
 804549a:	b128      	cbz	r0, 80454a8 <__smakebuf_r+0x74>
 804549c:	89a3      	ldrh	r3, [r4, #12]
 804549e:	f023 0303 	bic.w	r3, r3, #3
 80454a2:	f043 0301 	orr.w	r3, r3, #1
 80454a6:	81a3      	strh	r3, [r4, #12]
 80454a8:	89a0      	ldrh	r0, [r4, #12]
 80454aa:	4305      	orrs	r5, r0
 80454ac:	81a5      	strh	r5, [r4, #12]
 80454ae:	e7cd      	b.n	804544c <__smakebuf_r+0x18>
 80454b0:	080447a1 	.word	0x080447a1

080454b4 <memchr>:
 80454b4:	b2c9      	uxtb	r1, r1
 80454b6:	4402      	add	r2, r0
 80454b8:	b510      	push	{r4, lr}
 80454ba:	4290      	cmp	r0, r2
 80454bc:	4603      	mov	r3, r0
 80454be:	d101      	bne.n	80454c4 <memchr+0x10>
 80454c0:	2300      	movs	r3, #0
 80454c2:	e003      	b.n	80454cc <memchr+0x18>
 80454c4:	781c      	ldrb	r4, [r3, #0]
 80454c6:	3001      	adds	r0, #1
 80454c8:	428c      	cmp	r4, r1
 80454ca:	d1f6      	bne.n	80454ba <memchr+0x6>
 80454cc:	4618      	mov	r0, r3
 80454ce:	bd10      	pop	{r4, pc}

080454d0 <__malloc_lock>:
 80454d0:	4801      	ldr	r0, [pc, #4]	; (80454d8 <__malloc_lock+0x8>)
 80454d2:	f7ff ba37 	b.w	8044944 <__retarget_lock_acquire_recursive>
 80454d6:	bf00      	nop
 80454d8:	200301f4 	.word	0x200301f4

080454dc <__malloc_unlock>:
 80454dc:	4801      	ldr	r0, [pc, #4]	; (80454e4 <__malloc_unlock+0x8>)
 80454de:	f7ff ba32 	b.w	8044946 <__retarget_lock_release_recursive>
 80454e2:	bf00      	nop
 80454e4:	200301f4 	.word	0x200301f4

080454e8 <_free_r>:
 80454e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80454ea:	2900      	cmp	r1, #0
 80454ec:	d047      	beq.n	804557e <_free_r+0x96>
 80454ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80454f2:	1f0c      	subs	r4, r1, #4
 80454f4:	9001      	str	r0, [sp, #4]
 80454f6:	2b00      	cmp	r3, #0
 80454f8:	bfb8      	it	lt
 80454fa:	18e4      	addlt	r4, r4, r3
 80454fc:	f7ff ffe8 	bl	80454d0 <__malloc_lock>
 8045500:	4a20      	ldr	r2, [pc, #128]	; (8045584 <_free_r+0x9c>)
 8045502:	9801      	ldr	r0, [sp, #4]
 8045504:	6813      	ldr	r3, [r2, #0]
 8045506:	4615      	mov	r5, r2
 8045508:	b933      	cbnz	r3, 8045518 <_free_r+0x30>
 804550a:	6063      	str	r3, [r4, #4]
 804550c:	6014      	str	r4, [r2, #0]
 804550e:	b003      	add	sp, #12
 8045510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8045514:	f7ff bfe2 	b.w	80454dc <__malloc_unlock>
 8045518:	42a3      	cmp	r3, r4
 804551a:	d90b      	bls.n	8045534 <_free_r+0x4c>
 804551c:	6821      	ldr	r1, [r4, #0]
 804551e:	1862      	adds	r2, r4, r1
 8045520:	4293      	cmp	r3, r2
 8045522:	bf02      	ittt	eq
 8045524:	681a      	ldreq	r2, [r3, #0]
 8045526:	685b      	ldreq	r3, [r3, #4]
 8045528:	1852      	addeq	r2, r2, r1
 804552a:	6063      	str	r3, [r4, #4]
 804552c:	bf08      	it	eq
 804552e:	6022      	streq	r2, [r4, #0]
 8045530:	602c      	str	r4, [r5, #0]
 8045532:	e7ec      	b.n	804550e <_free_r+0x26>
 8045534:	461a      	mov	r2, r3
 8045536:	685b      	ldr	r3, [r3, #4]
 8045538:	b10b      	cbz	r3, 804553e <_free_r+0x56>
 804553a:	42a3      	cmp	r3, r4
 804553c:	d9fa      	bls.n	8045534 <_free_r+0x4c>
 804553e:	6811      	ldr	r1, [r2, #0]
 8045540:	1855      	adds	r5, r2, r1
 8045542:	42a5      	cmp	r5, r4
 8045544:	d10b      	bne.n	804555e <_free_r+0x76>
 8045546:	6824      	ldr	r4, [r4, #0]
 8045548:	4421      	add	r1, r4
 804554a:	1854      	adds	r4, r2, r1
 804554c:	6011      	str	r1, [r2, #0]
 804554e:	42a3      	cmp	r3, r4
 8045550:	d1dd      	bne.n	804550e <_free_r+0x26>
 8045552:	681c      	ldr	r4, [r3, #0]
 8045554:	685b      	ldr	r3, [r3, #4]
 8045556:	4421      	add	r1, r4
 8045558:	6053      	str	r3, [r2, #4]
 804555a:	6011      	str	r1, [r2, #0]
 804555c:	e7d7      	b.n	804550e <_free_r+0x26>
 804555e:	d902      	bls.n	8045566 <_free_r+0x7e>
 8045560:	230c      	movs	r3, #12
 8045562:	6003      	str	r3, [r0, #0]
 8045564:	e7d3      	b.n	804550e <_free_r+0x26>
 8045566:	6825      	ldr	r5, [r4, #0]
 8045568:	1961      	adds	r1, r4, r5
 804556a:	428b      	cmp	r3, r1
 804556c:	bf02      	ittt	eq
 804556e:	6819      	ldreq	r1, [r3, #0]
 8045570:	685b      	ldreq	r3, [r3, #4]
 8045572:	1949      	addeq	r1, r1, r5
 8045574:	6063      	str	r3, [r4, #4]
 8045576:	bf08      	it	eq
 8045578:	6021      	streq	r1, [r4, #0]
 804557a:	6054      	str	r4, [r2, #4]
 804557c:	e7c7      	b.n	804550e <_free_r+0x26>
 804557e:	b003      	add	sp, #12
 8045580:	bd30      	pop	{r4, r5, pc}
 8045582:	bf00      	nop
 8045584:	200300a0 	.word	0x200300a0

08045588 <_read_r>:
 8045588:	b538      	push	{r3, r4, r5, lr}
 804558a:	4604      	mov	r4, r0
 804558c:	4d06      	ldr	r5, [pc, #24]	; (80455a8 <_read_r+0x20>)
 804558e:	4608      	mov	r0, r1
 8045590:	4611      	mov	r1, r2
 8045592:	2200      	movs	r2, #0
 8045594:	602a      	str	r2, [r5, #0]
 8045596:	461a      	mov	r2, r3
 8045598:	f7fb f9c2 	bl	8040920 <_read>
 804559c:	1c43      	adds	r3, r0, #1
 804559e:	d102      	bne.n	80455a6 <_read_r+0x1e>
 80455a0:	682b      	ldr	r3, [r5, #0]
 80455a2:	b103      	cbz	r3, 80455a6 <_read_r+0x1e>
 80455a4:	6023      	str	r3, [r4, #0]
 80455a6:	bd38      	pop	{r3, r4, r5, pc}
 80455a8:	200301fc 	.word	0x200301fc

080455ac <_fstat_r>:
 80455ac:	b538      	push	{r3, r4, r5, lr}
 80455ae:	2300      	movs	r3, #0
 80455b0:	4d06      	ldr	r5, [pc, #24]	; (80455cc <_fstat_r+0x20>)
 80455b2:	4604      	mov	r4, r0
 80455b4:	4608      	mov	r0, r1
 80455b6:	4611      	mov	r1, r2
 80455b8:	602b      	str	r3, [r5, #0]
 80455ba:	f7fb f9da 	bl	8040972 <_fstat>
 80455be:	1c43      	adds	r3, r0, #1
 80455c0:	d102      	bne.n	80455c8 <_fstat_r+0x1c>
 80455c2:	682b      	ldr	r3, [r5, #0]
 80455c4:	b103      	cbz	r3, 80455c8 <_fstat_r+0x1c>
 80455c6:	6023      	str	r3, [r4, #0]
 80455c8:	bd38      	pop	{r3, r4, r5, pc}
 80455ca:	bf00      	nop
 80455cc:	200301fc 	.word	0x200301fc

080455d0 <_isatty_r>:
 80455d0:	b538      	push	{r3, r4, r5, lr}
 80455d2:	2300      	movs	r3, #0
 80455d4:	4d05      	ldr	r5, [pc, #20]	; (80455ec <_isatty_r+0x1c>)
 80455d6:	4604      	mov	r4, r0
 80455d8:	4608      	mov	r0, r1
 80455da:	602b      	str	r3, [r5, #0]
 80455dc:	f7fb f9d9 	bl	8040992 <_isatty>
 80455e0:	1c43      	adds	r3, r0, #1
 80455e2:	d102      	bne.n	80455ea <_isatty_r+0x1a>
 80455e4:	682b      	ldr	r3, [r5, #0]
 80455e6:	b103      	cbz	r3, 80455ea <_isatty_r+0x1a>
 80455e8:	6023      	str	r3, [r4, #0]
 80455ea:	bd38      	pop	{r3, r4, r5, pc}
 80455ec:	200301fc 	.word	0x200301fc

080455f0 <_init>:
 80455f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80455f2:	bf00      	nop
 80455f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80455f6:	bc08      	pop	{r3}
 80455f8:	469e      	mov	lr, r3
 80455fa:	4770      	bx	lr

080455fc <_fini>:
 80455fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80455fe:	bf00      	nop
 8045600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8045602:	bc08      	pop	{r3}
 8045604:	469e      	mov	lr, r3
 8045606:	4770      	bx	lr

08045608 <__SECURE_SystemCoreClockUpdate_veneer>:
 8045608:	b401      	push	{r0}
 804560a:	4802      	ldr	r0, [pc, #8]	; (8045614 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 804560c:	4684      	mov	ip, r0
 804560e:	bc01      	pop	{r0}
 8045610:	4760      	bx	ip
 8045612:	bf00      	nop
 8045614:	0c03e009 	.word	0x0c03e009

08045618 <__trojan_s_veneer>:
 8045618:	b401      	push	{r0}
 804561a:	4802      	ldr	r0, [pc, #8]	; (8045624 <__trojan_s_veneer+0xc>)
 804561c:	4684      	mov	ip, r0
 804561e:	bc01      	pop	{r0}
 8045620:	4760      	bx	ip
 8045622:	bf00      	nop
 8045624:	0c03e001 	.word	0x0c03e001
