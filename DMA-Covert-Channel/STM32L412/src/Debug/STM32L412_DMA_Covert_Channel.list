
STM32L412_DMA_Covert_Channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004528  08004528  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000074  080045a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080045a4  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102d5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002438  00000000  00000000  00030379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  000327b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  00033288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0d0  00000000  00000000  00033c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d699  00000000  00000000  0004ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a21  00000000  00000000  0005c3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fedea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b8  00000000  00000000  000fee40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004410 	.word	0x08004410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004410 	.word	0x08004410

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <MX_DMA_Init+0x84>)
 8000570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000572:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <MX_DMA_Init+0x84>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6493      	str	r3, [r2, #72]	; 0x48
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <MX_DMA_Init+0x84>)
 800057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_DMA_Init+0x88>)
 8000588:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <MX_DMA_Init+0x8c>)
 800058a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_DMA_Init+0x88>)
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_DMA_Init+0x88>)
 8000594:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000598:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_DISABLE;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_DMA_Init+0x88>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_DMA_Init+0x88>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MX_DMA_Init+0x88>)
 80005a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ac:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_DMA_Init+0x88>)
 80005b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_DMA_Init+0x88>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_DMA_Init+0x88>)
 80005be:	2200      	movs	r2, #0
 80005c0:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <MX_DMA_Init+0x88>)
 80005c4:	f000 fd84 	bl	80010d0 <HAL_DMA_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_DMA_Init+0x6a>
  {
    Error_Handler();
 80005ce:	f000 fa2b 	bl	8000a28 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	200b      	movs	r0, #11
 80005d8:	f000 fd43 	bl	8001062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005dc:	200b      	movs	r0, #11
 80005de:	f000 fd5c 	bl	800109a <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	200000a4 	.word	0x200000a4
 80005f4:	40020008 	.word	0x40020008

080005f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_GPIO_Init+0x8c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <MX_GPIO_Init+0x8c>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_GPIO_Init+0x8c>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_GPIO_Init+0x8c>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a16      	ldr	r2, [pc, #88]	; (8000684 <MX_GPIO_Init+0x8c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_GPIO_Init+0x8c>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_GPIO_Init+0x8c>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <MX_GPIO_Init+0x8c>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_GPIO_Init+0x8c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2108      	movs	r1, #8
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <MX_GPIO_Init+0x90>)
 800065c:	f001 f89a 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000660:	2308      	movs	r3, #8
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_GPIO_Init+0x90>)
 8000678:	f000 ff1a 	bl	80014b0 <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000
 8000688:	48000400 	.word	0x48000400

0800068c <__io_putchar>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000694:	1d39      	adds	r1, r7, #4
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	2201      	movs	r2, #1
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <__io_putchar+0x20>)
 800069e:	f002 f96f 	bl	8002980 <HAL_UART_Transmit>
	 return ch;
 80006a2:	687b      	ldr	r3, [r7, #4]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000f4 	.word	0x200000f4

080006b0 <__io_getchar>:

int __io_getchar(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <__io_getchar+0x38>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2208      	movs	r2, #8
 80006c0:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006c2:	1df9      	adds	r1, r7, #7
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	2201      	movs	r2, #1
 80006ca:	4807      	ldr	r0, [pc, #28]	; (80006e8 <__io_getchar+0x38>)
 80006cc:	f002 f9ec 	bl	8002aa8 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY); //echo ch
 80006d0:	1df9      	adds	r1, r7, #7
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	2201      	movs	r2, #1
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <__io_getchar+0x38>)
 80006da:	f002 f951 	bl	8002980 <HAL_UART_Transmit>
	return ch;
 80006de:	79fb      	ldrb	r3, [r7, #7]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000f4 	.word	0x200000f4

080006ec <trojan>:
#define TRASNFER_SIZE 8000

//#define TROJAN_SECURE
// #define CONTENTION

__attribute__((optimize(0))) void trojan(int input_symbol){
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  // Trying to balance this code in terms of time as much as possible  
  for(int i=0;i < MAX_SYMBOL; i++){
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e070      	b.n	80007dc <trojan+0xf0>
    if(i < input_symbol){
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	429a      	cmp	r2, r3
 8000700:	da00      	bge.n	8000704 <trojan+0x18>
      #ifdef CONTENTION
        SETUP_CONTENTION();
      #else
        SETUP_NO_CONTENTION();
 8000702:	483b      	ldr	r0, [pc, #236]	; (80007f0 <trojan+0x104>)
      #endif
    }
    // With else it would be unbalanced in terms of LDRs
    if(i >= input_symbol){
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	db00      	blt.n	800070e <trojan+0x22>
    	SETUP_NO_CONTENTION();
 800070c:	4838      	ldr	r0, [pc, #224]	; (80007f0 <trojan+0x104>)
    }
    HUND_LDRS();
 800070e:	6801      	ldr	r1, [r0, #0]
 8000710:	6801      	ldr	r1, [r0, #0]
 8000712:	6801      	ldr	r1, [r0, #0]
 8000714:	6801      	ldr	r1, [r0, #0]
 8000716:	6801      	ldr	r1, [r0, #0]
 8000718:	6801      	ldr	r1, [r0, #0]
 800071a:	6801      	ldr	r1, [r0, #0]
 800071c:	6801      	ldr	r1, [r0, #0]
 800071e:	6801      	ldr	r1, [r0, #0]
 8000720:	6801      	ldr	r1, [r0, #0]
 8000722:	6801      	ldr	r1, [r0, #0]
 8000724:	6801      	ldr	r1, [r0, #0]
 8000726:	6801      	ldr	r1, [r0, #0]
 8000728:	6801      	ldr	r1, [r0, #0]
 800072a:	6801      	ldr	r1, [r0, #0]
 800072c:	6801      	ldr	r1, [r0, #0]
 800072e:	6801      	ldr	r1, [r0, #0]
 8000730:	6801      	ldr	r1, [r0, #0]
 8000732:	6801      	ldr	r1, [r0, #0]
 8000734:	6801      	ldr	r1, [r0, #0]
 8000736:	6801      	ldr	r1, [r0, #0]
 8000738:	6801      	ldr	r1, [r0, #0]
 800073a:	6801      	ldr	r1, [r0, #0]
 800073c:	6801      	ldr	r1, [r0, #0]
 800073e:	6801      	ldr	r1, [r0, #0]
 8000740:	6801      	ldr	r1, [r0, #0]
 8000742:	6801      	ldr	r1, [r0, #0]
 8000744:	6801      	ldr	r1, [r0, #0]
 8000746:	6801      	ldr	r1, [r0, #0]
 8000748:	6801      	ldr	r1, [r0, #0]
 800074a:	6801      	ldr	r1, [r0, #0]
 800074c:	6801      	ldr	r1, [r0, #0]
 800074e:	6801      	ldr	r1, [r0, #0]
 8000750:	6801      	ldr	r1, [r0, #0]
 8000752:	6801      	ldr	r1, [r0, #0]
 8000754:	6801      	ldr	r1, [r0, #0]
 8000756:	6801      	ldr	r1, [r0, #0]
 8000758:	6801      	ldr	r1, [r0, #0]
 800075a:	6801      	ldr	r1, [r0, #0]
 800075c:	6801      	ldr	r1, [r0, #0]
 800075e:	6801      	ldr	r1, [r0, #0]
 8000760:	6801      	ldr	r1, [r0, #0]
 8000762:	6801      	ldr	r1, [r0, #0]
 8000764:	6801      	ldr	r1, [r0, #0]
 8000766:	6801      	ldr	r1, [r0, #0]
 8000768:	6801      	ldr	r1, [r0, #0]
 800076a:	6801      	ldr	r1, [r0, #0]
 800076c:	6801      	ldr	r1, [r0, #0]
 800076e:	6801      	ldr	r1, [r0, #0]
 8000770:	6801      	ldr	r1, [r0, #0]
 8000772:	6801      	ldr	r1, [r0, #0]
 8000774:	6801      	ldr	r1, [r0, #0]
 8000776:	6801      	ldr	r1, [r0, #0]
 8000778:	6801      	ldr	r1, [r0, #0]
 800077a:	6801      	ldr	r1, [r0, #0]
 800077c:	6801      	ldr	r1, [r0, #0]
 800077e:	6801      	ldr	r1, [r0, #0]
 8000780:	6801      	ldr	r1, [r0, #0]
 8000782:	6801      	ldr	r1, [r0, #0]
 8000784:	6801      	ldr	r1, [r0, #0]
 8000786:	6801      	ldr	r1, [r0, #0]
 8000788:	6801      	ldr	r1, [r0, #0]
 800078a:	6801      	ldr	r1, [r0, #0]
 800078c:	6801      	ldr	r1, [r0, #0]
 800078e:	6801      	ldr	r1, [r0, #0]
 8000790:	6801      	ldr	r1, [r0, #0]
 8000792:	6801      	ldr	r1, [r0, #0]
 8000794:	6801      	ldr	r1, [r0, #0]
 8000796:	6801      	ldr	r1, [r0, #0]
 8000798:	6801      	ldr	r1, [r0, #0]
 800079a:	6801      	ldr	r1, [r0, #0]
 800079c:	6801      	ldr	r1, [r0, #0]
 800079e:	6801      	ldr	r1, [r0, #0]
 80007a0:	6801      	ldr	r1, [r0, #0]
 80007a2:	6801      	ldr	r1, [r0, #0]
 80007a4:	6801      	ldr	r1, [r0, #0]
 80007a6:	6801      	ldr	r1, [r0, #0]
 80007a8:	6801      	ldr	r1, [r0, #0]
 80007aa:	6801      	ldr	r1, [r0, #0]
 80007ac:	6801      	ldr	r1, [r0, #0]
 80007ae:	6801      	ldr	r1, [r0, #0]
 80007b0:	6801      	ldr	r1, [r0, #0]
 80007b2:	6801      	ldr	r1, [r0, #0]
 80007b4:	6801      	ldr	r1, [r0, #0]
 80007b6:	6801      	ldr	r1, [r0, #0]
 80007b8:	6801      	ldr	r1, [r0, #0]
 80007ba:	6801      	ldr	r1, [r0, #0]
 80007bc:	6801      	ldr	r1, [r0, #0]
 80007be:	6801      	ldr	r1, [r0, #0]
 80007c0:	6801      	ldr	r1, [r0, #0]
 80007c2:	6801      	ldr	r1, [r0, #0]
 80007c4:	6801      	ldr	r1, [r0, #0]
 80007c6:	6801      	ldr	r1, [r0, #0]
 80007c8:	6801      	ldr	r1, [r0, #0]
 80007ca:	6801      	ldr	r1, [r0, #0]
 80007cc:	6801      	ldr	r1, [r0, #0]
 80007ce:	6801      	ldr	r1, [r0, #0]
 80007d0:	6801      	ldr	r1, [r0, #0]
 80007d2:	6801      	ldr	r1, [r0, #0]
 80007d4:	6801      	ldr	r1, [r0, #0]
  for(int i=0;i < MAX_SYMBOL; i++){
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2bff      	cmp	r3, #255	; 0xff
 80007e0:	dd8b      	ble.n	80006fa <trojan+0xe>
  }
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	20008000 	.word	0x20008000

080007f4 <config_DMA_M2M>:

uint32_t src;
uint32_t dst;

void config_DMA_M2M(int size){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
// Make this vars global. The stack will be destroyed.
  // static int src, dst;
  SysTick->CTRL = 0x0; //Clean SysTick Default Configs
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <config_DMA_M2M+0x28>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = (uint32_t)(0xFFFFFF - 1); //max counter value
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <config_DMA_M2M+0x28>)
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <config_DMA_M2M+0x2c>)
 8000806:	605a      	str	r2, [r3, #4]
  //need to comment __HAL_DMA_ENABLE in function HAL_DMA_Start()
  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)&src,
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <config_DMA_M2M+0x30>)
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <config_DMA_M2M+0x34>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <config_DMA_M2M+0x38>)
 8000810:	f000 fd16 	bl	8001240 <HAL_DMA_Start_IT>
                    (uint32_t)&dst, size);
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	e000e010 	.word	0xe000e010
 8000820:	00fffffe 	.word	0x00fffffe
 8000824:	200000f0 	.word	0x200000f0
 8000828:	200000ec 	.word	0x200000ec
 800082c:	200000a4 	.word	0x200000a4

08000830 <covert_channel>:

int input_symbol = 0, sample = 0;

__attribute__((optimize(0))) void covert_channel(){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  int *ptr_cnt = &SysTick->VAL; // (24 bits)
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <covert_channel+0x40>)
 8000838:	607b      	str	r3, [r7, #4]
  int *ptr_ctr = &SysTick->CTRL; // (24 bits)
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <covert_channel+0x44>)
 800083c:	603b      	str	r3, [r7, #0]
  // trigger chain of interrupts (DMA transfers)
  config_DMA_M2M(TRASNFER_SIZE);
 800083e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000842:	f7ff ffd7 	bl	80007f4 <config_DMA_M2M>
  *ptr_cnt = 0; // reset the val  counter
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
  *ptr_ctr = 0x05; // starts the systick
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2205      	movs	r2, #5
 8000850:	601a      	str	r2, [r3, #0]
  //start DMA transaction
  //need to comment this line in function HAL_DMA_Start()
  __HAL_DMA_ENABLE(&hdma_memtomem_dma1_channel1);
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <covert_channel+0x48>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <covert_channel+0x48>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f042 0201 	orr.w	r2, r2, #1
 8000860:	601a      	str	r2, [r3, #0]
  #ifdef TROJAN_SECURE
    trojan_s(input_symbol);
  #else
    trojan(input_symbol);
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <covert_channel+0x4c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff40 	bl	80006ec <trojan>
  #endif
  while(1);
 800086c:	e7fe      	b.n	800086c <covert_channel+0x3c>
 800086e:	bf00      	nop
 8000870:	e000e018 	.word	0xe000e018
 8000874:	e000e010 	.word	0xe000e010
 8000878:	200000a4 	.word	0x200000a4
 800087c:	20000090 	.word	0x20000090

08000880 <DMA1_Channel1_IRQHandler>:
/* 
* The channel is measured in the DMA ISR to avoid accessing the SRAM,which would 
* introduce a lot of noise in the covert-channel. (Remove the need of a flag
* shared between ISR and code, that would generate a lot of SRAM accesses)
*/
__attribute__((optimize(0))) void DMA1_Channel1_IRQHandler(){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  int *ptr_cnt = &SysTick->VAL; // (24 bits)
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <DMA1_Channel1_IRQHandler+0xa0>)
 8000888:	607b      	str	r3, [r7, #4]
  int *ptr_ctr = &SysTick->CTRL; // (24 bits)
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <DMA1_Channel1_IRQHandler+0xa4>)
 800088c:	603b      	str	r3, [r7, #0]
  static int first = 1;
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 800088e:	4826      	ldr	r0, [pc, #152]	; (8000928 <DMA1_Channel1_IRQHandler+0xa8>)
 8000890:	f000 fd2e 	bl	80012f0 <HAL_DMA_IRQHandler>
  if(!first){ //ignore the first measurement, it is trash
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <DMA1_Channel1_IRQHandler+0xac>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d109      	bne.n	80008b0 <DMA1_Channel1_IRQHandler+0x30>
    printf("(%d, %d)\r\n", input_symbol, (0xFFFFFF - 1) - *ptr_cnt);
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <DMA1_Channel1_IRQHandler+0xb0>)
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <DMA1_Channel1_IRQHandler+0xb4>)
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4823      	ldr	r0, [pc, #140]	; (8000938 <DMA1_Channel1_IRQHandler+0xb8>)
 80008ac:	f002 fde4 	bl	8003478 <iprintf>
  }
  first = 0;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <DMA1_Channel1_IRQHandler+0xac>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
  sample++;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <DMA1_Channel1_IRQHandler+0xbc>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	4a1f      	ldr	r2, [pc, #124]	; (800093c <DMA1_Channel1_IRQHandler+0xbc>)
 80008be:	6013      	str	r3, [r2, #0]
  // N_SAMPLES per input symbol
  if(sample >= N_SAMPLES){
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <DMA1_Channel1_IRQHandler+0xbc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b63      	cmp	r3, #99	; 0x63
 80008c6:	dd10      	ble.n	80008ea <DMA1_Channel1_IRQHandler+0x6a>
    if(input_symbol < MAX_SYMBOL-1){
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <DMA1_Channel1_IRQHandler+0xb0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2bfe      	cmp	r3, #254	; 0xfe
 80008ce:	dc08      	bgt.n	80008e2 <DMA1_Channel1_IRQHandler+0x62>
      input_symbol++;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <DMA1_Channel1_IRQHandler+0xb0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <DMA1_Channel1_IRQHandler+0xb0>)
 80008d8:	6013      	str	r3, [r2, #0]
      sample = 0;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <DMA1_Channel1_IRQHandler+0xbc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	e003      	b.n	80008ea <DMA1_Channel1_IRQHandler+0x6a>
    }
    else {
      input_symbol = 0;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <DMA1_Channel1_IRQHandler+0xb0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
     // printf("END\r\n");
      return;
 80008e8:	e017      	b.n	800091a <DMA1_Channel1_IRQHandler+0x9a>
    }
  }
  config_DMA_M2M(TRASNFER_SIZE);
 80008ea:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80008ee:	f7ff ff81 	bl	80007f4 <config_DMA_M2M>
  *ptr_cnt = 0; // reset the val  counter
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
  *ptr_ctr = 0x05; // starts the systick
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	2205      	movs	r2, #5
 80008fc:	601a      	str	r2, [r3, #0]
  //start DMA transaction
  //need to comment this line in function HAL_DMA_Start()
  __HAL_DMA_ENABLE(&hdma_memtomem_dma1_channel1);
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <DMA1_Channel1_IRQHandler+0xa8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <DMA1_Channel1_IRQHandler+0xa8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f042 0201 	orr.w	r2, r2, #1
 800090c:	601a      	str	r2, [r3, #0]
  #ifdef TROJAN_SECURE
    trojan_s(input_symbol);
  #else
    trojan(input_symbol);
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <DMA1_Channel1_IRQHandler+0xb0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff feea 	bl	80006ec <trojan>
  #endif
  return;
 8000918:	bf00      	nop
  
}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	e000e018 	.word	0xe000e018
 8000924:	e000e010 	.word	0xe000e010
 8000928:	200000a4 	.word	0x200000a4
 800092c:	20000000 	.word	0x20000000
 8000930:	20000090 	.word	0x20000090
 8000934:	00fffffe 	.word	0x00fffffe
 8000938:	08004428 	.word	0x08004428
 800093c:	20000094 	.word	0x20000094

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fa3d 	bl	8000dc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f80e 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f7ff fe54 	bl	80005f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000950:	f000 f974 	bl	8000c3c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000954:	f7ff fe08 	bl	8000568 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World\n");
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <main+0x24>)
 800095a:	f002 fe13 	bl	8003584 <puts>
  //  configure_mpu();
  covert_channel();
 800095e:	f7ff ff67 	bl	8000830 <covert_channel>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000962:	e7fe      	b.n	8000962 <main+0x22>
 8000964:	08004434 	.word	0x08004434

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b096      	sub	sp, #88	; 0x58
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2244      	movs	r2, #68	; 0x44
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fd76 	bl	8003468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800098a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800098e:	f000 ff37 	bl	8001800 <HAL_PWREx_ControlVoltageScaling>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000998:	f000 f846 	bl	8000a28 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800099c:	f000 ff12 	bl	80017c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <SystemClock_Config+0xbc>)
 80009a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009a6:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <SystemClock_Config+0xbc>)
 80009a8:	f023 0318 	bic.w	r3, r3, #24
 80009ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009b0:	2314      	movs	r3, #20
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009c0:	2360      	movs	r3, #96	; 0x60
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009c8:	2301      	movs	r3, #1
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009d0:	2328      	movs	r3, #40	; 0x28
 80009d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 ff63 	bl	80018ac <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009ec:	f000 f81c 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2303      	movs	r3, #3
 80009f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2104      	movs	r1, #4
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fbb1 	bl	8002170 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a14:	f000 f808 	bl	8000a28 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a18:	f001 ff54 	bl	80028c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a1c:	bf00      	nop
 8000a1e:	3758      	adds	r7, #88	; 0x58
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	; 0x60
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f9d0 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae2:	f7ff fde5 	bl	80006b0 <__io_getchar>
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
	}

return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fdb1 	bl	800068c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
	}
	return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f002 fc1a 	bl	8003414 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000a000 	.word	0x2000a000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	20000098 	.word	0x20000098
 8000c14:	20000190 	.word	0x20000190

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <MX_USART2_UART_Init+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c80:	f001 fe30 	bl	80028e4 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f7ff fecd 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000f4 	.word	0x200000f4
 8000c98:	40004400 	.word	0x40004400

08000c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b096      	sub	sp, #88	; 0x58
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	2234      	movs	r2, #52	; 0x34
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fbd3 	bl	8003468 <memset>
  if(uartHandle->Instance==USART2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <HAL_UART_MspInit+0xcc>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d148      	bne.n	8000d5e <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fc6d 	bl	80025b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce4:	f7ff fea0 	bl	8000a28 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce8:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_UART_MspInit+0xd0>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cec:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <HAL_UART_MspInit+0xd0>)
 8000cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <HAL_UART_MspInit+0xd0>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_UART_MspInit+0xd0>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_UART_MspInit+0xd0>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_UART_MspInit+0xd0>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f000 fbbb 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f000 fba9 	bl	80014b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3758      	adds	r7, #88	; 0x58
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40004400 	.word	0x40004400
 8000d6c:	40021000 	.word	0x40021000

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d74:	f7ff ff50 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	; (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	; (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f002 fb3f 	bl	8003420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fdcd 	bl	8000940 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000db4:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 8000db8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dbc:	2000018c 	.word	0x2000018c

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>

08000dc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f93d 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 f80e 	bl	8000df4 <HAL_InitTick>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	71fb      	strb	r3, [r7, #7]
 8000de2:	e001      	b.n	8000de8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de4:	f7ff fe26 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_InitTick+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d023      	beq.n	8000e50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_InitTick+0x70>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f949 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10f      	bne.n	8000e4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d809      	bhi.n	8000e44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f913 	bl	8001062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_InitTick+0x74>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e007      	b.n	8000e54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e004      	b.n	8000e54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e001      	b.n	8000e54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000000c 	.word	0x2000000c
 8000e64:	20000004 	.word	0x20000004
 8000e68:	20000008 	.word	0x20000008

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000178 	.word	0x20000178

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000178 	.word	0x20000178

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff3e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff31 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e098      	b.n	8001214 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <HAL_DMA_Init+0x150>)
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d80f      	bhi.n	800110e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <HAL_DMA_Init+0x154>)
 80010f6:	4413      	add	r3, r2
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_DMA_Init+0x158>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	009a      	lsls	r2, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_DMA_Init+0x15c>)
 800110a:	641a      	str	r2, [r3, #64]	; 0x40
 800110c:	e00e      	b.n	800112c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b46      	ldr	r3, [pc, #280]	; (8001230 <HAL_DMA_Init+0x160>)
 8001116:	4413      	add	r3, r2
 8001118:	4a43      	ldr	r2, [pc, #268]	; (8001228 <HAL_DMA_Init+0x158>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	009a      	lsls	r2, r3, #2
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a42      	ldr	r2, [pc, #264]	; (8001234 <HAL_DMA_Init+0x164>)
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001146:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001186:	d039      	beq.n	80011fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <HAL_DMA_Init+0x15c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d11a      	bne.n	80011c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_DMA_Init+0x168>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f003 031c 	and.w	r3, r3, #28
 800119e:	210f      	movs	r1, #15
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4924      	ldr	r1, [pc, #144]	; (8001238 <HAL_DMA_Init+0x168>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <HAL_DMA_Init+0x168>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6859      	ldr	r1, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f003 031c 	and.w	r3, r3, #28
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	491d      	ldr	r1, [pc, #116]	; (8001238 <HAL_DMA_Init+0x168>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
 80011c6:	e019      	b.n	80011fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_DMA_Init+0x16c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	f003 031c 	and.w	r3, r3, #28
 80011d4:	210f      	movs	r1, #15
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	4917      	ldr	r1, [pc, #92]	; (800123c <HAL_DMA_Init+0x16c>)
 80011de:	4013      	ands	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_DMA_Init+0x16c>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6859      	ldr	r1, [r3, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f003 031c 	and.w	r3, r3, #28
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	4911      	ldr	r1, [pc, #68]	; (800123c <HAL_DMA_Init+0x16c>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40020407 	.word	0x40020407
 8001224:	bffdfff8 	.word	0xbffdfff8
 8001228:	cccccccd 	.word	0xcccccccd
 800122c:	40020000 	.word	0x40020000
 8001230:	bffdfbf8 	.word	0xbffdfbf8
 8001234:	40020400 	.word	0x40020400
 8001238:	400200a8 	.word	0x400200a8
 800123c:	400204a8 	.word	0x400204a8

08001240 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_DMA_Start_IT+0x20>
 800125c:	2302      	movs	r3, #2
 800125e:	e043      	b.n	80012e8 <HAL_DMA_Start_IT+0xa8>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d132      	bne.n	80012da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2202      	movs	r2, #2
 8001278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 f8d8 	bl	800144e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d008      	beq.n	80012b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 020e 	orr.w	r2, r2, #14
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e016      	b.n	80012e6 <HAL_DMA_Start_IT+0xa6>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0204 	bic.w	r2, r2, #4
 80012c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 020a 	orr.w	r2, r2, #10
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e005      	b.n	80012e6 <HAL_DMA_Start_IT+0xa6>
    // __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012e2:	2302      	movs	r3, #2
 80012e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f003 031c 	and.w	r3, r3, #28
 8001310:	2204      	movs	r2, #4
 8001312:	409a      	lsls	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d026      	beq.n	800136a <HAL_DMA_IRQHandler+0x7a>
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	2b00      	cmp	r3, #0
 8001324:	d021      	beq.n	800136a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	2b00      	cmp	r3, #0
 8001332:	d107      	bne.n	8001344 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0204 	bic.w	r2, r2, #4
 8001342:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	f003 021c 	and.w	r2, r3, #28
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	2104      	movs	r1, #4
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	2b00      	cmp	r3, #0
 800135e:	d071      	beq.n	8001444 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001368:	e06c      	b.n	8001444 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f003 031c 	and.w	r3, r3, #28
 8001372:	2202      	movs	r2, #2
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d02e      	beq.n	80013dc <HAL_DMA_IRQHandler+0xec>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d029      	beq.n	80013dc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10b      	bne.n	80013ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 020a 	bic.w	r2, r2, #10
 80013a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f003 021c 	and.w	r2, r3, #28
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2102      	movs	r1, #2
 80013bc:	fa01 f202 	lsl.w	r2, r1, r2
 80013c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d038      	beq.n	8001444 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013da:	e033      	b.n	8001444 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	f003 031c 	and.w	r3, r3, #28
 80013e4:	2208      	movs	r2, #8
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d02a      	beq.n	8001446 <HAL_DMA_IRQHandler+0x156>
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d025      	beq.n	8001446 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 020e 	bic.w	r2, r2, #14
 8001408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f003 021c 	and.w	r2, r3, #28
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001444:	bf00      	nop
 8001446:	bf00      	nop
}
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	f003 021c 	and.w	r2, r3, #28
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	2101      	movs	r1, #1
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b10      	cmp	r3, #16
 800147e:	d108      	bne.n	8001492 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001490:	e007      	b.n	80014a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	60da      	str	r2, [r3, #12]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	e14e      	b.n	800175e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8140 	beq.w	8001758 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d005      	beq.n	80014f0 <HAL_GPIO_Init+0x40>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d130      	bne.n	8001552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001526:	2201      	movs	r2, #1
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	f003 0201 	and.w	r2, r3, #1
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b03      	cmp	r3, #3
 800155c:	d017      	beq.n	800158e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d123      	bne.n	80015e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	6939      	ldr	r1, [r7, #16]
 80015de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0203 	and.w	r2, r3, #3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 809a 	beq.w	8001758 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001624:	4b55      	ldr	r3, [pc, #340]	; (800177c <HAL_GPIO_Init+0x2cc>)
 8001626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001628:	4a54      	ldr	r2, [pc, #336]	; (800177c <HAL_GPIO_Init+0x2cc>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6613      	str	r3, [r2, #96]	; 0x60
 8001630:	4b52      	ldr	r3, [pc, #328]	; (800177c <HAL_GPIO_Init+0x2cc>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800163c:	4a50      	ldr	r2, [pc, #320]	; (8001780 <HAL_GPIO_Init+0x2d0>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001666:	d013      	beq.n	8001690 <HAL_GPIO_Init+0x1e0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_GPIO_Init+0x2d4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00d      	beq.n	800168c <HAL_GPIO_Init+0x1dc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a45      	ldr	r2, [pc, #276]	; (8001788 <HAL_GPIO_Init+0x2d8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0x1d8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a44      	ldr	r2, [pc, #272]	; (800178c <HAL_GPIO_Init+0x2dc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_GPIO_Init+0x1d4>
 8001680:	2303      	movs	r3, #3
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x1e2>
 8001684:	2307      	movs	r3, #7
 8001686:	e004      	b.n	8001692 <HAL_GPIO_Init+0x1e2>
 8001688:	2302      	movs	r3, #2
 800168a:	e002      	b.n	8001692 <HAL_GPIO_Init+0x1e2>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_GPIO_Init+0x1e2>
 8001690:	2300      	movs	r3, #0
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	f002 0203 	and.w	r2, r2, #3
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	4093      	lsls	r3, r2
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016a2:	4937      	ldr	r1, [pc, #220]	; (8001780 <HAL_GPIO_Init+0x2d0>)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016d4:	4a2e      	ldr	r2, [pc, #184]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016fe:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	f47f aea9 	bne.w	80014c0 <HAL_GPIO_Init+0x10>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	48000400 	.word	0x48000400
 8001788:	48000800 	.word	0x48000800
 800178c:	48000c00 	.word	0x48000c00
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40007000 	.word	0x40007000

080017e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_PWREx_GetVoltageRange+0x18>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800180e:	d130      	bne.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800181c:	d038      	beq.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001826:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2232      	movs	r2, #50	; 0x32
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9b      	lsrs	r3, r3, #18
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001844:	e002      	b.n	800184c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3b01      	subs	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001858:	d102      	bne.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x60>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f2      	bne.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186c:	d110      	bne.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e00f      	b.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800187a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187e:	d007      	beq.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40007000 	.word	0x40007000
 80018a4:	20000004 	.word	0x20000004
 80018a8:	431bde83 	.word	0x431bde83

080018ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f000 bc52 	b.w	8002164 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c0:	4ba1      	ldr	r3, [pc, #644]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ca:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80e6 	beq.w	8001aae <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d007      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4c>
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	f040 808d 	bne.w	8001a0a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	f040 8089 	bne.w	8001a0a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f8:	4b93      	ldr	r3, [pc, #588]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_RCC_OscConfig+0x66>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	f000 bc29 	b.w	8002164 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001916:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_RCC_OscConfig+0x80>
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800192a:	e005      	b.n	8001938 <HAL_RCC_OscConfig+0x8c>
 800192c:	4b86      	ldr	r3, [pc, #536]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001938:	4293      	cmp	r3, r2
 800193a:	d224      	bcs.n	8001986 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fdd9 	bl	80024f8 <RCC_SetFlashLatencyFromMSIRange>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	f000 bc09 	b.w	8002164 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001952:	4b7d      	ldr	r3, [pc, #500]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a7c      	ldr	r2, [pc, #496]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b7a      	ldr	r3, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	4977      	ldr	r1, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001970:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	4972      	ldr	r1, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
 8001984:	e025      	b.n	80019d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001986:	4b70      	ldr	r3, [pc, #448]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6f      	ldr	r2, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b6d      	ldr	r3, [pc, #436]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	496a      	ldr	r1, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	4965      	ldr	r1, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fd98 	bl	80024f8 <RCC_SetFlashLatencyFromMSIRange>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e3c8      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d2:	f000 fccd 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	495a      	ldr	r1, [pc, #360]	; (8001b4c <HAL_RCC_OscConfig+0x2a0>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_OscConfig+0x2a4>)
 80019f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f2:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_RCC_OscConfig+0x2a8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f9fc 	bl	8000df4 <HAL_InitTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d052      	beq.n	8001aac <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	e3ac      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d032      	beq.n	8001a78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a12:	4b4d      	ldr	r3, [pc, #308]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fa39 	bl	8000e94 <HAL_GetTick>
 8001a22:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a26:	f7ff fa35 	bl	8000e94 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e395      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a3f      	ldr	r2, [pc, #252]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	493a      	ldr	r1, [pc, #232]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
 8001a76:	e01a      	b.n	8001aae <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a32      	ldr	r2, [pc, #200]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fa06 	bl	8000e94 <HAL_GetTick>
 8001a88:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fa02 	bl	8000e94 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e362      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1e0>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d073      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_OscConfig+0x220>
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d10b      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d063      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x2f4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d15f      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e33f      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aec:	d106      	bne.n	8001afc <HAL_RCC_OscConfig+0x250>
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0x28c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x274>
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0x28c>
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <HAL_RCC_OscConfig+0x29c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f9a8 	bl	8000e94 <HAL_GetTick>
 8001b44:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	e010      	b.n	8001b6a <HAL_RCC_OscConfig+0x2be>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08004440 	.word	0x08004440
 8001b50:	20000004 	.word	0x20000004
 8001b54:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff f99c 	bl	8000e94 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e2fc      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	4ba0      	ldr	r3, [pc, #640]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x2ac>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff f98c 	bl	8000e94 <HAL_GetTick>
 8001b7c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff f988 	bl	8000e94 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e2e8      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b92:	4b96      	ldr	r3, [pc, #600]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2d4>
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d060      	beq.n	8001c70 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x314>
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d119      	bne.n	8001bee <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d116      	bne.n	8001bee <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	4b8a      	ldr	r3, [pc, #552]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x32c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e2c5      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b84      	ldr	r3, [pc, #528]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	4981      	ldr	r1, [pc, #516]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bec:	e040      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d023      	beq.n	8001c3e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf6:	4b7d      	ldr	r3, [pc, #500]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7c      	ldr	r2, [pc, #496]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f947 	bl	8000e94 <HAL_GetTick>
 8001c06:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f943 	bl	8000e94 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e2a3      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	4b73      	ldr	r3, [pc, #460]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b70      	ldr	r3, [pc, #448]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	496d      	ldr	r1, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e018      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b6b      	ldr	r3, [pc, #428]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6a      	ldr	r2, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f923 	bl	8000e94 <HAL_GetTick>
 8001c4e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff f91f 	bl	8000e94 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e27f      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d07f      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d05f      	beq.n	8001d44 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d037      	beq.n	8001d0a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e258      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01b      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc2:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ccc:	f7ff f8e2 	bl	8000e94 <HAL_GetTick>
 8001cd0:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f8de 	bl	8000e94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b11      	cmp	r3, #17
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e23e      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ef      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfa:	f023 0210 	bic.w	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	493a      	ldr	r1, [pc, #232]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d10:	4a36      	ldr	r2, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f8bb 	bl	8000e94 <HAL_GetTick>
 8001d1e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d22:	f7ff f8b7 	bl	8000e94 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b11      	cmp	r3, #17
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e217      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d34:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ef      	beq.n	8001d22 <HAL_RCC_OscConfig+0x476>
 8001d42:	e01b      	b.n	8001d7c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4a:	4a28      	ldr	r2, [pc, #160]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff f89e 	bl	8000e94 <HAL_GetTick>
 8001d58:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f89a 	bl	8000e94 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b11      	cmp	r3, #17
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1fa      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ef      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80c1 	beq.w	8001f0c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10e      	bne.n	8001dba <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da6:	6593      	str	r3, [r2, #88]	; 0x58
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCC_OscConfig+0x540>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_RCC_OscConfig+0x544>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x544>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCC_OscConfig+0x544>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f85f 	bl	8000e94 <HAL_GetTick>
 8001dd6:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	e00c      	b.n	8001df4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff f85b 	bl	8000e94 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d905      	bls.n	8001df4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e1bb      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	4bb1      	ldr	r3, [pc, #708]	; (80020bc <HAL_RCC_OscConfig+0x810>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ec      	beq.n	8001dda <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d02c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001e0c:	4bac      	ldr	r3, [pc, #688]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	49a8      	ldr	r1, [pc, #672]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e32:	4ba3      	ldr	r3, [pc, #652]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	4aa1      	ldr	r2, [pc, #644]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e42:	4b9f      	ldr	r3, [pc, #636]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e48:	4a9d      	ldr	r2, [pc, #628]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e54:	4b9a      	ldr	r3, [pc, #616]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a99      	ldr	r2, [pc, #612]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e64:	e00f      	b.n	8001e86 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e66:	4b96      	ldr	r3, [pc, #600]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6c:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e76:	4b92      	ldr	r3, [pc, #584]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	4a90      	ldr	r2, [pc, #576]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001e7e:	f023 0304 	bic.w	r3, r3, #4
 8001e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f801 	bl	8000e94 <HAL_GetTick>
 8001e92:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7fe fffd 	bl	8000e94 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e15b      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eac:	4b84      	ldr	r3, [pc, #528]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0ed      	beq.n	8001e96 <HAL_RCC_OscConfig+0x5ea>
 8001eba:	e01d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7fe ffea 	bl	8000e94 <HAL_GetTick>
 8001ec0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7fe ffe6 	bl	8000e94 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e144      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eda:	4b79      	ldr	r3, [pc, #484]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ed      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001ee8:	4b75      	ldr	r3, [pc, #468]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	4a74      	ldr	r2, [pc, #464]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f00:	4b6f      	ldr	r3, [pc, #444]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	4a6e      	ldr	r2, [pc, #440]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03c      	beq.n	8001f92 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01c      	beq.n	8001f5a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f20:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f26:	4a66      	ldr	r2, [pc, #408]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7fe ffb0 	bl	8000e94 <HAL_GetTick>
 8001f34:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f38:	f7fe ffac 	bl	8000e94 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e10c      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ef      	beq.n	8001f38 <HAL_RCC_OscConfig+0x68c>
 8001f58:	e01b      	b.n	8001f92 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f5a:	4b59      	ldr	r3, [pc, #356]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f60:	4a57      	ldr	r2, [pc, #348]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7fe ff93 	bl	8000e94 <HAL_GetTick>
 8001f6e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f72:	f7fe ff8f 	bl	8000e94 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0ef      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f84:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ef      	bne.n	8001f72 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80e3 	beq.w	8002162 <HAL_RCC_OscConfig+0x8b6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	f040 80b7 	bne.w	8002114 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fa6:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0203 	and.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d124      	bne.n	8002004 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d11b      	bne.n	8002004 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d113      	bne.n	8002004 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d109      	bne.n	8002004 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d061      	beq.n	80020c8 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d056      	beq.n	80020b8 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2c      	ldr	r2, [pc, #176]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8002010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002014:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002016:	f7fe ff3d 	bl	8000e94 <HAL_GetTick>
 800201a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe ff39 	bl	8000e94 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e099      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_RCC_OscConfig+0x818>)
 8002042:	4013      	ands	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800204c:	3a01      	subs	r2, #1
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002056:	0212      	lsls	r2, r2, #8
 8002058:	4311      	orrs	r1, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800205e:	0852      	lsrs	r2, r2, #1
 8002060:	3a01      	subs	r2, #1
 8002062:	0552      	lsls	r2, r2, #21
 8002064:	4311      	orrs	r1, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800206a:	0852      	lsrs	r2, r2, #1
 800206c:	3a01      	subs	r2, #1
 800206e:	0652      	lsls	r2, r2, #25
 8002070:	430a      	orrs	r2, r1
 8002072:	4913      	ldr	r1, [pc, #76]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002090:	f7fe ff00 	bl	8000e94 <HAL_GetTick>
 8002094:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fefc 	bl	8000e94 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e05c      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_OscConfig+0x814>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b6:	e054      	b.n	8002162 <HAL_RCC_OscConfig+0x8b6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e053      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
 80020bc:	40007000 	.word	0x40007000
 80020c0:	40021000 	.word	0x40021000
 80020c4:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d146      	bne.n	8002162 <HAL_RCC_OscConfig+0x8b6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a24      	ldr	r2, [pc, #144]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 80020da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020ec:	f7fe fed2 	bl	8000e94 <HAL_GetTick>
 80020f0:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe fece 	bl	8000e94 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e02e      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x848>
 8002112:	e026      	b.n	8002162 <HAL_RCC_OscConfig+0x8b6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d021      	beq.n	800215e <HAL_RCC_OscConfig+0x8b2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 8002120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe feb5 	bl	8000e94 <HAL_GetTick>
 800212a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x894>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7fe feb1 	bl	8000e94 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x894>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e011      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x882>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a06      	ldr	r2, [pc, #24]	; (800216c <HAL_RCC_OscConfig+0x8c0>)
 8002152:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	60d3      	str	r3, [r2, #12]
 800215c:	e001      	b.n	8002162 <HAL_RCC_OscConfig+0x8b6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x8b8>
      }
    }
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0e7      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b75      	ldr	r3, [pc, #468]	; (800235c <HAL_RCC_ClockConfig+0x1ec>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b72      	ldr	r3, [pc, #456]	; (800235c <HAL_RCC_ClockConfig+0x1ec>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4970      	ldr	r1, [pc, #448]	; (800235c <HAL_RCC_ClockConfig+0x1ec>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b6e      	ldr	r3, [pc, #440]	; (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0cf      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d908      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4960      	ldr	r1, [pc, #384]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d04c      	beq.n	8002288 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	4b5a      	ldr	r3, [pc, #360]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d121      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0a6      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220e:	4b54      	ldr	r3, [pc, #336]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d115      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e09a      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002226:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e08e      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e086      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 0203 	bic.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4943      	ldr	r1, [pc, #268]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002258:	f7fe fe1c 	bl	8000e94 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7fe fe18 	bl	8000e94 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e06e      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 020c 	and.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d1eb      	bne.n	8002260 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d208      	bcs.n	80022b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	492b      	ldr	r1, [pc, #172]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d210      	bcs.n	80022e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 0207 	bic.w	r2, r3, #7
 80022cc:	4923      	ldr	r1, [pc, #140]	; (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_RCC_ClockConfig+0x1ec>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e036      	b.n	8002354 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4918      	ldr	r1, [pc, #96]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4910      	ldr	r1, [pc, #64]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002324:	f000 f824 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	490b      	ldr	r1, [pc, #44]	; (8002364 <HAL_RCC_ClockConfig+0x1f4>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1f8>)
 8002342:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1fc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fd53 	bl	8000df4 <HAL_InitTick>
 800234e:	4603      	mov	r3, r0
 8002350:	72fb      	strb	r3, [r7, #11]

  return status;
 8002352:	7afb      	ldrb	r3, [r7, #11]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40022000 	.word	0x40022000
 8002360:	40021000 	.word	0x40021000
 8002364:	08004440 	.word	0x08004440
 8002368:	20000004 	.word	0x20000004
 800236c:	20000008 	.word	0x20000008

08002370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002388:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d121      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d11e      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023a4:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023b0:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e005      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023cc:	4a2b      	ldr	r2, [pc, #172]	; (800247c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d102      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e004      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d134      	bne.n	8002468 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0xa6>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d003      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0xac>
 8002414:	e005      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCC_GetSysClockFreq+0x110>)
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	e005      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_GetSysClockFreq+0x114>)
 800241e:	617b      	str	r3, [r7, #20]
      break;
 8002420:	e002      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	617b      	str	r3, [r7, #20]
      break;
 8002426:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002428:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	fb02 f203 	mul.w	r2, r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	0e5b      	lsrs	r3, r3, #25
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	3301      	adds	r3, #1
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002468:	69bb      	ldr	r3, [r7, #24]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	08004458 	.word	0x08004458
 8002480:	00f42400 	.word	0x00f42400
 8002484:	007a1200 	.word	0x007a1200

08002488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4904      	ldr	r1, [pc, #16]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08004450 	.word	0x08004450

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024d0:	f7ff ffda 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0adb      	lsrs	r3, r3, #11
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4904      	ldr	r1, [pc, #16]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08004450 	.word	0x08004450

080024f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002510:	f7ff f968 	bl	80017e4 <HAL_PWREx_GetVoltageRange>
 8002514:	6178      	str	r0, [r7, #20]
 8002516:	e014      	b.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002522:	6593      	str	r3, [r2, #88]	; 0x58
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002530:	f7ff f958 	bl	80017e4 <HAL_PWREx_GetVoltageRange>
 8002534:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002548:	d10b      	bne.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b80      	cmp	r3, #128	; 0x80
 800254e:	d919      	bls.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2ba0      	cmp	r3, #160	; 0xa0
 8002554:	d902      	bls.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002556:	2302      	movs	r3, #2
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e013      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800255c:	2301      	movs	r3, #1
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e010      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d902      	bls.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002568:	2303      	movs	r3, #3
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e00a      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d102      	bne.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002574:	2302      	movs	r3, #2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e004      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b70      	cmp	r3, #112	; 0x70
 800257e:	d101      	bne.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002580:	2301      	movs	r3, #1
 8002582:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 0207 	bic.w	r2, r3, #7
 800258c:	4909      	ldr	r1, [pc, #36]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c0:	2300      	movs	r3, #0
 80025c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c4:	2300      	movs	r3, #0
 80025c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 809e 	beq.w	8002712 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025da:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x34>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f0:	4b40      	ldr	r3, [pc, #256]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4a3f      	ldr	r2, [pc, #252]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	; 0x58
 80025fc:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002608:	2301      	movs	r3, #1
 800260a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800260c:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002618:	f7fe fc3c 	bl	8000e94 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800261e:	e009      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002620:	f7fe fc38 	bl	8000e94 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	74fb      	strb	r3, [r7, #19]
        break;
 8002632:	e005      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002634:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d15a      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002646:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002650:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01e      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	d019      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002684:	4a1b      	ldr	r2, [pc, #108]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800268e:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d016      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fbf8 	bl	8000e94 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a6:	e00b      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a8:	f7fe fbf4 	bl	8000e94 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d902      	bls.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	74fb      	strb	r3, [r7, #19]
            break;
 80026be:	e006      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0ec      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10b      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4904      	ldr	r1, [pc, #16]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026ea:	e009      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	74bb      	strb	r3, [r7, #18]
 80026f0:	e006      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002700:	7c7b      	ldrb	r3, [r7, #17]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002706:	4b6e      	ldr	r3, [pc, #440]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	4a6d      	ldr	r2, [pc, #436]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800270c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002710:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800271e:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f023 0203 	bic.w	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4964      	ldr	r1, [pc, #400]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 020c 	bic.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	495c      	ldr	r1, [pc, #368]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4953      	ldr	r1, [pc, #332]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002784:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	494b      	ldr	r1, [pc, #300]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a6:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4942      	ldr	r1, [pc, #264]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027c8:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	493a      	ldr	r1, [pc, #232]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ea:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	4931      	ldr	r1, [pc, #196]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800280c:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	4929      	ldr	r1, [pc, #164]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4920      	ldr	r1, [pc, #128]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	4918      	ldr	r1, [pc, #96]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	490a      	ldr	r1, [pc, #40]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e040      	b.n	8002978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe f9c8 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0201 	bic.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f992 	bl	8002c4c <UART_SetConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e022      	b.n	8002978 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fbba 	bl	80030b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800294e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800295e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fc41 	bl	80031f8 <UART_CheckIdleState>
 8002976:	4603      	mov	r3, r0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002994:	2b20      	cmp	r3, #32
 8002996:	f040 8082 	bne.w	8002a9e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_UART_Transmit+0x26>
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07a      	b.n	8002aa0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Transmit+0x38>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e073      	b.n	8002aa0 <HAL_UART_Transmit+0x120>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2221      	movs	r2, #33	; 0x21
 80029cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ce:	f7fe fa61 	bl	8000e94 <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d108      	bne.n	8002a00 <HAL_UART_Transmit+0x80>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	e003      	b.n	8002a08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a10:	e02d      	b.n	8002a6e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fc34 	bl	800328a <UART_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e039      	b.n	8002aa0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	3302      	adds	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	e008      	b.n	8002a5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b292      	uxth	r2, r2
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1cb      	bne.n	8002a12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2140      	movs	r1, #64	; 0x40
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fc00 	bl	800328a <UART_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e005      	b.n	8002aa0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	f040 80bf 	bne.w	8002c40 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_UART_Receive+0x26>
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0b7      	b.n	8002c42 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Receive+0x38>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0b0      	b.n	8002c42 <HAL_UART_Receive+0x19a>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2222      	movs	r2, #34	; 0x22
 8002af4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002afc:	f7fe f9ca 	bl	8000e94 <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1a:	d10e      	bne.n	8002b3a <HAL_UART_Receive+0x92>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_UART_Receive+0x88>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b2e:	e02d      	b.n	8002b8c <HAL_UART_Receive+0xe4>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	22ff      	movs	r2, #255	; 0xff
 8002b34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b38:	e028      	b.n	8002b8c <HAL_UART_Receive+0xe4>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_UART_Receive+0xb6>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <HAL_UART_Receive+0xac>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22ff      	movs	r2, #255	; 0xff
 8002b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b52:	e01b      	b.n	8002b8c <HAL_UART_Receive+0xe4>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	227f      	movs	r2, #127	; 0x7f
 8002b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b5c:	e016      	b.n	8002b8c <HAL_UART_Receive+0xe4>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b66:	d10d      	bne.n	8002b84 <HAL_UART_Receive+0xdc>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d104      	bne.n	8002b7a <HAL_UART_Receive+0xd2>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	227f      	movs	r2, #127	; 0x7f
 8002b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b78:	e008      	b.n	8002b8c <HAL_UART_Receive+0xe4>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b82:	e003      	b.n	8002b8c <HAL_UART_Receive+0xe4>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9c:	d108      	bne.n	8002bb0 <HAL_UART_Receive+0x108>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e003      	b.n	8002bb8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bc0:	e033      	b.n	8002c2a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2120      	movs	r1, #32
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fb5c 	bl	800328a <UART_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e032      	b.n	8002c42 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	8a7b      	ldrh	r3, [r7, #18]
 8002bec:	4013      	ands	r3, r2
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e00d      	b.n	8002c18 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	8a7b      	ldrh	r3, [r7, #18]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1c5      	bne.n	8002bc2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4baa      	ldr	r3, [pc, #680]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	69f9      	ldr	r1, [r7, #28]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a9f      	ldr	r2, [pc, #636]	; (8002f24 <UART_SetConfig+0x2d8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a96      	ldr	r2, [pc, #600]	; (8002f28 <UART_SetConfig+0x2dc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d121      	bne.n	8002d16 <UART_SetConfig+0xca>
 8002cd2:	4b96      	ldr	r3, [pc, #600]	; (8002f2c <UART_SetConfig+0x2e0>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d817      	bhi.n	8002d10 <UART_SetConfig+0xc4>
 8002ce0:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <UART_SetConfig+0x9c>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002cff 	.word	0x08002cff
 8002cf4:	08002d0b 	.word	0x08002d0b
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	76fb      	strb	r3, [r7, #27]
 8002cfc:	e096      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	76fb      	strb	r3, [r7, #27]
 8002d02:	e093      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d04:	2304      	movs	r3, #4
 8002d06:	76fb      	strb	r3, [r7, #27]
 8002d08:	e090      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	76fb      	strb	r3, [r7, #27]
 8002d0e:	e08d      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d10:	2310      	movs	r3, #16
 8002d12:	76fb      	strb	r3, [r7, #27]
 8002d14:	e08a      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a85      	ldr	r2, [pc, #532]	; (8002f30 <UART_SetConfig+0x2e4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d132      	bne.n	8002d86 <UART_SetConfig+0x13a>
 8002d20:	4b82      	ldr	r3, [pc, #520]	; (8002f2c <UART_SetConfig+0x2e0>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d828      	bhi.n	8002d80 <UART_SetConfig+0x134>
 8002d2e:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <UART_SetConfig+0xe8>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08002d81 	.word	0x08002d81
 8002d3c:	08002d81 	.word	0x08002d81
 8002d40:	08002d81 	.word	0x08002d81
 8002d44:	08002d75 	.word	0x08002d75
 8002d48:	08002d81 	.word	0x08002d81
 8002d4c:	08002d81 	.word	0x08002d81
 8002d50:	08002d81 	.word	0x08002d81
 8002d54:	08002d6f 	.word	0x08002d6f
 8002d58:	08002d81 	.word	0x08002d81
 8002d5c:	08002d81 	.word	0x08002d81
 8002d60:	08002d81 	.word	0x08002d81
 8002d64:	08002d7b 	.word	0x08002d7b
 8002d68:	2300      	movs	r3, #0
 8002d6a:	76fb      	strb	r3, [r7, #27]
 8002d6c:	e05e      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	76fb      	strb	r3, [r7, #27]
 8002d72:	e05b      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d74:	2304      	movs	r3, #4
 8002d76:	76fb      	strb	r3, [r7, #27]
 8002d78:	e058      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	76fb      	strb	r3, [r7, #27]
 8002d7e:	e055      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d80:	2310      	movs	r3, #16
 8002d82:	76fb      	strb	r3, [r7, #27]
 8002d84:	e052      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <UART_SetConfig+0x2e8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d120      	bne.n	8002dd2 <UART_SetConfig+0x186>
 8002d90:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <UART_SetConfig+0x2e0>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d9a:	2b30      	cmp	r3, #48	; 0x30
 8002d9c:	d013      	beq.n	8002dc6 <UART_SetConfig+0x17a>
 8002d9e:	2b30      	cmp	r3, #48	; 0x30
 8002da0:	d814      	bhi.n	8002dcc <UART_SetConfig+0x180>
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d009      	beq.n	8002dba <UART_SetConfig+0x16e>
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d810      	bhi.n	8002dcc <UART_SetConfig+0x180>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <UART_SetConfig+0x168>
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d006      	beq.n	8002dc0 <UART_SetConfig+0x174>
 8002db2:	e00b      	b.n	8002dcc <UART_SetConfig+0x180>
 8002db4:	2300      	movs	r3, #0
 8002db6:	76fb      	strb	r3, [r7, #27]
 8002db8:	e038      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	76fb      	strb	r3, [r7, #27]
 8002dbe:	e035      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	76fb      	strb	r3, [r7, #27]
 8002dc4:	e032      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	76fb      	strb	r3, [r7, #27]
 8002dca:	e02f      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	76fb      	strb	r3, [r7, #27]
 8002dd0:	e02c      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a53      	ldr	r2, [pc, #332]	; (8002f24 <UART_SetConfig+0x2d8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d125      	bne.n	8002e28 <UART_SetConfig+0x1dc>
 8002ddc:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <UART_SetConfig+0x2e0>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dea:	d017      	beq.n	8002e1c <UART_SetConfig+0x1d0>
 8002dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002df0:	d817      	bhi.n	8002e22 <UART_SetConfig+0x1d6>
 8002df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df6:	d00b      	beq.n	8002e10 <UART_SetConfig+0x1c4>
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfc:	d811      	bhi.n	8002e22 <UART_SetConfig+0x1d6>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <UART_SetConfig+0x1be>
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d006      	beq.n	8002e16 <UART_SetConfig+0x1ca>
 8002e08:	e00b      	b.n	8002e22 <UART_SetConfig+0x1d6>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	76fb      	strb	r3, [r7, #27]
 8002e0e:	e00d      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002e10:	2302      	movs	r3, #2
 8002e12:	76fb      	strb	r3, [r7, #27]
 8002e14:	e00a      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002e16:	2304      	movs	r3, #4
 8002e18:	76fb      	strb	r3, [r7, #27]
 8002e1a:	e007      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	76fb      	strb	r3, [r7, #27]
 8002e20:	e004      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002e22:	2310      	movs	r3, #16
 8002e24:	76fb      	strb	r3, [r7, #27]
 8002e26:	e001      	b.n	8002e2c <UART_SetConfig+0x1e0>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <UART_SetConfig+0x2d8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	f040 8082 	bne.w	8002f3c <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e38:	7efb      	ldrb	r3, [r7, #27]
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d823      	bhi.n	8002e86 <UART_SetConfig+0x23a>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <UART_SetConfig+0x1f8>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e69 	.word	0x08002e69
 8002e48:	08002e87 	.word	0x08002e87
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e87 	.word	0x08002e87
 8002e54:	08002e77 	.word	0x08002e77
 8002e58:	08002e87 	.word	0x08002e87
 8002e5c:	08002e87 	.word	0x08002e87
 8002e60:	08002e87 	.word	0x08002e87
 8002e64:	08002e7f 	.word	0x08002e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e68:	f7ff fb1a 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8002e6c:	6178      	str	r0, [r7, #20]
        break;
 8002e6e:	e00f      	b.n	8002e90 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e70:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <UART_SetConfig+0x2ec>)
 8002e72:	617b      	str	r3, [r7, #20]
        break;
 8002e74:	e00c      	b.n	8002e90 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e76:	f7ff fa7b 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8002e7a:	6178      	str	r0, [r7, #20]
        break;
 8002e7c:	e008      	b.n	8002e90 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e82:	617b      	str	r3, [r7, #20]
        break;
 8002e84:	e004      	b.n	8002e90 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	76bb      	strb	r3, [r7, #26]
        break;
 8002e8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8100 	beq.w	8003098 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d305      	bcc.n	8002eb4 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d902      	bls.n	8002eba <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	76bb      	strb	r3, [r7, #26]
 8002eb8:	e0ee      	b.n	8003098 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	020b      	lsls	r3, r1, #8
 8002ecc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002ed0:	0202      	lsls	r2, r0, #8
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	6849      	ldr	r1, [r1, #4]
 8002ed6:	0849      	lsrs	r1, r1, #1
 8002ed8:	4608      	mov	r0, r1
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	1814      	adds	r4, r2, r0
 8002ee0:	eb43 0501 	adc.w	r5, r3, r1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f7fd f9bd 	bl	8000270 <__aeabi_uldivmod>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4613      	mov	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f04:	d308      	bcc.n	8002f18 <UART_SetConfig+0x2cc>
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f0c:	d204      	bcs.n	8002f18 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	e0bf      	b.n	8003098 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	76bb      	strb	r3, [r7, #26]
 8002f1c:	e0bc      	b.n	8003098 <UART_SetConfig+0x44c>
 8002f1e:	bf00      	nop
 8002f20:	efff69f3 	.word	0xefff69f3
 8002f24:	40008000 	.word	0x40008000
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40004400 	.word	0x40004400
 8002f34:	40004800 	.word	0x40004800
 8002f38:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f44:	d15b      	bne.n	8002ffe <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8002f46:	7efb      	ldrb	r3, [r7, #27]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d828      	bhi.n	8002f9e <UART_SetConfig+0x352>
 8002f4c:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <UART_SetConfig+0x308>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f79 	.word	0x08002f79
 8002f58:	08002f81 	.word	0x08002f81
 8002f5c:	08002f89 	.word	0x08002f89
 8002f60:	08002f9f 	.word	0x08002f9f
 8002f64:	08002f8f 	.word	0x08002f8f
 8002f68:	08002f9f 	.word	0x08002f9f
 8002f6c:	08002f9f 	.word	0x08002f9f
 8002f70:	08002f9f 	.word	0x08002f9f
 8002f74:	08002f97 	.word	0x08002f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f78:	f7ff fa92 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8002f7c:	6178      	str	r0, [r7, #20]
        break;
 8002f7e:	e013      	b.n	8002fa8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f80:	f7ff faa4 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8002f84:	6178      	str	r0, [r7, #20]
        break;
 8002f86:	e00f      	b.n	8002fa8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f88:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <UART_SetConfig+0x464>)
 8002f8a:	617b      	str	r3, [r7, #20]
        break;
 8002f8c:	e00c      	b.n	8002fa8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8e:	f7ff f9ef 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 8002f92:	6178      	str	r0, [r7, #20]
        break;
 8002f94:	e008      	b.n	8002fa8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9a:	617b      	str	r3, [r7, #20]
        break;
 8002f9c:	e004      	b.n	8002fa8 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	76bb      	strb	r3, [r7, #26]
        break;
 8002fa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d074      	beq.n	8003098 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005a      	lsls	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	441a      	add	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	d916      	bls.n	8002ff8 <UART_SetConfig+0x3ac>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d212      	bcs.n	8002ff8 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f023 030f 	bic.w	r3, r3, #15
 8002fda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	89fb      	ldrh	r3, [r7, #14]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	89fa      	ldrh	r2, [r7, #14]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	e04f      	b.n	8003098 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	76bb      	strb	r3, [r7, #26]
 8002ffc:	e04c      	b.n	8003098 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ffe:	7efb      	ldrb	r3, [r7, #27]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d828      	bhi.n	8003056 <UART_SetConfig+0x40a>
 8003004:	a201      	add	r2, pc, #4	; (adr r2, 800300c <UART_SetConfig+0x3c0>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	08003031 	.word	0x08003031
 8003010:	08003039 	.word	0x08003039
 8003014:	08003041 	.word	0x08003041
 8003018:	08003057 	.word	0x08003057
 800301c:	08003047 	.word	0x08003047
 8003020:	08003057 	.word	0x08003057
 8003024:	08003057 	.word	0x08003057
 8003028:	08003057 	.word	0x08003057
 800302c:	0800304f 	.word	0x0800304f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003030:	f7ff fa36 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8003034:	6178      	str	r0, [r7, #20]
        break;
 8003036:	e013      	b.n	8003060 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003038:	f7ff fa48 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 800303c:	6178      	str	r0, [r7, #20]
        break;
 800303e:	e00f      	b.n	8003060 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <UART_SetConfig+0x464>)
 8003042:	617b      	str	r3, [r7, #20]
        break;
 8003044:	e00c      	b.n	8003060 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7ff f993 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800304a:	6178      	str	r0, [r7, #20]
        break;
 800304c:	e008      	b.n	8003060 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800304e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003052:	617b      	str	r3, [r7, #20]
        break;
 8003054:	e004      	b.n	8003060 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	76bb      	strb	r3, [r7, #26]
        break;
 800305e:	bf00      	nop
    }

    if (pclk != 0U)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d018      	beq.n	8003098 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	085a      	lsrs	r2, r3, #1
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	441a      	add	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b0f      	cmp	r3, #15
 800307e:	d909      	bls.n	8003094 <UART_SetConfig+0x448>
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003086:	d205      	bcs.n	8003094 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	b29a      	uxth	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e001      	b.n	8003098 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bdb0      	pop	{r4, r5, r7, pc}
 80030ae:	bf00      	nop
 80030b0:	00f42400 	.word	0x00f42400

080030b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01a      	beq.n	80031ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b2:	d10a      	bne.n	80031ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003208:	f7fd fe44 	bl	8000e94 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d10e      	bne.n	800323a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f82d 	bl	800328a <UART_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e023      	b.n	8003282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b04      	cmp	r3, #4
 8003246:	d10e      	bne.n	8003266 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f817 	bl	800328a <UART_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e00d      	b.n	8003282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b09c      	sub	sp, #112	; 0x70
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329a:	e0a5      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	f000 80a1 	beq.w	80033e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fd fdf5 	bl	8000e94 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <UART_WaitOnFlagUntilTimeout+0x32>
 80032b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d13e      	bne.n	800333a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032d0:	667b      	str	r3, [r7, #100]	; 0x64
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e6      	bne.n	80032bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3308      	adds	r3, #8
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	663b      	str	r3, [r7, #96]	; 0x60
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3308      	adds	r3, #8
 800330c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800330e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e067      	b.n	800340a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d04f      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003356:	d147      	bne.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003360:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
 8003382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e6      	bne.n	8003362 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3308      	adds	r3, #8
 800339a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	613b      	str	r3, [r7, #16]
   return(result);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033b4:	623a      	str	r2, [r7, #32]
 80033b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	69f9      	ldr	r1, [r7, #28]
 80033ba:	6a3a      	ldr	r2, [r7, #32]
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e010      	b.n	800340a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	429a      	cmp	r2, r3
 8003404:	f43f af4a 	beq.w	800329c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3770      	adds	r7, #112	; 0x70
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <__errno>:
 8003414:	4b01      	ldr	r3, [pc, #4]	; (800341c <__errno+0x8>)
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000010 	.word	0x20000010

08003420 <__libc_init_array>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	4d0d      	ldr	r5, [pc, #52]	; (8003458 <__libc_init_array+0x38>)
 8003424:	4c0d      	ldr	r4, [pc, #52]	; (800345c <__libc_init_array+0x3c>)
 8003426:	1b64      	subs	r4, r4, r5
 8003428:	10a4      	asrs	r4, r4, #2
 800342a:	2600      	movs	r6, #0
 800342c:	42a6      	cmp	r6, r4
 800342e:	d109      	bne.n	8003444 <__libc_init_array+0x24>
 8003430:	4d0b      	ldr	r5, [pc, #44]	; (8003460 <__libc_init_array+0x40>)
 8003432:	4c0c      	ldr	r4, [pc, #48]	; (8003464 <__libc_init_array+0x44>)
 8003434:	f000 ffec 	bl	8004410 <_init>
 8003438:	1b64      	subs	r4, r4, r5
 800343a:	10a4      	asrs	r4, r4, #2
 800343c:	2600      	movs	r6, #0
 800343e:	42a6      	cmp	r6, r4
 8003440:	d105      	bne.n	800344e <__libc_init_array+0x2e>
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	f855 3b04 	ldr.w	r3, [r5], #4
 8003448:	4798      	blx	r3
 800344a:	3601      	adds	r6, #1
 800344c:	e7ee      	b.n	800342c <__libc_init_array+0xc>
 800344e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003452:	4798      	blx	r3
 8003454:	3601      	adds	r6, #1
 8003456:	e7f2      	b.n	800343e <__libc_init_array+0x1e>
 8003458:	08004528 	.word	0x08004528
 800345c:	08004528 	.word	0x08004528
 8003460:	08004528 	.word	0x08004528
 8003464:	0800452c 	.word	0x0800452c

08003468 <memset>:
 8003468:	4402      	add	r2, r0
 800346a:	4603      	mov	r3, r0
 800346c:	4293      	cmp	r3, r2
 800346e:	d100      	bne.n	8003472 <memset+0xa>
 8003470:	4770      	bx	lr
 8003472:	f803 1b01 	strb.w	r1, [r3], #1
 8003476:	e7f9      	b.n	800346c <memset+0x4>

08003478 <iprintf>:
 8003478:	b40f      	push	{r0, r1, r2, r3}
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <iprintf+0x2c>)
 800347c:	b513      	push	{r0, r1, r4, lr}
 800347e:	681c      	ldr	r4, [r3, #0]
 8003480:	b124      	cbz	r4, 800348c <iprintf+0x14>
 8003482:	69a3      	ldr	r3, [r4, #24]
 8003484:	b913      	cbnz	r3, 800348c <iprintf+0x14>
 8003486:	4620      	mov	r0, r4
 8003488:	f000 fa5e 	bl	8003948 <__sinit>
 800348c:	ab05      	add	r3, sp, #20
 800348e:	9a04      	ldr	r2, [sp, #16]
 8003490:	68a1      	ldr	r1, [r4, #8]
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	4620      	mov	r0, r4
 8003496:	f000 fc2f 	bl	8003cf8 <_vfiprintf_r>
 800349a:	b002      	add	sp, #8
 800349c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a0:	b004      	add	sp, #16
 80034a2:	4770      	bx	lr
 80034a4:	20000010 	.word	0x20000010

080034a8 <_puts_r>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	460e      	mov	r6, r1
 80034ac:	4605      	mov	r5, r0
 80034ae:	b118      	cbz	r0, 80034b8 <_puts_r+0x10>
 80034b0:	6983      	ldr	r3, [r0, #24]
 80034b2:	b90b      	cbnz	r3, 80034b8 <_puts_r+0x10>
 80034b4:	f000 fa48 	bl	8003948 <__sinit>
 80034b8:	69ab      	ldr	r3, [r5, #24]
 80034ba:	68ac      	ldr	r4, [r5, #8]
 80034bc:	b913      	cbnz	r3, 80034c4 <_puts_r+0x1c>
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 fa42 	bl	8003948 <__sinit>
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <_puts_r+0xd0>)
 80034c6:	429c      	cmp	r4, r3
 80034c8:	d120      	bne.n	800350c <_puts_r+0x64>
 80034ca:	686c      	ldr	r4, [r5, #4]
 80034cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ce:	07db      	lsls	r3, r3, #31
 80034d0:	d405      	bmi.n	80034de <_puts_r+0x36>
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	0598      	lsls	r0, r3, #22
 80034d6:	d402      	bmi.n	80034de <_puts_r+0x36>
 80034d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034da:	f000 fad3 	bl	8003a84 <__retarget_lock_acquire_recursive>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	0719      	lsls	r1, r3, #28
 80034e2:	d51d      	bpl.n	8003520 <_puts_r+0x78>
 80034e4:	6923      	ldr	r3, [r4, #16]
 80034e6:	b1db      	cbz	r3, 8003520 <_puts_r+0x78>
 80034e8:	3e01      	subs	r6, #1
 80034ea:	68a3      	ldr	r3, [r4, #8]
 80034ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60a3      	str	r3, [r4, #8]
 80034f4:	bb39      	cbnz	r1, 8003546 <_puts_r+0x9e>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	da38      	bge.n	800356c <_puts_r+0xc4>
 80034fa:	4622      	mov	r2, r4
 80034fc:	210a      	movs	r1, #10
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 f848 	bl	8003594 <__swbuf_r>
 8003504:	3001      	adds	r0, #1
 8003506:	d011      	beq.n	800352c <_puts_r+0x84>
 8003508:	250a      	movs	r5, #10
 800350a:	e011      	b.n	8003530 <_puts_r+0x88>
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <_puts_r+0xd4>)
 800350e:	429c      	cmp	r4, r3
 8003510:	d101      	bne.n	8003516 <_puts_r+0x6e>
 8003512:	68ac      	ldr	r4, [r5, #8]
 8003514:	e7da      	b.n	80034cc <_puts_r+0x24>
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <_puts_r+0xd8>)
 8003518:	429c      	cmp	r4, r3
 800351a:	bf08      	it	eq
 800351c:	68ec      	ldreq	r4, [r5, #12]
 800351e:	e7d5      	b.n	80034cc <_puts_r+0x24>
 8003520:	4621      	mov	r1, r4
 8003522:	4628      	mov	r0, r5
 8003524:	f000 f888 	bl	8003638 <__swsetup_r>
 8003528:	2800      	cmp	r0, #0
 800352a:	d0dd      	beq.n	80034e8 <_puts_r+0x40>
 800352c:	f04f 35ff 	mov.w	r5, #4294967295
 8003530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003532:	07da      	lsls	r2, r3, #31
 8003534:	d405      	bmi.n	8003542 <_puts_r+0x9a>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	059b      	lsls	r3, r3, #22
 800353a:	d402      	bmi.n	8003542 <_puts_r+0x9a>
 800353c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800353e:	f000 faa2 	bl	8003a86 <__retarget_lock_release_recursive>
 8003542:	4628      	mov	r0, r5
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	2b00      	cmp	r3, #0
 8003548:	da04      	bge.n	8003554 <_puts_r+0xac>
 800354a:	69a2      	ldr	r2, [r4, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	dc06      	bgt.n	800355e <_puts_r+0xb6>
 8003550:	290a      	cmp	r1, #10
 8003552:	d004      	beq.n	800355e <_puts_r+0xb6>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	6022      	str	r2, [r4, #0]
 800355a:	7019      	strb	r1, [r3, #0]
 800355c:	e7c5      	b.n	80034ea <_puts_r+0x42>
 800355e:	4622      	mov	r2, r4
 8003560:	4628      	mov	r0, r5
 8003562:	f000 f817 	bl	8003594 <__swbuf_r>
 8003566:	3001      	adds	r0, #1
 8003568:	d1bf      	bne.n	80034ea <_puts_r+0x42>
 800356a:	e7df      	b.n	800352c <_puts_r+0x84>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	250a      	movs	r5, #10
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	6022      	str	r2, [r4, #0]
 8003574:	701d      	strb	r5, [r3, #0]
 8003576:	e7db      	b.n	8003530 <_puts_r+0x88>
 8003578:	080044ac 	.word	0x080044ac
 800357c:	080044cc 	.word	0x080044cc
 8003580:	0800448c 	.word	0x0800448c

08003584 <puts>:
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <puts+0xc>)
 8003586:	4601      	mov	r1, r0
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	f7ff bf8d 	b.w	80034a8 <_puts_r>
 800358e:	bf00      	nop
 8003590:	20000010 	.word	0x20000010

08003594 <__swbuf_r>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	460e      	mov	r6, r1
 8003598:	4614      	mov	r4, r2
 800359a:	4605      	mov	r5, r0
 800359c:	b118      	cbz	r0, 80035a6 <__swbuf_r+0x12>
 800359e:	6983      	ldr	r3, [r0, #24]
 80035a0:	b90b      	cbnz	r3, 80035a6 <__swbuf_r+0x12>
 80035a2:	f000 f9d1 	bl	8003948 <__sinit>
 80035a6:	4b21      	ldr	r3, [pc, #132]	; (800362c <__swbuf_r+0x98>)
 80035a8:	429c      	cmp	r4, r3
 80035aa:	d12b      	bne.n	8003604 <__swbuf_r+0x70>
 80035ac:	686c      	ldr	r4, [r5, #4]
 80035ae:	69a3      	ldr	r3, [r4, #24]
 80035b0:	60a3      	str	r3, [r4, #8]
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	071a      	lsls	r2, r3, #28
 80035b6:	d52f      	bpl.n	8003618 <__swbuf_r+0x84>
 80035b8:	6923      	ldr	r3, [r4, #16]
 80035ba:	b36b      	cbz	r3, 8003618 <__swbuf_r+0x84>
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	1ac0      	subs	r0, r0, r3
 80035c2:	6963      	ldr	r3, [r4, #20]
 80035c4:	b2f6      	uxtb	r6, r6
 80035c6:	4283      	cmp	r3, r0
 80035c8:	4637      	mov	r7, r6
 80035ca:	dc04      	bgt.n	80035d6 <__swbuf_r+0x42>
 80035cc:	4621      	mov	r1, r4
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 f926 	bl	8003820 <_fflush_r>
 80035d4:	bb30      	cbnz	r0, 8003624 <__swbuf_r+0x90>
 80035d6:	68a3      	ldr	r3, [r4, #8]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60a3      	str	r3, [r4, #8]
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	6022      	str	r2, [r4, #0]
 80035e2:	701e      	strb	r6, [r3, #0]
 80035e4:	6963      	ldr	r3, [r4, #20]
 80035e6:	3001      	adds	r0, #1
 80035e8:	4283      	cmp	r3, r0
 80035ea:	d004      	beq.n	80035f6 <__swbuf_r+0x62>
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	07db      	lsls	r3, r3, #31
 80035f0:	d506      	bpl.n	8003600 <__swbuf_r+0x6c>
 80035f2:	2e0a      	cmp	r6, #10
 80035f4:	d104      	bne.n	8003600 <__swbuf_r+0x6c>
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 f911 	bl	8003820 <_fflush_r>
 80035fe:	b988      	cbnz	r0, 8003624 <__swbuf_r+0x90>
 8003600:	4638      	mov	r0, r7
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <__swbuf_r+0x9c>)
 8003606:	429c      	cmp	r4, r3
 8003608:	d101      	bne.n	800360e <__swbuf_r+0x7a>
 800360a:	68ac      	ldr	r4, [r5, #8]
 800360c:	e7cf      	b.n	80035ae <__swbuf_r+0x1a>
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <__swbuf_r+0xa0>)
 8003610:	429c      	cmp	r4, r3
 8003612:	bf08      	it	eq
 8003614:	68ec      	ldreq	r4, [r5, #12]
 8003616:	e7ca      	b.n	80035ae <__swbuf_r+0x1a>
 8003618:	4621      	mov	r1, r4
 800361a:	4628      	mov	r0, r5
 800361c:	f000 f80c 	bl	8003638 <__swsetup_r>
 8003620:	2800      	cmp	r0, #0
 8003622:	d0cb      	beq.n	80035bc <__swbuf_r+0x28>
 8003624:	f04f 37ff 	mov.w	r7, #4294967295
 8003628:	e7ea      	b.n	8003600 <__swbuf_r+0x6c>
 800362a:	bf00      	nop
 800362c:	080044ac 	.word	0x080044ac
 8003630:	080044cc 	.word	0x080044cc
 8003634:	0800448c 	.word	0x0800448c

08003638 <__swsetup_r>:
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <__swsetup_r+0xcc>)
 800363a:	b570      	push	{r4, r5, r6, lr}
 800363c:	681d      	ldr	r5, [r3, #0]
 800363e:	4606      	mov	r6, r0
 8003640:	460c      	mov	r4, r1
 8003642:	b125      	cbz	r5, 800364e <__swsetup_r+0x16>
 8003644:	69ab      	ldr	r3, [r5, #24]
 8003646:	b913      	cbnz	r3, 800364e <__swsetup_r+0x16>
 8003648:	4628      	mov	r0, r5
 800364a:	f000 f97d 	bl	8003948 <__sinit>
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <__swsetup_r+0xd0>)
 8003650:	429c      	cmp	r4, r3
 8003652:	d10f      	bne.n	8003674 <__swsetup_r+0x3c>
 8003654:	686c      	ldr	r4, [r5, #4]
 8003656:	89a3      	ldrh	r3, [r4, #12]
 8003658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800365c:	0719      	lsls	r1, r3, #28
 800365e:	d42c      	bmi.n	80036ba <__swsetup_r+0x82>
 8003660:	06dd      	lsls	r5, r3, #27
 8003662:	d411      	bmi.n	8003688 <__swsetup_r+0x50>
 8003664:	2309      	movs	r3, #9
 8003666:	6033      	str	r3, [r6, #0]
 8003668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800366c:	81a3      	strh	r3, [r4, #12]
 800366e:	f04f 30ff 	mov.w	r0, #4294967295
 8003672:	e03e      	b.n	80036f2 <__swsetup_r+0xba>
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <__swsetup_r+0xd4>)
 8003676:	429c      	cmp	r4, r3
 8003678:	d101      	bne.n	800367e <__swsetup_r+0x46>
 800367a:	68ac      	ldr	r4, [r5, #8]
 800367c:	e7eb      	b.n	8003656 <__swsetup_r+0x1e>
 800367e:	4b24      	ldr	r3, [pc, #144]	; (8003710 <__swsetup_r+0xd8>)
 8003680:	429c      	cmp	r4, r3
 8003682:	bf08      	it	eq
 8003684:	68ec      	ldreq	r4, [r5, #12]
 8003686:	e7e6      	b.n	8003656 <__swsetup_r+0x1e>
 8003688:	0758      	lsls	r0, r3, #29
 800368a:	d512      	bpl.n	80036b2 <__swsetup_r+0x7a>
 800368c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800368e:	b141      	cbz	r1, 80036a2 <__swsetup_r+0x6a>
 8003690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003694:	4299      	cmp	r1, r3
 8003696:	d002      	beq.n	800369e <__swsetup_r+0x66>
 8003698:	4630      	mov	r0, r6
 800369a:	f000 fa59 	bl	8003b50 <_free_r>
 800369e:	2300      	movs	r3, #0
 80036a0:	6363      	str	r3, [r4, #52]	; 0x34
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	2300      	movs	r3, #0
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	6923      	ldr	r3, [r4, #16]
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	b94b      	cbnz	r3, 80036d2 <__swsetup_r+0x9a>
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d003      	beq.n	80036d2 <__swsetup_r+0x9a>
 80036ca:	4621      	mov	r1, r4
 80036cc:	4630      	mov	r0, r6
 80036ce:	f000 f9ff 	bl	8003ad0 <__smakebuf_r>
 80036d2:	89a0      	ldrh	r0, [r4, #12]
 80036d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036d8:	f010 0301 	ands.w	r3, r0, #1
 80036dc:	d00a      	beq.n	80036f4 <__swsetup_r+0xbc>
 80036de:	2300      	movs	r3, #0
 80036e0:	60a3      	str	r3, [r4, #8]
 80036e2:	6963      	ldr	r3, [r4, #20]
 80036e4:	425b      	negs	r3, r3
 80036e6:	61a3      	str	r3, [r4, #24]
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	b943      	cbnz	r3, 80036fe <__swsetup_r+0xc6>
 80036ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036f0:	d1ba      	bne.n	8003668 <__swsetup_r+0x30>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	0781      	lsls	r1, r0, #30
 80036f6:	bf58      	it	pl
 80036f8:	6963      	ldrpl	r3, [r4, #20]
 80036fa:	60a3      	str	r3, [r4, #8]
 80036fc:	e7f4      	b.n	80036e8 <__swsetup_r+0xb0>
 80036fe:	2000      	movs	r0, #0
 8003700:	e7f7      	b.n	80036f2 <__swsetup_r+0xba>
 8003702:	bf00      	nop
 8003704:	20000010 	.word	0x20000010
 8003708:	080044ac 	.word	0x080044ac
 800370c:	080044cc 	.word	0x080044cc
 8003710:	0800448c 	.word	0x0800448c

08003714 <__sflush_r>:
 8003714:	898a      	ldrh	r2, [r1, #12]
 8003716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800371a:	4605      	mov	r5, r0
 800371c:	0710      	lsls	r0, r2, #28
 800371e:	460c      	mov	r4, r1
 8003720:	d458      	bmi.n	80037d4 <__sflush_r+0xc0>
 8003722:	684b      	ldr	r3, [r1, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	dc05      	bgt.n	8003734 <__sflush_r+0x20>
 8003728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	dc02      	bgt.n	8003734 <__sflush_r+0x20>
 800372e:	2000      	movs	r0, #0
 8003730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003736:	2e00      	cmp	r6, #0
 8003738:	d0f9      	beq.n	800372e <__sflush_r+0x1a>
 800373a:	2300      	movs	r3, #0
 800373c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003740:	682f      	ldr	r7, [r5, #0]
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	d032      	beq.n	80037ac <__sflush_r+0x98>
 8003746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	075a      	lsls	r2, r3, #29
 800374c:	d505      	bpl.n	800375a <__sflush_r+0x46>
 800374e:	6863      	ldr	r3, [r4, #4]
 8003750:	1ac0      	subs	r0, r0, r3
 8003752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003754:	b10b      	cbz	r3, 800375a <__sflush_r+0x46>
 8003756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003758:	1ac0      	subs	r0, r0, r3
 800375a:	2300      	movs	r3, #0
 800375c:	4602      	mov	r2, r0
 800375e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003760:	6a21      	ldr	r1, [r4, #32]
 8003762:	4628      	mov	r0, r5
 8003764:	47b0      	blx	r6
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	d106      	bne.n	800377a <__sflush_r+0x66>
 800376c:	6829      	ldr	r1, [r5, #0]
 800376e:	291d      	cmp	r1, #29
 8003770:	d82c      	bhi.n	80037cc <__sflush_r+0xb8>
 8003772:	4a2a      	ldr	r2, [pc, #168]	; (800381c <__sflush_r+0x108>)
 8003774:	40ca      	lsrs	r2, r1
 8003776:	07d6      	lsls	r6, r2, #31
 8003778:	d528      	bpl.n	80037cc <__sflush_r+0xb8>
 800377a:	2200      	movs	r2, #0
 800377c:	6062      	str	r2, [r4, #4]
 800377e:	04d9      	lsls	r1, r3, #19
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	6022      	str	r2, [r4, #0]
 8003784:	d504      	bpl.n	8003790 <__sflush_r+0x7c>
 8003786:	1c42      	adds	r2, r0, #1
 8003788:	d101      	bne.n	800378e <__sflush_r+0x7a>
 800378a:	682b      	ldr	r3, [r5, #0]
 800378c:	b903      	cbnz	r3, 8003790 <__sflush_r+0x7c>
 800378e:	6560      	str	r0, [r4, #84]	; 0x54
 8003790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003792:	602f      	str	r7, [r5, #0]
 8003794:	2900      	cmp	r1, #0
 8003796:	d0ca      	beq.n	800372e <__sflush_r+0x1a>
 8003798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800379c:	4299      	cmp	r1, r3
 800379e:	d002      	beq.n	80037a6 <__sflush_r+0x92>
 80037a0:	4628      	mov	r0, r5
 80037a2:	f000 f9d5 	bl	8003b50 <_free_r>
 80037a6:	2000      	movs	r0, #0
 80037a8:	6360      	str	r0, [r4, #52]	; 0x34
 80037aa:	e7c1      	b.n	8003730 <__sflush_r+0x1c>
 80037ac:	6a21      	ldr	r1, [r4, #32]
 80037ae:	2301      	movs	r3, #1
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b0      	blx	r6
 80037b4:	1c41      	adds	r1, r0, #1
 80037b6:	d1c7      	bne.n	8003748 <__sflush_r+0x34>
 80037b8:	682b      	ldr	r3, [r5, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0c4      	beq.n	8003748 <__sflush_r+0x34>
 80037be:	2b1d      	cmp	r3, #29
 80037c0:	d001      	beq.n	80037c6 <__sflush_r+0xb2>
 80037c2:	2b16      	cmp	r3, #22
 80037c4:	d101      	bne.n	80037ca <__sflush_r+0xb6>
 80037c6:	602f      	str	r7, [r5, #0]
 80037c8:	e7b1      	b.n	800372e <__sflush_r+0x1a>
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	e7ad      	b.n	8003730 <__sflush_r+0x1c>
 80037d4:	690f      	ldr	r7, [r1, #16]
 80037d6:	2f00      	cmp	r7, #0
 80037d8:	d0a9      	beq.n	800372e <__sflush_r+0x1a>
 80037da:	0793      	lsls	r3, r2, #30
 80037dc:	680e      	ldr	r6, [r1, #0]
 80037de:	bf08      	it	eq
 80037e0:	694b      	ldreq	r3, [r1, #20]
 80037e2:	600f      	str	r7, [r1, #0]
 80037e4:	bf18      	it	ne
 80037e6:	2300      	movne	r3, #0
 80037e8:	eba6 0807 	sub.w	r8, r6, r7
 80037ec:	608b      	str	r3, [r1, #8]
 80037ee:	f1b8 0f00 	cmp.w	r8, #0
 80037f2:	dd9c      	ble.n	800372e <__sflush_r+0x1a>
 80037f4:	6a21      	ldr	r1, [r4, #32]
 80037f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037f8:	4643      	mov	r3, r8
 80037fa:	463a      	mov	r2, r7
 80037fc:	4628      	mov	r0, r5
 80037fe:	47b0      	blx	r6
 8003800:	2800      	cmp	r0, #0
 8003802:	dc06      	bgt.n	8003812 <__sflush_r+0xfe>
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800380a:	81a3      	strh	r3, [r4, #12]
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	e78e      	b.n	8003730 <__sflush_r+0x1c>
 8003812:	4407      	add	r7, r0
 8003814:	eba8 0800 	sub.w	r8, r8, r0
 8003818:	e7e9      	b.n	80037ee <__sflush_r+0xda>
 800381a:	bf00      	nop
 800381c:	20400001 	.word	0x20400001

08003820 <_fflush_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	690b      	ldr	r3, [r1, #16]
 8003824:	4605      	mov	r5, r0
 8003826:	460c      	mov	r4, r1
 8003828:	b913      	cbnz	r3, 8003830 <_fflush_r+0x10>
 800382a:	2500      	movs	r5, #0
 800382c:	4628      	mov	r0, r5
 800382e:	bd38      	pop	{r3, r4, r5, pc}
 8003830:	b118      	cbz	r0, 800383a <_fflush_r+0x1a>
 8003832:	6983      	ldr	r3, [r0, #24]
 8003834:	b90b      	cbnz	r3, 800383a <_fflush_r+0x1a>
 8003836:	f000 f887 	bl	8003948 <__sinit>
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <_fflush_r+0x6c>)
 800383c:	429c      	cmp	r4, r3
 800383e:	d11b      	bne.n	8003878 <_fflush_r+0x58>
 8003840:	686c      	ldr	r4, [r5, #4]
 8003842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ef      	beq.n	800382a <_fflush_r+0xa>
 800384a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800384c:	07d0      	lsls	r0, r2, #31
 800384e:	d404      	bmi.n	800385a <_fflush_r+0x3a>
 8003850:	0599      	lsls	r1, r3, #22
 8003852:	d402      	bmi.n	800385a <_fflush_r+0x3a>
 8003854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003856:	f000 f915 	bl	8003a84 <__retarget_lock_acquire_recursive>
 800385a:	4628      	mov	r0, r5
 800385c:	4621      	mov	r1, r4
 800385e:	f7ff ff59 	bl	8003714 <__sflush_r>
 8003862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003864:	07da      	lsls	r2, r3, #31
 8003866:	4605      	mov	r5, r0
 8003868:	d4e0      	bmi.n	800382c <_fflush_r+0xc>
 800386a:	89a3      	ldrh	r3, [r4, #12]
 800386c:	059b      	lsls	r3, r3, #22
 800386e:	d4dd      	bmi.n	800382c <_fflush_r+0xc>
 8003870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003872:	f000 f908 	bl	8003a86 <__retarget_lock_release_recursive>
 8003876:	e7d9      	b.n	800382c <_fflush_r+0xc>
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <_fflush_r+0x70>)
 800387a:	429c      	cmp	r4, r3
 800387c:	d101      	bne.n	8003882 <_fflush_r+0x62>
 800387e:	68ac      	ldr	r4, [r5, #8]
 8003880:	e7df      	b.n	8003842 <_fflush_r+0x22>
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <_fflush_r+0x74>)
 8003884:	429c      	cmp	r4, r3
 8003886:	bf08      	it	eq
 8003888:	68ec      	ldreq	r4, [r5, #12]
 800388a:	e7da      	b.n	8003842 <_fflush_r+0x22>
 800388c:	080044ac 	.word	0x080044ac
 8003890:	080044cc 	.word	0x080044cc
 8003894:	0800448c 	.word	0x0800448c

08003898 <std>:
 8003898:	2300      	movs	r3, #0
 800389a:	b510      	push	{r4, lr}
 800389c:	4604      	mov	r4, r0
 800389e:	e9c0 3300 	strd	r3, r3, [r0]
 80038a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038a6:	6083      	str	r3, [r0, #8]
 80038a8:	8181      	strh	r1, [r0, #12]
 80038aa:	6643      	str	r3, [r0, #100]	; 0x64
 80038ac:	81c2      	strh	r2, [r0, #14]
 80038ae:	6183      	str	r3, [r0, #24]
 80038b0:	4619      	mov	r1, r3
 80038b2:	2208      	movs	r2, #8
 80038b4:	305c      	adds	r0, #92	; 0x5c
 80038b6:	f7ff fdd7 	bl	8003468 <memset>
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <std+0x38>)
 80038bc:	6263      	str	r3, [r4, #36]	; 0x24
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <std+0x3c>)
 80038c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <std+0x40>)
 80038c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <std+0x44>)
 80038c8:	6224      	str	r4, [r4, #32]
 80038ca:	6323      	str	r3, [r4, #48]	; 0x30
 80038cc:	bd10      	pop	{r4, pc}
 80038ce:	bf00      	nop
 80038d0:	080042a1 	.word	0x080042a1
 80038d4:	080042c3 	.word	0x080042c3
 80038d8:	080042fb 	.word	0x080042fb
 80038dc:	0800431f 	.word	0x0800431f

080038e0 <_cleanup_r>:
 80038e0:	4901      	ldr	r1, [pc, #4]	; (80038e8 <_cleanup_r+0x8>)
 80038e2:	f000 b8af 	b.w	8003a44 <_fwalk_reent>
 80038e6:	bf00      	nop
 80038e8:	08003821 	.word	0x08003821

080038ec <__sfmoreglue>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	1e4a      	subs	r2, r1, #1
 80038f0:	2568      	movs	r5, #104	; 0x68
 80038f2:	4355      	muls	r5, r2
 80038f4:	460e      	mov	r6, r1
 80038f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038fa:	f000 f979 	bl	8003bf0 <_malloc_r>
 80038fe:	4604      	mov	r4, r0
 8003900:	b140      	cbz	r0, 8003914 <__sfmoreglue+0x28>
 8003902:	2100      	movs	r1, #0
 8003904:	e9c0 1600 	strd	r1, r6, [r0]
 8003908:	300c      	adds	r0, #12
 800390a:	60a0      	str	r0, [r4, #8]
 800390c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003910:	f7ff fdaa 	bl	8003468 <memset>
 8003914:	4620      	mov	r0, r4
 8003916:	bd70      	pop	{r4, r5, r6, pc}

08003918 <__sfp_lock_acquire>:
 8003918:	4801      	ldr	r0, [pc, #4]	; (8003920 <__sfp_lock_acquire+0x8>)
 800391a:	f000 b8b3 	b.w	8003a84 <__retarget_lock_acquire_recursive>
 800391e:	bf00      	nop
 8003920:	20000184 	.word	0x20000184

08003924 <__sfp_lock_release>:
 8003924:	4801      	ldr	r0, [pc, #4]	; (800392c <__sfp_lock_release+0x8>)
 8003926:	f000 b8ae 	b.w	8003a86 <__retarget_lock_release_recursive>
 800392a:	bf00      	nop
 800392c:	20000184 	.word	0x20000184

08003930 <__sinit_lock_acquire>:
 8003930:	4801      	ldr	r0, [pc, #4]	; (8003938 <__sinit_lock_acquire+0x8>)
 8003932:	f000 b8a7 	b.w	8003a84 <__retarget_lock_acquire_recursive>
 8003936:	bf00      	nop
 8003938:	2000017f 	.word	0x2000017f

0800393c <__sinit_lock_release>:
 800393c:	4801      	ldr	r0, [pc, #4]	; (8003944 <__sinit_lock_release+0x8>)
 800393e:	f000 b8a2 	b.w	8003a86 <__retarget_lock_release_recursive>
 8003942:	bf00      	nop
 8003944:	2000017f 	.word	0x2000017f

08003948 <__sinit>:
 8003948:	b510      	push	{r4, lr}
 800394a:	4604      	mov	r4, r0
 800394c:	f7ff fff0 	bl	8003930 <__sinit_lock_acquire>
 8003950:	69a3      	ldr	r3, [r4, #24]
 8003952:	b11b      	cbz	r3, 800395c <__sinit+0x14>
 8003954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003958:	f7ff bff0 	b.w	800393c <__sinit_lock_release>
 800395c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003960:	6523      	str	r3, [r4, #80]	; 0x50
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <__sinit+0x68>)
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <__sinit+0x6c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	62a2      	str	r2, [r4, #40]	; 0x28
 800396a:	42a3      	cmp	r3, r4
 800396c:	bf04      	itt	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	61a3      	streq	r3, [r4, #24]
 8003972:	4620      	mov	r0, r4
 8003974:	f000 f820 	bl	80039b8 <__sfp>
 8003978:	6060      	str	r0, [r4, #4]
 800397a:	4620      	mov	r0, r4
 800397c:	f000 f81c 	bl	80039b8 <__sfp>
 8003980:	60a0      	str	r0, [r4, #8]
 8003982:	4620      	mov	r0, r4
 8003984:	f000 f818 	bl	80039b8 <__sfp>
 8003988:	2200      	movs	r2, #0
 800398a:	60e0      	str	r0, [r4, #12]
 800398c:	2104      	movs	r1, #4
 800398e:	6860      	ldr	r0, [r4, #4]
 8003990:	f7ff ff82 	bl	8003898 <std>
 8003994:	68a0      	ldr	r0, [r4, #8]
 8003996:	2201      	movs	r2, #1
 8003998:	2109      	movs	r1, #9
 800399a:	f7ff ff7d 	bl	8003898 <std>
 800399e:	68e0      	ldr	r0, [r4, #12]
 80039a0:	2202      	movs	r2, #2
 80039a2:	2112      	movs	r1, #18
 80039a4:	f7ff ff78 	bl	8003898 <std>
 80039a8:	2301      	movs	r3, #1
 80039aa:	61a3      	str	r3, [r4, #24]
 80039ac:	e7d2      	b.n	8003954 <__sinit+0xc>
 80039ae:	bf00      	nop
 80039b0:	08004488 	.word	0x08004488
 80039b4:	080038e1 	.word	0x080038e1

080039b8 <__sfp>:
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	4607      	mov	r7, r0
 80039bc:	f7ff ffac 	bl	8003918 <__sfp_lock_acquire>
 80039c0:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <__sfp+0x84>)
 80039c2:	681e      	ldr	r6, [r3, #0]
 80039c4:	69b3      	ldr	r3, [r6, #24]
 80039c6:	b913      	cbnz	r3, 80039ce <__sfp+0x16>
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7ff ffbd 	bl	8003948 <__sinit>
 80039ce:	3648      	adds	r6, #72	; 0x48
 80039d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	d503      	bpl.n	80039e0 <__sfp+0x28>
 80039d8:	6833      	ldr	r3, [r6, #0]
 80039da:	b30b      	cbz	r3, 8003a20 <__sfp+0x68>
 80039dc:	6836      	ldr	r6, [r6, #0]
 80039de:	e7f7      	b.n	80039d0 <__sfp+0x18>
 80039e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039e4:	b9d5      	cbnz	r5, 8003a1c <__sfp+0x64>
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <__sfp+0x88>)
 80039e8:	60e3      	str	r3, [r4, #12]
 80039ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039ee:	6665      	str	r5, [r4, #100]	; 0x64
 80039f0:	f000 f847 	bl	8003a82 <__retarget_lock_init_recursive>
 80039f4:	f7ff ff96 	bl	8003924 <__sfp_lock_release>
 80039f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a00:	6025      	str	r5, [r4, #0]
 8003a02:	61a5      	str	r5, [r4, #24]
 8003a04:	2208      	movs	r2, #8
 8003a06:	4629      	mov	r1, r5
 8003a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a0c:	f7ff fd2c 	bl	8003468 <memset>
 8003a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a18:	4620      	mov	r0, r4
 8003a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a1c:	3468      	adds	r4, #104	; 0x68
 8003a1e:	e7d9      	b.n	80039d4 <__sfp+0x1c>
 8003a20:	2104      	movs	r1, #4
 8003a22:	4638      	mov	r0, r7
 8003a24:	f7ff ff62 	bl	80038ec <__sfmoreglue>
 8003a28:	4604      	mov	r4, r0
 8003a2a:	6030      	str	r0, [r6, #0]
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d1d5      	bne.n	80039dc <__sfp+0x24>
 8003a30:	f7ff ff78 	bl	8003924 <__sfp_lock_release>
 8003a34:	230c      	movs	r3, #12
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	e7ee      	b.n	8003a18 <__sfp+0x60>
 8003a3a:	bf00      	nop
 8003a3c:	08004488 	.word	0x08004488
 8003a40:	ffff0001 	.word	0xffff0001

08003a44 <_fwalk_reent>:
 8003a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a48:	4606      	mov	r6, r0
 8003a4a:	4688      	mov	r8, r1
 8003a4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a50:	2700      	movs	r7, #0
 8003a52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a56:	f1b9 0901 	subs.w	r9, r9, #1
 8003a5a:	d505      	bpl.n	8003a68 <_fwalk_reent+0x24>
 8003a5c:	6824      	ldr	r4, [r4, #0]
 8003a5e:	2c00      	cmp	r4, #0
 8003a60:	d1f7      	bne.n	8003a52 <_fwalk_reent+0xe>
 8003a62:	4638      	mov	r0, r7
 8003a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a68:	89ab      	ldrh	r3, [r5, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d907      	bls.n	8003a7e <_fwalk_reent+0x3a>
 8003a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a72:	3301      	adds	r3, #1
 8003a74:	d003      	beq.n	8003a7e <_fwalk_reent+0x3a>
 8003a76:	4629      	mov	r1, r5
 8003a78:	4630      	mov	r0, r6
 8003a7a:	47c0      	blx	r8
 8003a7c:	4307      	orrs	r7, r0
 8003a7e:	3568      	adds	r5, #104	; 0x68
 8003a80:	e7e9      	b.n	8003a56 <_fwalk_reent+0x12>

08003a82 <__retarget_lock_init_recursive>:
 8003a82:	4770      	bx	lr

08003a84 <__retarget_lock_acquire_recursive>:
 8003a84:	4770      	bx	lr

08003a86 <__retarget_lock_release_recursive>:
 8003a86:	4770      	bx	lr

08003a88 <__swhatbuf_r>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	460e      	mov	r6, r1
 8003a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a90:	2900      	cmp	r1, #0
 8003a92:	b096      	sub	sp, #88	; 0x58
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	da07      	bge.n	8003aaa <__swhatbuf_r+0x22>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	602b      	str	r3, [r5, #0]
 8003a9e:	89b3      	ldrh	r3, [r6, #12]
 8003aa0:	061a      	lsls	r2, r3, #24
 8003aa2:	d410      	bmi.n	8003ac6 <__swhatbuf_r+0x3e>
 8003aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa8:	e00e      	b.n	8003ac8 <__swhatbuf_r+0x40>
 8003aaa:	466a      	mov	r2, sp
 8003aac:	f000 fc5e 	bl	800436c <_fstat_r>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	dbf2      	blt.n	8003a9a <__swhatbuf_r+0x12>
 8003ab4:	9a01      	ldr	r2, [sp, #4]
 8003ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003abe:	425a      	negs	r2, r3
 8003ac0:	415a      	adcs	r2, r3
 8003ac2:	602a      	str	r2, [r5, #0]
 8003ac4:	e7ee      	b.n	8003aa4 <__swhatbuf_r+0x1c>
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	2000      	movs	r0, #0
 8003aca:	6023      	str	r3, [r4, #0]
 8003acc:	b016      	add	sp, #88	; 0x58
 8003ace:	bd70      	pop	{r4, r5, r6, pc}

08003ad0 <__smakebuf_r>:
 8003ad0:	898b      	ldrh	r3, [r1, #12]
 8003ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ad4:	079d      	lsls	r5, r3, #30
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	d507      	bpl.n	8003aec <__smakebuf_r+0x1c>
 8003adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	6123      	str	r3, [r4, #16]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	6163      	str	r3, [r4, #20]
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	ab01      	add	r3, sp, #4
 8003aee:	466a      	mov	r2, sp
 8003af0:	f7ff ffca 	bl	8003a88 <__swhatbuf_r>
 8003af4:	9900      	ldr	r1, [sp, #0]
 8003af6:	4605      	mov	r5, r0
 8003af8:	4630      	mov	r0, r6
 8003afa:	f000 f879 	bl	8003bf0 <_malloc_r>
 8003afe:	b948      	cbnz	r0, 8003b14 <__smakebuf_r+0x44>
 8003b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b04:	059a      	lsls	r2, r3, #22
 8003b06:	d4ef      	bmi.n	8003ae8 <__smakebuf_r+0x18>
 8003b08:	f023 0303 	bic.w	r3, r3, #3
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	81a3      	strh	r3, [r4, #12]
 8003b12:	e7e3      	b.n	8003adc <__smakebuf_r+0xc>
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <__smakebuf_r+0x7c>)
 8003b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	6020      	str	r0, [r4, #0]
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	81a3      	strh	r3, [r4, #12]
 8003b22:	9b00      	ldr	r3, [sp, #0]
 8003b24:	6163      	str	r3, [r4, #20]
 8003b26:	9b01      	ldr	r3, [sp, #4]
 8003b28:	6120      	str	r0, [r4, #16]
 8003b2a:	b15b      	cbz	r3, 8003b44 <__smakebuf_r+0x74>
 8003b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 fc2d 	bl	8004390 <_isatty_r>
 8003b36:	b128      	cbz	r0, 8003b44 <__smakebuf_r+0x74>
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	89a0      	ldrh	r0, [r4, #12]
 8003b46:	4305      	orrs	r5, r0
 8003b48:	81a5      	strh	r5, [r4, #12]
 8003b4a:	e7cd      	b.n	8003ae8 <__smakebuf_r+0x18>
 8003b4c:	080038e1 	.word	0x080038e1

08003b50 <_free_r>:
 8003b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b52:	2900      	cmp	r1, #0
 8003b54:	d048      	beq.n	8003be8 <_free_r+0x98>
 8003b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5a:	9001      	str	r0, [sp, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003b62:	bfb8      	it	lt
 8003b64:	18e4      	addlt	r4, r4, r3
 8003b66:	f000 fc35 	bl	80043d4 <__malloc_lock>
 8003b6a:	4a20      	ldr	r2, [pc, #128]	; (8003bec <_free_r+0x9c>)
 8003b6c:	9801      	ldr	r0, [sp, #4]
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	4615      	mov	r5, r2
 8003b72:	b933      	cbnz	r3, 8003b82 <_free_r+0x32>
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	6014      	str	r4, [r2, #0]
 8003b78:	b003      	add	sp, #12
 8003b7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b7e:	f000 bc2f 	b.w	80043e0 <__malloc_unlock>
 8003b82:	42a3      	cmp	r3, r4
 8003b84:	d90b      	bls.n	8003b9e <_free_r+0x4e>
 8003b86:	6821      	ldr	r1, [r4, #0]
 8003b88:	1862      	adds	r2, r4, r1
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	bf04      	itt	eq
 8003b8e:	681a      	ldreq	r2, [r3, #0]
 8003b90:	685b      	ldreq	r3, [r3, #4]
 8003b92:	6063      	str	r3, [r4, #4]
 8003b94:	bf04      	itt	eq
 8003b96:	1852      	addeq	r2, r2, r1
 8003b98:	6022      	streq	r2, [r4, #0]
 8003b9a:	602c      	str	r4, [r5, #0]
 8003b9c:	e7ec      	b.n	8003b78 <_free_r+0x28>
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	b10b      	cbz	r3, 8003ba8 <_free_r+0x58>
 8003ba4:	42a3      	cmp	r3, r4
 8003ba6:	d9fa      	bls.n	8003b9e <_free_r+0x4e>
 8003ba8:	6811      	ldr	r1, [r2, #0]
 8003baa:	1855      	adds	r5, r2, r1
 8003bac:	42a5      	cmp	r5, r4
 8003bae:	d10b      	bne.n	8003bc8 <_free_r+0x78>
 8003bb0:	6824      	ldr	r4, [r4, #0]
 8003bb2:	4421      	add	r1, r4
 8003bb4:	1854      	adds	r4, r2, r1
 8003bb6:	42a3      	cmp	r3, r4
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	d1dd      	bne.n	8003b78 <_free_r+0x28>
 8003bbc:	681c      	ldr	r4, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	6053      	str	r3, [r2, #4]
 8003bc2:	4421      	add	r1, r4
 8003bc4:	6011      	str	r1, [r2, #0]
 8003bc6:	e7d7      	b.n	8003b78 <_free_r+0x28>
 8003bc8:	d902      	bls.n	8003bd0 <_free_r+0x80>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	6003      	str	r3, [r0, #0]
 8003bce:	e7d3      	b.n	8003b78 <_free_r+0x28>
 8003bd0:	6825      	ldr	r5, [r4, #0]
 8003bd2:	1961      	adds	r1, r4, r5
 8003bd4:	428b      	cmp	r3, r1
 8003bd6:	bf04      	itt	eq
 8003bd8:	6819      	ldreq	r1, [r3, #0]
 8003bda:	685b      	ldreq	r3, [r3, #4]
 8003bdc:	6063      	str	r3, [r4, #4]
 8003bde:	bf04      	itt	eq
 8003be0:	1949      	addeq	r1, r1, r5
 8003be2:	6021      	streq	r1, [r4, #0]
 8003be4:	6054      	str	r4, [r2, #4]
 8003be6:	e7c7      	b.n	8003b78 <_free_r+0x28>
 8003be8:	b003      	add	sp, #12
 8003bea:	bd30      	pop	{r4, r5, pc}
 8003bec:	2000009c 	.word	0x2000009c

08003bf0 <_malloc_r>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	1ccd      	adds	r5, r1, #3
 8003bf4:	f025 0503 	bic.w	r5, r5, #3
 8003bf8:	3508      	adds	r5, #8
 8003bfa:	2d0c      	cmp	r5, #12
 8003bfc:	bf38      	it	cc
 8003bfe:	250c      	movcc	r5, #12
 8003c00:	2d00      	cmp	r5, #0
 8003c02:	4606      	mov	r6, r0
 8003c04:	db01      	blt.n	8003c0a <_malloc_r+0x1a>
 8003c06:	42a9      	cmp	r1, r5
 8003c08:	d903      	bls.n	8003c12 <_malloc_r+0x22>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	6033      	str	r3, [r6, #0]
 8003c0e:	2000      	movs	r0, #0
 8003c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c12:	f000 fbdf 	bl	80043d4 <__malloc_lock>
 8003c16:	4921      	ldr	r1, [pc, #132]	; (8003c9c <_malloc_r+0xac>)
 8003c18:	680a      	ldr	r2, [r1, #0]
 8003c1a:	4614      	mov	r4, r2
 8003c1c:	b99c      	cbnz	r4, 8003c46 <_malloc_r+0x56>
 8003c1e:	4f20      	ldr	r7, [pc, #128]	; (8003ca0 <_malloc_r+0xb0>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	b923      	cbnz	r3, 8003c2e <_malloc_r+0x3e>
 8003c24:	4621      	mov	r1, r4
 8003c26:	4630      	mov	r0, r6
 8003c28:	f000 fb2a 	bl	8004280 <_sbrk_r>
 8003c2c:	6038      	str	r0, [r7, #0]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 fb25 	bl	8004280 <_sbrk_r>
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	d123      	bne.n	8003c82 <_malloc_r+0x92>
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	6033      	str	r3, [r6, #0]
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 fbce 	bl	80043e0 <__malloc_unlock>
 8003c44:	e7e3      	b.n	8003c0e <_malloc_r+0x1e>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	1b5b      	subs	r3, r3, r5
 8003c4a:	d417      	bmi.n	8003c7c <_malloc_r+0x8c>
 8003c4c:	2b0b      	cmp	r3, #11
 8003c4e:	d903      	bls.n	8003c58 <_malloc_r+0x68>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	441c      	add	r4, r3
 8003c54:	6025      	str	r5, [r4, #0]
 8003c56:	e004      	b.n	8003c62 <_malloc_r+0x72>
 8003c58:	6863      	ldr	r3, [r4, #4]
 8003c5a:	42a2      	cmp	r2, r4
 8003c5c:	bf0c      	ite	eq
 8003c5e:	600b      	streq	r3, [r1, #0]
 8003c60:	6053      	strne	r3, [r2, #4]
 8003c62:	4630      	mov	r0, r6
 8003c64:	f000 fbbc 	bl	80043e0 <__malloc_unlock>
 8003c68:	f104 000b 	add.w	r0, r4, #11
 8003c6c:	1d23      	adds	r3, r4, #4
 8003c6e:	f020 0007 	bic.w	r0, r0, #7
 8003c72:	1ac2      	subs	r2, r0, r3
 8003c74:	d0cc      	beq.n	8003c10 <_malloc_r+0x20>
 8003c76:	1a1b      	subs	r3, r3, r0
 8003c78:	50a3      	str	r3, [r4, r2]
 8003c7a:	e7c9      	b.n	8003c10 <_malloc_r+0x20>
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	6864      	ldr	r4, [r4, #4]
 8003c80:	e7cc      	b.n	8003c1c <_malloc_r+0x2c>
 8003c82:	1cc4      	adds	r4, r0, #3
 8003c84:	f024 0403 	bic.w	r4, r4, #3
 8003c88:	42a0      	cmp	r0, r4
 8003c8a:	d0e3      	beq.n	8003c54 <_malloc_r+0x64>
 8003c8c:	1a21      	subs	r1, r4, r0
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f000 faf6 	bl	8004280 <_sbrk_r>
 8003c94:	3001      	adds	r0, #1
 8003c96:	d1dd      	bne.n	8003c54 <_malloc_r+0x64>
 8003c98:	e7cf      	b.n	8003c3a <_malloc_r+0x4a>
 8003c9a:	bf00      	nop
 8003c9c:	2000009c 	.word	0x2000009c
 8003ca0:	200000a0 	.word	0x200000a0

08003ca4 <__sfputc_r>:
 8003ca4:	6893      	ldr	r3, [r2, #8]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	b410      	push	{r4}
 8003cac:	6093      	str	r3, [r2, #8]
 8003cae:	da08      	bge.n	8003cc2 <__sfputc_r+0x1e>
 8003cb0:	6994      	ldr	r4, [r2, #24]
 8003cb2:	42a3      	cmp	r3, r4
 8003cb4:	db01      	blt.n	8003cba <__sfputc_r+0x16>
 8003cb6:	290a      	cmp	r1, #10
 8003cb8:	d103      	bne.n	8003cc2 <__sfputc_r+0x1e>
 8003cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cbe:	f7ff bc69 	b.w	8003594 <__swbuf_r>
 8003cc2:	6813      	ldr	r3, [r2, #0]
 8003cc4:	1c58      	adds	r0, r3, #1
 8003cc6:	6010      	str	r0, [r2, #0]
 8003cc8:	7019      	strb	r1, [r3, #0]
 8003cca:	4608      	mov	r0, r1
 8003ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <__sfputs_r>:
 8003cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	460f      	mov	r7, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	18d5      	adds	r5, r2, r3
 8003cdc:	42ac      	cmp	r4, r5
 8003cde:	d101      	bne.n	8003ce4 <__sfputs_r+0x12>
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	e007      	b.n	8003cf4 <__sfputs_r+0x22>
 8003ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce8:	463a      	mov	r2, r7
 8003cea:	4630      	mov	r0, r6
 8003cec:	f7ff ffda 	bl	8003ca4 <__sfputc_r>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d1f3      	bne.n	8003cdc <__sfputs_r+0xa>
 8003cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cf8 <_vfiprintf_r>:
 8003cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfc:	460d      	mov	r5, r1
 8003cfe:	b09d      	sub	sp, #116	; 0x74
 8003d00:	4614      	mov	r4, r2
 8003d02:	4698      	mov	r8, r3
 8003d04:	4606      	mov	r6, r0
 8003d06:	b118      	cbz	r0, 8003d10 <_vfiprintf_r+0x18>
 8003d08:	6983      	ldr	r3, [r0, #24]
 8003d0a:	b90b      	cbnz	r3, 8003d10 <_vfiprintf_r+0x18>
 8003d0c:	f7ff fe1c 	bl	8003948 <__sinit>
 8003d10:	4b89      	ldr	r3, [pc, #548]	; (8003f38 <_vfiprintf_r+0x240>)
 8003d12:	429d      	cmp	r5, r3
 8003d14:	d11b      	bne.n	8003d4e <_vfiprintf_r+0x56>
 8003d16:	6875      	ldr	r5, [r6, #4]
 8003d18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d1a:	07d9      	lsls	r1, r3, #31
 8003d1c:	d405      	bmi.n	8003d2a <_vfiprintf_r+0x32>
 8003d1e:	89ab      	ldrh	r3, [r5, #12]
 8003d20:	059a      	lsls	r2, r3, #22
 8003d22:	d402      	bmi.n	8003d2a <_vfiprintf_r+0x32>
 8003d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d26:	f7ff fead 	bl	8003a84 <__retarget_lock_acquire_recursive>
 8003d2a:	89ab      	ldrh	r3, [r5, #12]
 8003d2c:	071b      	lsls	r3, r3, #28
 8003d2e:	d501      	bpl.n	8003d34 <_vfiprintf_r+0x3c>
 8003d30:	692b      	ldr	r3, [r5, #16]
 8003d32:	b9eb      	cbnz	r3, 8003d70 <_vfiprintf_r+0x78>
 8003d34:	4629      	mov	r1, r5
 8003d36:	4630      	mov	r0, r6
 8003d38:	f7ff fc7e 	bl	8003638 <__swsetup_r>
 8003d3c:	b1c0      	cbz	r0, 8003d70 <_vfiprintf_r+0x78>
 8003d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d40:	07dc      	lsls	r4, r3, #31
 8003d42:	d50e      	bpl.n	8003d62 <_vfiprintf_r+0x6a>
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	b01d      	add	sp, #116	; 0x74
 8003d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d4e:	4b7b      	ldr	r3, [pc, #492]	; (8003f3c <_vfiprintf_r+0x244>)
 8003d50:	429d      	cmp	r5, r3
 8003d52:	d101      	bne.n	8003d58 <_vfiprintf_r+0x60>
 8003d54:	68b5      	ldr	r5, [r6, #8]
 8003d56:	e7df      	b.n	8003d18 <_vfiprintf_r+0x20>
 8003d58:	4b79      	ldr	r3, [pc, #484]	; (8003f40 <_vfiprintf_r+0x248>)
 8003d5a:	429d      	cmp	r5, r3
 8003d5c:	bf08      	it	eq
 8003d5e:	68f5      	ldreq	r5, [r6, #12]
 8003d60:	e7da      	b.n	8003d18 <_vfiprintf_r+0x20>
 8003d62:	89ab      	ldrh	r3, [r5, #12]
 8003d64:	0598      	lsls	r0, r3, #22
 8003d66:	d4ed      	bmi.n	8003d44 <_vfiprintf_r+0x4c>
 8003d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d6a:	f7ff fe8c 	bl	8003a86 <__retarget_lock_release_recursive>
 8003d6e:	e7e9      	b.n	8003d44 <_vfiprintf_r+0x4c>
 8003d70:	2300      	movs	r3, #0
 8003d72:	9309      	str	r3, [sp, #36]	; 0x24
 8003d74:	2320      	movs	r3, #32
 8003d76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d7e:	2330      	movs	r3, #48	; 0x30
 8003d80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f44 <_vfiprintf_r+0x24c>
 8003d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d88:	f04f 0901 	mov.w	r9, #1
 8003d8c:	4623      	mov	r3, r4
 8003d8e:	469a      	mov	sl, r3
 8003d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d94:	b10a      	cbz	r2, 8003d9a <_vfiprintf_r+0xa2>
 8003d96:	2a25      	cmp	r2, #37	; 0x25
 8003d98:	d1f9      	bne.n	8003d8e <_vfiprintf_r+0x96>
 8003d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d9e:	d00b      	beq.n	8003db8 <_vfiprintf_r+0xc0>
 8003da0:	465b      	mov	r3, fp
 8003da2:	4622      	mov	r2, r4
 8003da4:	4629      	mov	r1, r5
 8003da6:	4630      	mov	r0, r6
 8003da8:	f7ff ff93 	bl	8003cd2 <__sfputs_r>
 8003dac:	3001      	adds	r0, #1
 8003dae:	f000 80aa 	beq.w	8003f06 <_vfiprintf_r+0x20e>
 8003db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003db4:	445a      	add	r2, fp
 8003db6:	9209      	str	r2, [sp, #36]	; 0x24
 8003db8:	f89a 3000 	ldrb.w	r3, [sl]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80a2 	beq.w	8003f06 <_vfiprintf_r+0x20e>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dcc:	f10a 0a01 	add.w	sl, sl, #1
 8003dd0:	9304      	str	r3, [sp, #16]
 8003dd2:	9307      	str	r3, [sp, #28]
 8003dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8003dda:	4654      	mov	r4, sl
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de2:	4858      	ldr	r0, [pc, #352]	; (8003f44 <_vfiprintf_r+0x24c>)
 8003de4:	f7fc f9f4 	bl	80001d0 <memchr>
 8003de8:	9a04      	ldr	r2, [sp, #16]
 8003dea:	b9d8      	cbnz	r0, 8003e24 <_vfiprintf_r+0x12c>
 8003dec:	06d1      	lsls	r1, r2, #27
 8003dee:	bf44      	itt	mi
 8003df0:	2320      	movmi	r3, #32
 8003df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003df6:	0713      	lsls	r3, r2, #28
 8003df8:	bf44      	itt	mi
 8003dfa:	232b      	movmi	r3, #43	; 0x2b
 8003dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e00:	f89a 3000 	ldrb.w	r3, [sl]
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d015      	beq.n	8003e34 <_vfiprintf_r+0x13c>
 8003e08:	9a07      	ldr	r2, [sp, #28]
 8003e0a:	4654      	mov	r4, sl
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f04f 0c0a 	mov.w	ip, #10
 8003e12:	4621      	mov	r1, r4
 8003e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e18:	3b30      	subs	r3, #48	; 0x30
 8003e1a:	2b09      	cmp	r3, #9
 8003e1c:	d94e      	bls.n	8003ebc <_vfiprintf_r+0x1c4>
 8003e1e:	b1b0      	cbz	r0, 8003e4e <_vfiprintf_r+0x156>
 8003e20:	9207      	str	r2, [sp, #28]
 8003e22:	e014      	b.n	8003e4e <_vfiprintf_r+0x156>
 8003e24:	eba0 0308 	sub.w	r3, r0, r8
 8003e28:	fa09 f303 	lsl.w	r3, r9, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	9304      	str	r3, [sp, #16]
 8003e30:	46a2      	mov	sl, r4
 8003e32:	e7d2      	b.n	8003dda <_vfiprintf_r+0xe2>
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	1d19      	adds	r1, r3, #4
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	9103      	str	r1, [sp, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bfbb      	ittet	lt
 8003e40:	425b      	neglt	r3, r3
 8003e42:	f042 0202 	orrlt.w	r2, r2, #2
 8003e46:	9307      	strge	r3, [sp, #28]
 8003e48:	9307      	strlt	r3, [sp, #28]
 8003e4a:	bfb8      	it	lt
 8003e4c:	9204      	strlt	r2, [sp, #16]
 8003e4e:	7823      	ldrb	r3, [r4, #0]
 8003e50:	2b2e      	cmp	r3, #46	; 0x2e
 8003e52:	d10c      	bne.n	8003e6e <_vfiprintf_r+0x176>
 8003e54:	7863      	ldrb	r3, [r4, #1]
 8003e56:	2b2a      	cmp	r3, #42	; 0x2a
 8003e58:	d135      	bne.n	8003ec6 <_vfiprintf_r+0x1ce>
 8003e5a:	9b03      	ldr	r3, [sp, #12]
 8003e5c:	1d1a      	adds	r2, r3, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	9203      	str	r2, [sp, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfb8      	it	lt
 8003e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e6a:	3402      	adds	r4, #2
 8003e6c:	9305      	str	r3, [sp, #20]
 8003e6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f54 <_vfiprintf_r+0x25c>
 8003e72:	7821      	ldrb	r1, [r4, #0]
 8003e74:	2203      	movs	r2, #3
 8003e76:	4650      	mov	r0, sl
 8003e78:	f7fc f9aa 	bl	80001d0 <memchr>
 8003e7c:	b140      	cbz	r0, 8003e90 <_vfiprintf_r+0x198>
 8003e7e:	2340      	movs	r3, #64	; 0x40
 8003e80:	eba0 000a 	sub.w	r0, r0, sl
 8003e84:	fa03 f000 	lsl.w	r0, r3, r0
 8003e88:	9b04      	ldr	r3, [sp, #16]
 8003e8a:	4303      	orrs	r3, r0
 8003e8c:	3401      	adds	r4, #1
 8003e8e:	9304      	str	r3, [sp, #16]
 8003e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e94:	482c      	ldr	r0, [pc, #176]	; (8003f48 <_vfiprintf_r+0x250>)
 8003e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e9a:	2206      	movs	r2, #6
 8003e9c:	f7fc f998 	bl	80001d0 <memchr>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d03f      	beq.n	8003f24 <_vfiprintf_r+0x22c>
 8003ea4:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <_vfiprintf_r+0x254>)
 8003ea6:	bb1b      	cbnz	r3, 8003ef0 <_vfiprintf_r+0x1f8>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	3307      	adds	r3, #7
 8003eac:	f023 0307 	bic.w	r3, r3, #7
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	9303      	str	r3, [sp, #12]
 8003eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb6:	443b      	add	r3, r7
 8003eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eba:	e767      	b.n	8003d8c <_vfiprintf_r+0x94>
 8003ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	e7a5      	b.n	8003e12 <_vfiprintf_r+0x11a>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	3401      	adds	r4, #1
 8003eca:	9305      	str	r3, [sp, #20]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f04f 0c0a 	mov.w	ip, #10
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ed8:	3a30      	subs	r2, #48	; 0x30
 8003eda:	2a09      	cmp	r2, #9
 8003edc:	d903      	bls.n	8003ee6 <_vfiprintf_r+0x1ee>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0c5      	beq.n	8003e6e <_vfiprintf_r+0x176>
 8003ee2:	9105      	str	r1, [sp, #20]
 8003ee4:	e7c3      	b.n	8003e6e <_vfiprintf_r+0x176>
 8003ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eea:	4604      	mov	r4, r0
 8003eec:	2301      	movs	r3, #1
 8003eee:	e7f0      	b.n	8003ed2 <_vfiprintf_r+0x1da>
 8003ef0:	ab03      	add	r3, sp, #12
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	462a      	mov	r2, r5
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <_vfiprintf_r+0x258>)
 8003ef8:	a904      	add	r1, sp, #16
 8003efa:	4630      	mov	r0, r6
 8003efc:	f3af 8000 	nop.w
 8003f00:	4607      	mov	r7, r0
 8003f02:	1c78      	adds	r0, r7, #1
 8003f04:	d1d6      	bne.n	8003eb4 <_vfiprintf_r+0x1bc>
 8003f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f08:	07d9      	lsls	r1, r3, #31
 8003f0a:	d405      	bmi.n	8003f18 <_vfiprintf_r+0x220>
 8003f0c:	89ab      	ldrh	r3, [r5, #12]
 8003f0e:	059a      	lsls	r2, r3, #22
 8003f10:	d402      	bmi.n	8003f18 <_vfiprintf_r+0x220>
 8003f12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f14:	f7ff fdb7 	bl	8003a86 <__retarget_lock_release_recursive>
 8003f18:	89ab      	ldrh	r3, [r5, #12]
 8003f1a:	065b      	lsls	r3, r3, #25
 8003f1c:	f53f af12 	bmi.w	8003d44 <_vfiprintf_r+0x4c>
 8003f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f22:	e711      	b.n	8003d48 <_vfiprintf_r+0x50>
 8003f24:	ab03      	add	r3, sp, #12
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	462a      	mov	r2, r5
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <_vfiprintf_r+0x258>)
 8003f2c:	a904      	add	r1, sp, #16
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 f880 	bl	8004034 <_printf_i>
 8003f34:	e7e4      	b.n	8003f00 <_vfiprintf_r+0x208>
 8003f36:	bf00      	nop
 8003f38:	080044ac 	.word	0x080044ac
 8003f3c:	080044cc 	.word	0x080044cc
 8003f40:	0800448c 	.word	0x0800448c
 8003f44:	080044ec 	.word	0x080044ec
 8003f48:	080044f6 	.word	0x080044f6
 8003f4c:	00000000 	.word	0x00000000
 8003f50:	08003cd3 	.word	0x08003cd3
 8003f54:	080044f2 	.word	0x080044f2

08003f58 <_printf_common>:
 8003f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f5c:	4616      	mov	r6, r2
 8003f5e:	4699      	mov	r9, r3
 8003f60:	688a      	ldr	r2, [r1, #8]
 8003f62:	690b      	ldr	r3, [r1, #16]
 8003f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	bfb8      	it	lt
 8003f6c:	4613      	movlt	r3, r2
 8003f6e:	6033      	str	r3, [r6, #0]
 8003f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f74:	4607      	mov	r7, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	b10a      	cbz	r2, 8003f7e <_printf_common+0x26>
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	6033      	str	r3, [r6, #0]
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	0699      	lsls	r1, r3, #26
 8003f82:	bf42      	ittt	mi
 8003f84:	6833      	ldrmi	r3, [r6, #0]
 8003f86:	3302      	addmi	r3, #2
 8003f88:	6033      	strmi	r3, [r6, #0]
 8003f8a:	6825      	ldr	r5, [r4, #0]
 8003f8c:	f015 0506 	ands.w	r5, r5, #6
 8003f90:	d106      	bne.n	8003fa0 <_printf_common+0x48>
 8003f92:	f104 0a19 	add.w	sl, r4, #25
 8003f96:	68e3      	ldr	r3, [r4, #12]
 8003f98:	6832      	ldr	r2, [r6, #0]
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	42ab      	cmp	r3, r5
 8003f9e:	dc26      	bgt.n	8003fee <_printf_common+0x96>
 8003fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fa4:	1e13      	subs	r3, r2, #0
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	bf18      	it	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	0692      	lsls	r2, r2, #26
 8003fae:	d42b      	bmi.n	8004008 <_printf_common+0xb0>
 8003fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d01e      	beq.n	8003ffc <_printf_common+0xa4>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	68e5      	ldr	r5, [r4, #12]
 8003fc2:	6832      	ldr	r2, [r6, #0]
 8003fc4:	f003 0306 	and.w	r3, r3, #6
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	bf08      	it	eq
 8003fcc:	1aad      	subeq	r5, r5, r2
 8003fce:	68a3      	ldr	r3, [r4, #8]
 8003fd0:	6922      	ldr	r2, [r4, #16]
 8003fd2:	bf0c      	ite	eq
 8003fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fd8:	2500      	movne	r5, #0
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	bfc4      	itt	gt
 8003fde:	1a9b      	subgt	r3, r3, r2
 8003fe0:	18ed      	addgt	r5, r5, r3
 8003fe2:	2600      	movs	r6, #0
 8003fe4:	341a      	adds	r4, #26
 8003fe6:	42b5      	cmp	r5, r6
 8003fe8:	d11a      	bne.n	8004020 <_printf_common+0xc8>
 8003fea:	2000      	movs	r0, #0
 8003fec:	e008      	b.n	8004000 <_printf_common+0xa8>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4652      	mov	r2, sl
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	47c0      	blx	r8
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d103      	bne.n	8004004 <_printf_common+0xac>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004004:	3501      	adds	r5, #1
 8004006:	e7c6      	b.n	8003f96 <_printf_common+0x3e>
 8004008:	18e1      	adds	r1, r4, r3
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	2030      	movs	r0, #48	; 0x30
 800400e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004012:	4422      	add	r2, r4
 8004014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800401c:	3302      	adds	r3, #2
 800401e:	e7c7      	b.n	8003fb0 <_printf_common+0x58>
 8004020:	2301      	movs	r3, #1
 8004022:	4622      	mov	r2, r4
 8004024:	4649      	mov	r1, r9
 8004026:	4638      	mov	r0, r7
 8004028:	47c0      	blx	r8
 800402a:	3001      	adds	r0, #1
 800402c:	d0e6      	beq.n	8003ffc <_printf_common+0xa4>
 800402e:	3601      	adds	r6, #1
 8004030:	e7d9      	b.n	8003fe6 <_printf_common+0x8e>
	...

08004034 <_printf_i>:
 8004034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	460c      	mov	r4, r1
 800403a:	4691      	mov	r9, r2
 800403c:	7e27      	ldrb	r7, [r4, #24]
 800403e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004040:	2f78      	cmp	r7, #120	; 0x78
 8004042:	4680      	mov	r8, r0
 8004044:	469a      	mov	sl, r3
 8004046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404a:	d807      	bhi.n	800405c <_printf_i+0x28>
 800404c:	2f62      	cmp	r7, #98	; 0x62
 800404e:	d80a      	bhi.n	8004066 <_printf_i+0x32>
 8004050:	2f00      	cmp	r7, #0
 8004052:	f000 80d8 	beq.w	8004206 <_printf_i+0x1d2>
 8004056:	2f58      	cmp	r7, #88	; 0x58
 8004058:	f000 80a3 	beq.w	80041a2 <_printf_i+0x16e>
 800405c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004064:	e03a      	b.n	80040dc <_printf_i+0xa8>
 8004066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800406a:	2b15      	cmp	r3, #21
 800406c:	d8f6      	bhi.n	800405c <_printf_i+0x28>
 800406e:	a001      	add	r0, pc, #4	; (adr r0, 8004074 <_printf_i+0x40>)
 8004070:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004074:	080040cd 	.word	0x080040cd
 8004078:	080040e1 	.word	0x080040e1
 800407c:	0800405d 	.word	0x0800405d
 8004080:	0800405d 	.word	0x0800405d
 8004084:	0800405d 	.word	0x0800405d
 8004088:	0800405d 	.word	0x0800405d
 800408c:	080040e1 	.word	0x080040e1
 8004090:	0800405d 	.word	0x0800405d
 8004094:	0800405d 	.word	0x0800405d
 8004098:	0800405d 	.word	0x0800405d
 800409c:	0800405d 	.word	0x0800405d
 80040a0:	080041ed 	.word	0x080041ed
 80040a4:	08004111 	.word	0x08004111
 80040a8:	080041cf 	.word	0x080041cf
 80040ac:	0800405d 	.word	0x0800405d
 80040b0:	0800405d 	.word	0x0800405d
 80040b4:	0800420f 	.word	0x0800420f
 80040b8:	0800405d 	.word	0x0800405d
 80040bc:	08004111 	.word	0x08004111
 80040c0:	0800405d 	.word	0x0800405d
 80040c4:	0800405d 	.word	0x0800405d
 80040c8:	080041d7 	.word	0x080041d7
 80040cc:	680b      	ldr	r3, [r1, #0]
 80040ce:	1d1a      	adds	r2, r3, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	600a      	str	r2, [r1, #0]
 80040d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040dc:	2301      	movs	r3, #1
 80040de:	e0a3      	b.n	8004228 <_printf_i+0x1f4>
 80040e0:	6825      	ldr	r5, [r4, #0]
 80040e2:	6808      	ldr	r0, [r1, #0]
 80040e4:	062e      	lsls	r6, r5, #24
 80040e6:	f100 0304 	add.w	r3, r0, #4
 80040ea:	d50a      	bpl.n	8004102 <_printf_i+0xce>
 80040ec:	6805      	ldr	r5, [r0, #0]
 80040ee:	600b      	str	r3, [r1, #0]
 80040f0:	2d00      	cmp	r5, #0
 80040f2:	da03      	bge.n	80040fc <_printf_i+0xc8>
 80040f4:	232d      	movs	r3, #45	; 0x2d
 80040f6:	426d      	negs	r5, r5
 80040f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040fc:	485e      	ldr	r0, [pc, #376]	; (8004278 <_printf_i+0x244>)
 80040fe:	230a      	movs	r3, #10
 8004100:	e019      	b.n	8004136 <_printf_i+0x102>
 8004102:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004106:	6805      	ldr	r5, [r0, #0]
 8004108:	600b      	str	r3, [r1, #0]
 800410a:	bf18      	it	ne
 800410c:	b22d      	sxthne	r5, r5
 800410e:	e7ef      	b.n	80040f0 <_printf_i+0xbc>
 8004110:	680b      	ldr	r3, [r1, #0]
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	1d18      	adds	r0, r3, #4
 8004116:	6008      	str	r0, [r1, #0]
 8004118:	0628      	lsls	r0, r5, #24
 800411a:	d501      	bpl.n	8004120 <_printf_i+0xec>
 800411c:	681d      	ldr	r5, [r3, #0]
 800411e:	e002      	b.n	8004126 <_printf_i+0xf2>
 8004120:	0669      	lsls	r1, r5, #25
 8004122:	d5fb      	bpl.n	800411c <_printf_i+0xe8>
 8004124:	881d      	ldrh	r5, [r3, #0]
 8004126:	4854      	ldr	r0, [pc, #336]	; (8004278 <_printf_i+0x244>)
 8004128:	2f6f      	cmp	r7, #111	; 0x6f
 800412a:	bf0c      	ite	eq
 800412c:	2308      	moveq	r3, #8
 800412e:	230a      	movne	r3, #10
 8004130:	2100      	movs	r1, #0
 8004132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004136:	6866      	ldr	r6, [r4, #4]
 8004138:	60a6      	str	r6, [r4, #8]
 800413a:	2e00      	cmp	r6, #0
 800413c:	bfa2      	ittt	ge
 800413e:	6821      	ldrge	r1, [r4, #0]
 8004140:	f021 0104 	bicge.w	r1, r1, #4
 8004144:	6021      	strge	r1, [r4, #0]
 8004146:	b90d      	cbnz	r5, 800414c <_printf_i+0x118>
 8004148:	2e00      	cmp	r6, #0
 800414a:	d04d      	beq.n	80041e8 <_printf_i+0x1b4>
 800414c:	4616      	mov	r6, r2
 800414e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004152:	fb03 5711 	mls	r7, r3, r1, r5
 8004156:	5dc7      	ldrb	r7, [r0, r7]
 8004158:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800415c:	462f      	mov	r7, r5
 800415e:	42bb      	cmp	r3, r7
 8004160:	460d      	mov	r5, r1
 8004162:	d9f4      	bls.n	800414e <_printf_i+0x11a>
 8004164:	2b08      	cmp	r3, #8
 8004166:	d10b      	bne.n	8004180 <_printf_i+0x14c>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	07df      	lsls	r7, r3, #31
 800416c:	d508      	bpl.n	8004180 <_printf_i+0x14c>
 800416e:	6923      	ldr	r3, [r4, #16]
 8004170:	6861      	ldr	r1, [r4, #4]
 8004172:	4299      	cmp	r1, r3
 8004174:	bfde      	ittt	le
 8004176:	2330      	movle	r3, #48	; 0x30
 8004178:	f806 3c01 	strble.w	r3, [r6, #-1]
 800417c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004180:	1b92      	subs	r2, r2, r6
 8004182:	6122      	str	r2, [r4, #16]
 8004184:	f8cd a000 	str.w	sl, [sp]
 8004188:	464b      	mov	r3, r9
 800418a:	aa03      	add	r2, sp, #12
 800418c:	4621      	mov	r1, r4
 800418e:	4640      	mov	r0, r8
 8004190:	f7ff fee2 	bl	8003f58 <_printf_common>
 8004194:	3001      	adds	r0, #1
 8004196:	d14c      	bne.n	8004232 <_printf_i+0x1fe>
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	b004      	add	sp, #16
 800419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a2:	4835      	ldr	r0, [pc, #212]	; (8004278 <_printf_i+0x244>)
 80041a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	680e      	ldr	r6, [r1, #0]
 80041ac:	061f      	lsls	r7, r3, #24
 80041ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80041b2:	600e      	str	r6, [r1, #0]
 80041b4:	d514      	bpl.n	80041e0 <_printf_i+0x1ac>
 80041b6:	07d9      	lsls	r1, r3, #31
 80041b8:	bf44      	itt	mi
 80041ba:	f043 0320 	orrmi.w	r3, r3, #32
 80041be:	6023      	strmi	r3, [r4, #0]
 80041c0:	b91d      	cbnz	r5, 80041ca <_printf_i+0x196>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	f023 0320 	bic.w	r3, r3, #32
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	2310      	movs	r3, #16
 80041cc:	e7b0      	b.n	8004130 <_printf_i+0xfc>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	f043 0320 	orr.w	r3, r3, #32
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	2378      	movs	r3, #120	; 0x78
 80041d8:	4828      	ldr	r0, [pc, #160]	; (800427c <_printf_i+0x248>)
 80041da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041de:	e7e3      	b.n	80041a8 <_printf_i+0x174>
 80041e0:	065e      	lsls	r6, r3, #25
 80041e2:	bf48      	it	mi
 80041e4:	b2ad      	uxthmi	r5, r5
 80041e6:	e7e6      	b.n	80041b6 <_printf_i+0x182>
 80041e8:	4616      	mov	r6, r2
 80041ea:	e7bb      	b.n	8004164 <_printf_i+0x130>
 80041ec:	680b      	ldr	r3, [r1, #0]
 80041ee:	6826      	ldr	r6, [r4, #0]
 80041f0:	6960      	ldr	r0, [r4, #20]
 80041f2:	1d1d      	adds	r5, r3, #4
 80041f4:	600d      	str	r5, [r1, #0]
 80041f6:	0635      	lsls	r5, r6, #24
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	d501      	bpl.n	8004200 <_printf_i+0x1cc>
 80041fc:	6018      	str	r0, [r3, #0]
 80041fe:	e002      	b.n	8004206 <_printf_i+0x1d2>
 8004200:	0671      	lsls	r1, r6, #25
 8004202:	d5fb      	bpl.n	80041fc <_printf_i+0x1c8>
 8004204:	8018      	strh	r0, [r3, #0]
 8004206:	2300      	movs	r3, #0
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	4616      	mov	r6, r2
 800420c:	e7ba      	b.n	8004184 <_printf_i+0x150>
 800420e:	680b      	ldr	r3, [r1, #0]
 8004210:	1d1a      	adds	r2, r3, #4
 8004212:	600a      	str	r2, [r1, #0]
 8004214:	681e      	ldr	r6, [r3, #0]
 8004216:	6862      	ldr	r2, [r4, #4]
 8004218:	2100      	movs	r1, #0
 800421a:	4630      	mov	r0, r6
 800421c:	f7fb ffd8 	bl	80001d0 <memchr>
 8004220:	b108      	cbz	r0, 8004226 <_printf_i+0x1f2>
 8004222:	1b80      	subs	r0, r0, r6
 8004224:	6060      	str	r0, [r4, #4]
 8004226:	6863      	ldr	r3, [r4, #4]
 8004228:	6123      	str	r3, [r4, #16]
 800422a:	2300      	movs	r3, #0
 800422c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004230:	e7a8      	b.n	8004184 <_printf_i+0x150>
 8004232:	6923      	ldr	r3, [r4, #16]
 8004234:	4632      	mov	r2, r6
 8004236:	4649      	mov	r1, r9
 8004238:	4640      	mov	r0, r8
 800423a:	47d0      	blx	sl
 800423c:	3001      	adds	r0, #1
 800423e:	d0ab      	beq.n	8004198 <_printf_i+0x164>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	079b      	lsls	r3, r3, #30
 8004244:	d413      	bmi.n	800426e <_printf_i+0x23a>
 8004246:	68e0      	ldr	r0, [r4, #12]
 8004248:	9b03      	ldr	r3, [sp, #12]
 800424a:	4298      	cmp	r0, r3
 800424c:	bfb8      	it	lt
 800424e:	4618      	movlt	r0, r3
 8004250:	e7a4      	b.n	800419c <_printf_i+0x168>
 8004252:	2301      	movs	r3, #1
 8004254:	4632      	mov	r2, r6
 8004256:	4649      	mov	r1, r9
 8004258:	4640      	mov	r0, r8
 800425a:	47d0      	blx	sl
 800425c:	3001      	adds	r0, #1
 800425e:	d09b      	beq.n	8004198 <_printf_i+0x164>
 8004260:	3501      	adds	r5, #1
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	9903      	ldr	r1, [sp, #12]
 8004266:	1a5b      	subs	r3, r3, r1
 8004268:	42ab      	cmp	r3, r5
 800426a:	dcf2      	bgt.n	8004252 <_printf_i+0x21e>
 800426c:	e7eb      	b.n	8004246 <_printf_i+0x212>
 800426e:	2500      	movs	r5, #0
 8004270:	f104 0619 	add.w	r6, r4, #25
 8004274:	e7f5      	b.n	8004262 <_printf_i+0x22e>
 8004276:	bf00      	nop
 8004278:	080044fd 	.word	0x080044fd
 800427c:	0800450e 	.word	0x0800450e

08004280 <_sbrk_r>:
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	4d06      	ldr	r5, [pc, #24]	; (800429c <_sbrk_r+0x1c>)
 8004284:	2300      	movs	r3, #0
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	f7fc fc8e 	bl	8000bac <_sbrk>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_sbrk_r+0x1a>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	b103      	cbz	r3, 800429a <_sbrk_r+0x1a>
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	20000188 	.word	0x20000188

080042a0 <__sread>:
 80042a0:	b510      	push	{r4, lr}
 80042a2:	460c      	mov	r4, r1
 80042a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a8:	f000 f8a0 	bl	80043ec <_read_r>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	bfab      	itete	ge
 80042b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042b2:	89a3      	ldrhlt	r3, [r4, #12]
 80042b4:	181b      	addge	r3, r3, r0
 80042b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042ba:	bfac      	ite	ge
 80042bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80042be:	81a3      	strhlt	r3, [r4, #12]
 80042c0:	bd10      	pop	{r4, pc}

080042c2 <__swrite>:
 80042c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c6:	461f      	mov	r7, r3
 80042c8:	898b      	ldrh	r3, [r1, #12]
 80042ca:	05db      	lsls	r3, r3, #23
 80042cc:	4605      	mov	r5, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	4616      	mov	r6, r2
 80042d2:	d505      	bpl.n	80042e0 <__swrite+0x1e>
 80042d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d8:	2302      	movs	r3, #2
 80042da:	2200      	movs	r2, #0
 80042dc:	f000 f868 	bl	80043b0 <_lseek_r>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	4632      	mov	r2, r6
 80042ee:	463b      	mov	r3, r7
 80042f0:	4628      	mov	r0, r5
 80042f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042f6:	f000 b817 	b.w	8004328 <_write_r>

080042fa <__sseek>:
 80042fa:	b510      	push	{r4, lr}
 80042fc:	460c      	mov	r4, r1
 80042fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004302:	f000 f855 	bl	80043b0 <_lseek_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	bf15      	itete	ne
 800430c:	6560      	strne	r0, [r4, #84]	; 0x54
 800430e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004316:	81a3      	strheq	r3, [r4, #12]
 8004318:	bf18      	it	ne
 800431a:	81a3      	strhne	r3, [r4, #12]
 800431c:	bd10      	pop	{r4, pc}

0800431e <__sclose>:
 800431e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004322:	f000 b813 	b.w	800434c <_close_r>
	...

08004328 <_write_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4d07      	ldr	r5, [pc, #28]	; (8004348 <_write_r+0x20>)
 800432c:	4604      	mov	r4, r0
 800432e:	4608      	mov	r0, r1
 8004330:	4611      	mov	r1, r2
 8004332:	2200      	movs	r2, #0
 8004334:	602a      	str	r2, [r5, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	f7fc fbe7 	bl	8000b0a <_write>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d102      	bne.n	8004346 <_write_r+0x1e>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b103      	cbz	r3, 8004346 <_write_r+0x1e>
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	20000188 	.word	0x20000188

0800434c <_close_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4d06      	ldr	r5, [pc, #24]	; (8004368 <_close_r+0x1c>)
 8004350:	2300      	movs	r3, #0
 8004352:	4604      	mov	r4, r0
 8004354:	4608      	mov	r0, r1
 8004356:	602b      	str	r3, [r5, #0]
 8004358:	f7fc fbf3 	bl	8000b42 <_close>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_close_r+0x1a>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	b103      	cbz	r3, 8004366 <_close_r+0x1a>
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	20000188 	.word	0x20000188

0800436c <_fstat_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4d07      	ldr	r5, [pc, #28]	; (800438c <_fstat_r+0x20>)
 8004370:	2300      	movs	r3, #0
 8004372:	4604      	mov	r4, r0
 8004374:	4608      	mov	r0, r1
 8004376:	4611      	mov	r1, r2
 8004378:	602b      	str	r3, [r5, #0]
 800437a:	f7fc fbee 	bl	8000b5a <_fstat>
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	d102      	bne.n	8004388 <_fstat_r+0x1c>
 8004382:	682b      	ldr	r3, [r5, #0]
 8004384:	b103      	cbz	r3, 8004388 <_fstat_r+0x1c>
 8004386:	6023      	str	r3, [r4, #0]
 8004388:	bd38      	pop	{r3, r4, r5, pc}
 800438a:	bf00      	nop
 800438c:	20000188 	.word	0x20000188

08004390 <_isatty_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	4d06      	ldr	r5, [pc, #24]	; (80043ac <_isatty_r+0x1c>)
 8004394:	2300      	movs	r3, #0
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	602b      	str	r3, [r5, #0]
 800439c:	f7fc fbed 	bl	8000b7a <_isatty>
 80043a0:	1c43      	adds	r3, r0, #1
 80043a2:	d102      	bne.n	80043aa <_isatty_r+0x1a>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	b103      	cbz	r3, 80043aa <_isatty_r+0x1a>
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	bd38      	pop	{r3, r4, r5, pc}
 80043ac:	20000188 	.word	0x20000188

080043b0 <_lseek_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	; (80043d0 <_lseek_r+0x20>)
 80043b4:	4604      	mov	r4, r0
 80043b6:	4608      	mov	r0, r1
 80043b8:	4611      	mov	r1, r2
 80043ba:	2200      	movs	r2, #0
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f7fc fbe6 	bl	8000b90 <_lseek>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d102      	bne.n	80043ce <_lseek_r+0x1e>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	b103      	cbz	r3, 80043ce <_lseek_r+0x1e>
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	20000188 	.word	0x20000188

080043d4 <__malloc_lock>:
 80043d4:	4801      	ldr	r0, [pc, #4]	; (80043dc <__malloc_lock+0x8>)
 80043d6:	f7ff bb55 	b.w	8003a84 <__retarget_lock_acquire_recursive>
 80043da:	bf00      	nop
 80043dc:	20000180 	.word	0x20000180

080043e0 <__malloc_unlock>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__malloc_unlock+0x8>)
 80043e2:	f7ff bb50 	b.w	8003a86 <__retarget_lock_release_recursive>
 80043e6:	bf00      	nop
 80043e8:	20000180 	.word	0x20000180

080043ec <_read_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d07      	ldr	r5, [pc, #28]	; (800440c <_read_r+0x20>)
 80043f0:	4604      	mov	r4, r0
 80043f2:	4608      	mov	r0, r1
 80043f4:	4611      	mov	r1, r2
 80043f6:	2200      	movs	r2, #0
 80043f8:	602a      	str	r2, [r5, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7fc fb68 	bl	8000ad0 <_read>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_read_r+0x1e>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	b103      	cbz	r3, 800440a <_read_r+0x1e>
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	20000188 	.word	0x20000188

08004410 <_init>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	bf00      	nop
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr

0800441c <_fini>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	bf00      	nop
 8004420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004422:	bc08      	pop	{r3}
 8004424:	469e      	mov	lr, r3
 8004426:	4770      	bx	lr
