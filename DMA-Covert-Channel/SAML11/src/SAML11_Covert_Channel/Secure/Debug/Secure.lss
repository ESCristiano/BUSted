
Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a38  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  00007c00  00007c00  00017c00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000000  20000000  20000000  00024020  2**0
                  CONTENTS
  3 .bss          0000004c  20000000  20000000  00030000  2**2
                  ALLOC
  4 .heap         00000204  2000004c  2000004c  00030000  2**0
                  ALLOC
  5 .stack        00000400  20000250  20000250  00030000  2**0
                  ALLOC
  6 .userRowBlock 00000020  00804000  00804000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.attributes 0000002c  00000000  00000000  00024020  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002404c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017f2a  00000000  00000000  000240a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024d0  00000000  00000000  0003bfcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000098a3  00000000  00000000  0003e49f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000818  00000000  00000000  00047d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cd8  00000000  00000000  0004855a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001a8af  00000000  00000000  00049232  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e830  00000000  00000000  00063ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008c860  00000000  00000000  00072311  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001650  00000000  00000000  000feb74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 06 00 20 19 04 00 00 17 04 00 00 17 04 00 00     P.. ............
	...
      2c:	17 04 00 00 00 00 00 00 00 00 00 00 17 04 00 00     ................
      3c:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      4c:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      5c:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      6c:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      7c:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      8c:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      9c:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      ac:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      bc:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      cc:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      dc:	17 04 00 00 17 04 00 00 17 04 00 00 17 04 00 00     ................
      ec:	17 04 00 00 17 04 00 00                             ........

000000f4 <__acle_se_nsc_periph_clock_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_periph_clock_init(uint32_t gclk_id, uint32_t gclk_src)
#endif
{
      f4:	23ff      	movs	r3, #255	; 0xff
      f6:	4003      	ands	r3, r0
      f8:	009b      	lsls	r3, r3, #2
      fa:	f641 4c00 	movw	ip, #7168	; 0x1c00
      fe:	f2c4 0c00 	movt	ip, #16384	; 0x4000
     102:	4463      	add	r3, ip
}

static inline bool hri_gclk_get_PCHCTRL_CHEN_bit(const void *const hw, uint8_t index)
{
	uint32_t tmp;
	tmp = ((Gclk *)hw)->PCHCTRL[index].reg;
     104:	2280      	movs	r2, #128	; 0x80
     106:	589a      	ldr	r2, [r3, r2]
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
		return 1; /* Already enabled */
     108:	2001      	movs	r0, #1
	if (hri_gclk_get_PCHCTRL_CHEN_bit(GCLK, gclk_id)) {
     10a:	0652      	lsls	r2, r2, #25
     10c:	d404      	bmi.n	118 <__acle_se_nsc_periph_clock_init+0x24>
	} else {
		hri_gclk_write_PCHCTRL_reg(GCLK, gclk_id, gclk_src | (1 << GCLK_PCHCTRL_CHEN_Pos));
     10e:	2240      	movs	r2, #64	; 0x40
     110:	4311      	orrs	r1, r2
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     112:	3240      	adds	r2, #64	; 0x40
     114:	5099      	str	r1, [r3, r2]
	}
	return 0;
     116:	2000      	movs	r0, #0
}
     118:	0001      	movs	r1, r0
     11a:	0002      	movs	r2, r0
     11c:	0003      	movs	r3, r0
     11e:	4684      	mov	ip, r0
     120:	f38e 8800 	msr	CPSR_f, lr
     124:	4774      	bxns	lr

00000126 <__acle_se_nsc_ext_irq_init>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry int32_t nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#else /* GCC, Keil MDK with ARM Compiler 6 */
int32_t __attribute__((cmse_nonsecure_entry)) nsc_ext_irq_init(struct ext_irq_setting irq_setting)
#endif
{
     126:	b5f0      	push	{r4, r5, r6, r7, lr}
     128:	46ce      	mov	lr, r9
     12a:	4647      	mov	r7, r8
     12c:	b580      	push	{r7, lr}
     12e:	b087      	sub	sp, #28
     130:	9002      	str	r0, [sp, #8]
     132:	9103      	str	r1, [sp, #12]
     134:	9204      	str	r2, [sp, #16]
     136:	9305      	str	r3, [sp, #20]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_evctrl_reg_t hri_eic_read_EVCTRL_reg(const void *const hw)
{
	return ((Eic *)hw)->EVCTRL.reg;
     138:	f642 2300 	movw	r3, #10752	; 0x2a00
     13c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     140:	6898      	ldr	r0, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_asynch_reg_t hri_eic_read_ASYNCH_reg(const void *const hw)
{
	return ((Eic *)hw)->ASYNCH.reg;
     142:	6999      	ldr	r1, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_debouncen_reg_t hri_eic_read_DEBOUNCEN_reg(const void *const hw)
{
	return ((Eic *)hw)->DEBOUNCEN.reg;
     144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	return ((Eic *)hw)->CONFIG[index].reg;
     146:	69dc      	ldr	r4, [r3, #28]
     148:	46a4      	mov	ip, r4
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_nonsec_reg_t hri_eic_read_NONSEC_reg(const void *const hw)
{
	return ((Eic *)hw)->NONSEC.reg;
     14a:	6c1f      	ldr	r7, [r3, #64]	; 0x40
	uint32_t config_val         = hri_eic_read_CONFIG_reg(EIC_SEC, 0);
	uint32_t nonsec_mask        = hri_eic_read_NONSEC_reg(EIC_SEC);
	uint32_t config_nonsec_mask = 0;

	/* Calculate external interrupt settings with non-secure part  */
	evctrl_val    = (evctrl_val & (~nonsec_mask)) | (irq_setting.evctrl & nonsec_mask);
     14c:	9e02      	ldr	r6, [sp, #8]
     14e:	4046      	eors	r6, r0
     150:	403e      	ands	r6, r7
     152:	4046      	eors	r6, r0
	asynch_val    = (asynch_val & (~nonsec_mask)) | (irq_setting.asynch & nonsec_mask);
     154:	9b04      	ldr	r3, [sp, #16]
     156:	9301      	str	r3, [sp, #4]
     158:	001d      	movs	r5, r3
     15a:	404d      	eors	r5, r1
     15c:	403d      	ands	r5, r7
     15e:	404d      	eors	r5, r1
	debouncen_val = (debouncen_val & (~nonsec_mask)) | (irq_setting.debouncen & nonsec_mask);
     160:	9c05      	ldr	r4, [sp, #20]
     162:	4054      	eors	r4, r2
     164:	403c      	ands	r4, r7
     166:	4054      	eors	r4, r2
     168:	46a1      	mov	r9, r4
	uint32_t config_nonsec_mask = 0;
     16a:	2100      	movs	r1, #0
	for (i = 0; i < 8; i++) {
     16c:	2300      	movs	r3, #0
		if (nonsec_mask & (1u << i)) {
     16e:	2001      	movs	r0, #1
			config_nonsec_mask |= (0xFu << (i * 4));
     170:	f240 080f 	movw	r8, #15
     174:	e002      	b.n	17c <__acle_se_nsc_ext_irq_init+0x56>
	for (i = 0; i < 8; i++) {
     176:	3301      	adds	r3, #1
     178:	2b08      	cmp	r3, #8
     17a:	d008      	beq.n	18e <__acle_se_nsc_ext_irq_init+0x68>
		if (nonsec_mask & (1u << i)) {
     17c:	0002      	movs	r2, r0
     17e:	409a      	lsls	r2, r3
     180:	4217      	tst	r7, r2
     182:	d0f8      	beq.n	176 <__acle_se_nsc_ext_irq_init+0x50>
			config_nonsec_mask |= (0xFu << (i * 4));
     184:	009a      	lsls	r2, r3, #2
     186:	4644      	mov	r4, r8
     188:	4094      	lsls	r4, r2
     18a:	4321      	orrs	r1, r4
     18c:	e7f3      	b.n	176 <__acle_se_nsc_ext_irq_init+0x50>
		}
	}
	config_val = (config_val & (~config_nonsec_mask)) | (irq_setting.config[0] & config_nonsec_mask);
     18e:	4660      	mov	r0, ip
     190:	9b03      	ldr	r3, [sp, #12]
     192:	4058      	eors	r0, r3
     194:	4008      	ands	r0, r1
     196:	4663      	mov	r3, ip
     198:	4058      	eors	r0, r3
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE_Msk;
     19a:	f642 2300 	movw	r3, #10752	; 0x2a00
     19e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1a2:	781a      	ldrb	r2, [r3, #0]
     1a4:	2102      	movs	r1, #2
     1a6:	438a      	bics	r2, r1
     1a8:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1aa:	f642 2200 	movw	r2, #10752	; 0x2a00
     1ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1b2:	3101      	adds	r1, #1
     1b4:	6853      	ldr	r3, [r2, #4]
     1b6:	4219      	tst	r1, r3
     1b8:	d1fc      	bne.n	1b4 <__acle_se_nsc_ext_irq_init+0x8e>
     1ba:	f642 2200 	movw	r2, #10752	; 0x2a00
     1be:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1c2:	2102      	movs	r1, #2
     1c4:	6853      	ldr	r3, [r2, #4]
     1c6:	4219      	tst	r1, r3
     1c8:	d1fc      	bne.n	1c4 <__acle_se_nsc_ext_irq_init+0x9e>
	((Eic *)hw)->EVCTRL.reg = data;
     1ca:	f642 2300 	movw	r3, #10752	; 0x2a00
     1ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
     1d2:	609e      	str	r6, [r3, #8]
	((Eic *)hw)->ASYNCH.reg = data;
     1d4:	619d      	str	r5, [r3, #24]
	((Eic *)hw)->DEBOUNCEN.reg = data;
     1d6:	464a      	mov	r2, r9
     1d8:	631a      	str	r2, [r3, #48]	; 0x30
	((Eic *)hw)->CONFIG[index].reg = data;
     1da:	61d8      	str	r0, [r3, #28]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE_Msk;
     1dc:	781a      	ldrb	r2, [r3, #0]
     1de:	2102      	movs	r1, #2
     1e0:	430a      	orrs	r2, r1
     1e2:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     1e4:	f642 2200 	movw	r2, #10752	; 0x2a00
     1e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
     1ec:	3101      	adds	r1, #1
     1ee:	6853      	ldr	r3, [r2, #4]
     1f0:	4219      	tst	r1, r3
     1f2:	d1fc      	bne.n	1ee <__acle_se_nsc_ext_irq_init+0xc8>

	/* Enable EIC */
	hri_eic_set_CTRLA_ENABLE_bit(EIC_SEC);

	return 0;
}
     1f4:	2000      	movs	r0, #0
     1f6:	b007      	add	sp, #28
     1f8:	0001      	movs	r1, r0
     1fa:	0002      	movs	r2, r0
     1fc:	0003      	movs	r3, r0
     1fe:	4684      	mov	ip, r0
     200:	bc0c      	pop	{r2, r3}
     202:	4690      	mov	r8, r2
     204:	4699      	mov	r9, r3
     206:	bcf0      	pop	{r4, r5, r6, r7}
     208:	bc02      	pop	{r1}
     20a:	4686      	mov	lr, r0
     20c:	f381 8800 	msr	CPSR_f, r1
     210:	470c      	bxns	r1

00000212 <__acle_se_nsc_temperature_sensor_read>:
#if defined(__ICCARM__) /* IAR EWARM */
__cmse_nonsecure_entry uint32_t nsc_temperature_sensor_read(void)
#else /* GCC, Keil MDK with ARM Compiler 6 */
uint32_t __attribute__((cmse_nonsecure_entry)) nsc_temperature_sensor_read(void)
#endif
{
     212:	b510      	push	{r4, lr}
	uint32_t result;

	result = (uint32_t)temperature_sensor_read(AT30TSE75X);
     214:	f240 0348 	movw	r3, #72	; 0x48
     218:	f2c2 0300 	movt	r3, #8192	; 0x2000
     21c:	6818      	ldr	r0, [r3, #0]
     21e:	f241 1383 	movw	r3, #4483	; 0x1183
     222:	f2c0 0300 	movt	r3, #0
     226:	4798      	blx	r3
     228:	f241 13f9 	movw	r3, #4601	; 0x11f9
     22c:	f2c0 0300 	movt	r3, #0
     230:	4798      	blx	r3
	return result;
}
     232:	0001      	movs	r1, r0
     234:	0002      	movs	r2, r0
     236:	0003      	movs	r3, r0
     238:	4684      	mov	ip, r0
     23a:	bc10      	pop	{r4}
     23c:	bc02      	pop	{r1}
     23e:	4686      	mov	lr, r0
     240:	f381 8800 	msr	CPSR_f, r1
     244:	470c      	bxns	r1
	...

00000248 <__acle_se_trojan_s>:
#define MAX_SYMBOL 256

#define CONTENTION

__attribute__((optimize(0))) __attribute__((cmse_nonsecure_entry)) 
	void trojan_s(int input_symbol){
     248:	b580      	push	{r7, lr}
     24a:	b084      	sub	sp, #16
     24c:	af00      	add	r7, sp, #0
     24e:	6078      	str	r0, [r7, #4]
  // Trying to balance this code in terms of time as much as possible  
  for(int i=0;i < MAX_SYMBOL; i++){
     250:	2300      	movs	r3, #0
     252:	60fb      	str	r3, [r7, #12]
     254:	e070      	b.n	338 <__acle_se_trojan_s+0xf0>
    if(i < input_symbol){
     256:	68fa      	ldr	r2, [r7, #12]
     258:	687b      	ldr	r3, [r7, #4]
     25a:	429a      	cmp	r2, r3
     25c:	da00      	bge.n	260 <__acle_se_trojan_s+0x18>
      #ifdef CONTENTION
        SETUP_CONTENTION();
     25e:	483f      	ldr	r0, [pc, #252]	; (35c <__acle_se_trojan_s+0x114>)
      #else
        SETUP_NO_CONTENTION();
      #endif
    }
    // With else it would be unbalanced in terms of LDRs
    if(i >= input_symbol){
     260:	68fa      	ldr	r2, [r7, #12]
     262:	687b      	ldr	r3, [r7, #4]
     264:	429a      	cmp	r2, r3
     266:	db00      	blt.n	26a <__acle_se_trojan_s+0x22>
    	SETUP_NO_CONTENTION();
     268:	483d      	ldr	r0, [pc, #244]	; (360 <__acle_se_trojan_s+0x118>)
    }
    HUND_LDRS();
     26a:	6801      	ldr	r1, [r0, #0]
     26c:	6801      	ldr	r1, [r0, #0]
     26e:	6801      	ldr	r1, [r0, #0]
     270:	6801      	ldr	r1, [r0, #0]
     272:	6801      	ldr	r1, [r0, #0]
     274:	6801      	ldr	r1, [r0, #0]
     276:	6801      	ldr	r1, [r0, #0]
     278:	6801      	ldr	r1, [r0, #0]
     27a:	6801      	ldr	r1, [r0, #0]
     27c:	6801      	ldr	r1, [r0, #0]
     27e:	6801      	ldr	r1, [r0, #0]
     280:	6801      	ldr	r1, [r0, #0]
     282:	6801      	ldr	r1, [r0, #0]
     284:	6801      	ldr	r1, [r0, #0]
     286:	6801      	ldr	r1, [r0, #0]
     288:	6801      	ldr	r1, [r0, #0]
     28a:	6801      	ldr	r1, [r0, #0]
     28c:	6801      	ldr	r1, [r0, #0]
     28e:	6801      	ldr	r1, [r0, #0]
     290:	6801      	ldr	r1, [r0, #0]
     292:	6801      	ldr	r1, [r0, #0]
     294:	6801      	ldr	r1, [r0, #0]
     296:	6801      	ldr	r1, [r0, #0]
     298:	6801      	ldr	r1, [r0, #0]
     29a:	6801      	ldr	r1, [r0, #0]
     29c:	6801      	ldr	r1, [r0, #0]
     29e:	6801      	ldr	r1, [r0, #0]
     2a0:	6801      	ldr	r1, [r0, #0]
     2a2:	6801      	ldr	r1, [r0, #0]
     2a4:	6801      	ldr	r1, [r0, #0]
     2a6:	6801      	ldr	r1, [r0, #0]
     2a8:	6801      	ldr	r1, [r0, #0]
     2aa:	6801      	ldr	r1, [r0, #0]
     2ac:	6801      	ldr	r1, [r0, #0]
     2ae:	6801      	ldr	r1, [r0, #0]
     2b0:	6801      	ldr	r1, [r0, #0]
     2b2:	6801      	ldr	r1, [r0, #0]
     2b4:	6801      	ldr	r1, [r0, #0]
     2b6:	6801      	ldr	r1, [r0, #0]
     2b8:	6801      	ldr	r1, [r0, #0]
     2ba:	6801      	ldr	r1, [r0, #0]
     2bc:	6801      	ldr	r1, [r0, #0]
     2be:	6801      	ldr	r1, [r0, #0]
     2c0:	6801      	ldr	r1, [r0, #0]
     2c2:	6801      	ldr	r1, [r0, #0]
     2c4:	6801      	ldr	r1, [r0, #0]
     2c6:	6801      	ldr	r1, [r0, #0]
     2c8:	6801      	ldr	r1, [r0, #0]
     2ca:	6801      	ldr	r1, [r0, #0]
     2cc:	6801      	ldr	r1, [r0, #0]
     2ce:	6801      	ldr	r1, [r0, #0]
     2d0:	6801      	ldr	r1, [r0, #0]
     2d2:	6801      	ldr	r1, [r0, #0]
     2d4:	6801      	ldr	r1, [r0, #0]
     2d6:	6801      	ldr	r1, [r0, #0]
     2d8:	6801      	ldr	r1, [r0, #0]
     2da:	6801      	ldr	r1, [r0, #0]
     2dc:	6801      	ldr	r1, [r0, #0]
     2de:	6801      	ldr	r1, [r0, #0]
     2e0:	6801      	ldr	r1, [r0, #0]
     2e2:	6801      	ldr	r1, [r0, #0]
     2e4:	6801      	ldr	r1, [r0, #0]
     2e6:	6801      	ldr	r1, [r0, #0]
     2e8:	6801      	ldr	r1, [r0, #0]
     2ea:	6801      	ldr	r1, [r0, #0]
     2ec:	6801      	ldr	r1, [r0, #0]
     2ee:	6801      	ldr	r1, [r0, #0]
     2f0:	6801      	ldr	r1, [r0, #0]
     2f2:	6801      	ldr	r1, [r0, #0]
     2f4:	6801      	ldr	r1, [r0, #0]
     2f6:	6801      	ldr	r1, [r0, #0]
     2f8:	6801      	ldr	r1, [r0, #0]
     2fa:	6801      	ldr	r1, [r0, #0]
     2fc:	6801      	ldr	r1, [r0, #0]
     2fe:	6801      	ldr	r1, [r0, #0]
     300:	6801      	ldr	r1, [r0, #0]
     302:	6801      	ldr	r1, [r0, #0]
     304:	6801      	ldr	r1, [r0, #0]
     306:	6801      	ldr	r1, [r0, #0]
     308:	6801      	ldr	r1, [r0, #0]
     30a:	6801      	ldr	r1, [r0, #0]
     30c:	6801      	ldr	r1, [r0, #0]
     30e:	6801      	ldr	r1, [r0, #0]
     310:	6801      	ldr	r1, [r0, #0]
     312:	6801      	ldr	r1, [r0, #0]
     314:	6801      	ldr	r1, [r0, #0]
     316:	6801      	ldr	r1, [r0, #0]
     318:	6801      	ldr	r1, [r0, #0]
     31a:	6801      	ldr	r1, [r0, #0]
     31c:	6801      	ldr	r1, [r0, #0]
     31e:	6801      	ldr	r1, [r0, #0]
     320:	6801      	ldr	r1, [r0, #0]
     322:	6801      	ldr	r1, [r0, #0]
     324:	6801      	ldr	r1, [r0, #0]
     326:	6801      	ldr	r1, [r0, #0]
     328:	6801      	ldr	r1, [r0, #0]
     32a:	6801      	ldr	r1, [r0, #0]
     32c:	6801      	ldr	r1, [r0, #0]
     32e:	6801      	ldr	r1, [r0, #0]
     330:	6801      	ldr	r1, [r0, #0]
  for(int i=0;i < MAX_SYMBOL; i++){
     332:	68fb      	ldr	r3, [r7, #12]
     334:	3301      	adds	r3, #1
     336:	60fb      	str	r3, [r7, #12]
     338:	68fb      	ldr	r3, [r7, #12]
     33a:	2bff      	cmp	r3, #255	; 0xff
     33c:	dc00      	bgt.n	340 <__acle_se_trojan_s+0xf8>
     33e:	e78a      	b.n	256 <__acle_se_trojan_s+0xe>
  }
}
     340:	46c0      	nop			; (mov r8, r8)
     342:	46bd      	mov	sp, r7
     344:	b004      	add	sp, #16
     346:	2000      	movs	r0, #0
     348:	0001      	movs	r1, r0
     34a:	0002      	movs	r2, r0
     34c:	0003      	movs	r3, r0
     34e:	4684      	mov	ip, r0
     350:	bc80      	pop	{r7}
     352:	bc01      	pop	{r0}
     354:	4686      	mov	lr, r0
     356:	f380 8800 	msr	CPSR_f, r0
     35a:	4704      	bxns	r0
     35c:	20002000 	.word	0x20002000
     360:	60000000 	.word	0x60000000

00000364 <__do_global_dtors_aux>:
     364:	b510      	push	{r4, lr}
     366:	f240 0400 	movw	r4, #0
     36a:	f2c2 0400 	movt	r4, #8192	; 0x2000
     36e:	7823      	ldrb	r3, [r4, #0]
     370:	b963      	cbnz	r3, 38c <__do_global_dtors_aux+0x28>
     372:	f240 0300 	movw	r3, #0
     376:	f2c0 0300 	movt	r3, #0
     37a:	b12b      	cbz	r3, 388 <__do_global_dtors_aux+0x24>
     37c:	f244 0020 	movw	r0, #16416	; 0x4020
     380:	f2c0 0080 	movt	r0, #128	; 0x80
     384:	e000      	b.n	388 <__do_global_dtors_aux+0x24>
     386:	bf00      	nop
     388:	2301      	movs	r3, #1
     38a:	7023      	strb	r3, [r4, #0]
     38c:	bd10      	pop	{r4, pc}
     38e:	46c0      	nop			; (mov r8, r8)

00000390 <frame_dummy>:
     390:	f240 0300 	movw	r3, #0
     394:	f2c0 0300 	movt	r3, #0
     398:	b510      	push	{r4, lr}
     39a:	b14b      	cbz	r3, 3b0 <frame_dummy+0x20>
     39c:	f240 0104 	movw	r1, #4
     3a0:	f244 0020 	movw	r0, #16416	; 0x4020
     3a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
     3a8:	f2c0 0080 	movt	r0, #128	; 0x80
     3ac:	e000      	b.n	3b0 <frame_dummy+0x20>
     3ae:	bf00      	nop
     3b0:	f244 0020 	movw	r0, #16416	; 0x4020
     3b4:	f2c0 0080 	movt	r0, #128	; 0x80
     3b8:	6803      	ldr	r3, [r0, #0]
     3ba:	b903      	cbnz	r3, 3be <frame_dummy+0x2e>
     3bc:	bd10      	pop	{r4, pc}
     3be:	f240 0300 	movw	r3, #0
     3c2:	f2c0 0300 	movt	r3, #0
     3c6:	2b00      	cmp	r3, #0
     3c8:	d0f8      	beq.n	3bc <frame_dummy+0x2c>
     3ca:	4798      	blx	r3
     3cc:	e7f6      	b.n	3bc <frame_dummy+0x2c>
     3ce:	46c0      	nop			; (mov r8, r8)

000003d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3d0:	b510      	push	{r4, lr}
	system_init();
     3d2:	f240 53a3 	movw	r3, #1443	; 0x5a3
     3d6:	f2c0 0300 	movt	r3, #0
     3da:	4798      	blx	r3
 * \brief TrustZone Manager Initialization.
 */
static inline void trustzone_manager_init(void)
{
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     3dc:	f243 2300 	movw	r3, #12800	; 0x3200
     3e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     3e4:	2280      	movs	r2, #128	; 0x80
     3e6:	f2c0 3200 	movt	r2, #768	; 0x300
     3ea:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     3ec:	f24e 1300 	movw	r3, #57600	; 0xe100
     3f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3f4:	f64f 0200 	movw	r2, #63488	; 0xf800
     3f8:	f2cc 0200 	movt	r2, #49152	; 0xc000
     3fc:	f240 2180 	movw	r1, #640	; 0x280
     400:	505a      	str	r2, [r3, r1]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     402:	211f      	movs	r1, #31
     404:	f240 2284 	movw	r2, #644	; 0x284
     408:	5099      	str	r1, [r3, r2]
	trustzone_manager_init();
	temperature_sensors_init();
     40a:	f241 138d 	movw	r3, #4493	; 0x118d
     40e:	f2c0 0300 	movt	r3, #0
     412:	4798      	blx	r3
}
     414:	bd10      	pop	{r4, pc}

00000416 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     416:	e7fe      	b.n	416 <Dummy_Handler>

00000418 <Reset_Handler>:
{
     418:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     41a:	f642 2238 	movw	r2, #10808	; 0x2a38
     41e:	f2c0 0200 	movt	r2, #0
     422:	f240 0300 	movw	r3, #0
     426:	f2c2 0300 	movt	r3, #8192	; 0x2000
     42a:	429a      	cmp	r2, r3
     42c:	d020      	beq.n	470 <Reset_Handler+0x58>
                for (; pDest < &_erelocate;) {
     42e:	001a      	movs	r2, r3
     430:	f240 0300 	movw	r3, #0
     434:	f2c2 0300 	movt	r3, #8192	; 0x2000
     438:	429a      	cmp	r2, r3
     43a:	d219      	bcs.n	470 <Reset_Handler+0x58>
     43c:	f240 0300 	movw	r3, #0
     440:	f2c2 0300 	movt	r3, #8192	; 0x2000
     444:	3303      	adds	r3, #3
     446:	4a24      	ldr	r2, [pc, #144]	; (4d8 <Reset_Handler+0xc0>)
     448:	1a9b      	subs	r3, r3, r2
     44a:	089b      	lsrs	r3, r3, #2
     44c:	3301      	adds	r3, #1
     44e:	009b      	lsls	r3, r3, #2
     450:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     452:	f240 0100 	movw	r1, #0
     456:	f2c2 0100 	movt	r1, #8192	; 0x2000
     45a:	1851      	adds	r1, r2, r1
     45c:	f642 2038 	movw	r0, #10808	; 0x2a38
     460:	f2c0 0000 	movt	r0, #0
     464:	1810      	adds	r0, r2, r0
     466:	6800      	ldr	r0, [r0, #0]
     468:	6008      	str	r0, [r1, #0]
     46a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     46c:	429a      	cmp	r2, r3
     46e:	d1f0      	bne.n	452 <Reset_Handler+0x3a>
        for (pDest = &_szero; pDest < &_ezero;) {
     470:	f240 0200 	movw	r2, #0
     474:	f2c2 0200 	movt	r2, #8192	; 0x2000
     478:	f240 034c 	movw	r3, #76	; 0x4c
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	429a      	cmp	r2, r3
     482:	d213      	bcs.n	4ac <Reset_Handler+0x94>
     484:	f240 0200 	movw	r2, #0
     488:	f2c2 0200 	movt	r2, #8192	; 0x2000
     48c:	43d3      	mvns	r3, r2
     48e:	f240 014c 	movw	r1, #76	; 0x4c
     492:	f2c2 0100 	movt	r1, #8192	; 0x2000
     496:	468c      	mov	ip, r1
     498:	4463      	add	r3, ip
     49a:	2103      	movs	r1, #3
     49c:	438b      	bics	r3, r1
     49e:	3304      	adds	r3, #4
     4a0:	4694      	mov	ip, r2
     4a2:	4463      	add	r3, ip
                *pDest++ = 0;
     4a4:	2100      	movs	r1, #0
     4a6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     4a8:	4293      	cmp	r3, r2
     4aa:	d1fc      	bne.n	4a6 <Reset_Handler+0x8e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4ac:	f240 0300 	movw	r3, #0
     4b0:	f2c0 0300 	movt	r3, #0
     4b4:	227f      	movs	r2, #127	; 0x7f
     4b6:	4393      	bics	r3, r2
     4b8:	f64e 5200 	movw	r2, #60672	; 0xed00
     4bc:	f2ce 0200 	movt	r2, #57344	; 0xe000
     4c0:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     4c2:	f642 0395 	movw	r3, #10389	; 0x2895
     4c6:	f2c0 0300 	movt	r3, #0
     4ca:	4798      	blx	r3
        main();
     4cc:	f241 0319 	movw	r3, #4121	; 0x1019
     4d0:	f2c0 0300 	movt	r3, #0
     4d4:	4798      	blx	r3
     4d6:	e7fe      	b.n	4d6 <Reset_Handler+0xbe>
     4d8:	20000004 	.word	0x20000004

000004dc <TIMER_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC2;
     4dc:	f640 0300 	movw	r3, #2048	; 0x800
     4e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     4e4:	69da      	ldr	r2, [r3, #28]
     4e6:	2140      	movs	r1, #64	; 0x40
     4e8:	430a      	orrs	r2, r1
     4ea:	61da      	str	r2, [r3, #28]
     4ec:	f641 4300 	movw	r3, #7168	; 0x1c00
     4f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     4f4:	22bc      	movs	r2, #188	; 0xbc
     4f6:	5099      	str	r1, [r3, r2]

	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
#else
	nsc_periph_clock_init(TC2_GCLK_ID, CONF_GCLK_TC2_SRC);
#endif
}
     4f8:	4770      	bx	lr

000004fa <I2C_INSTANCE_PORT_init>:

void I2C_INSTANCE_PORT_init(void)
{
     4fa:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
     4fc:	f243 2300 	movw	r3, #12800	; 0x3200
     500:	f2c4 0300 	movt	r3, #16384	; 0x4000
     504:	2050      	movs	r0, #80	; 0x50
     506:	5c19      	ldrb	r1, [r3, r0]
     508:	2204      	movs	r2, #4
     50a:	4391      	bics	r1, r2
     50c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     50e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     510:	2501      	movs	r5, #1
     512:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     514:	2401      	movs	r4, #1
     516:	4321      	orrs	r1, r4
     518:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     51a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     51c:	3818      	subs	r0, #24
     51e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     520:	260f      	movs	r6, #15
     522:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     524:	3e0c      	subs	r6, #12
     526:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     528:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN_Msk;
     52a:	2151      	movs	r1, #81	; 0x51
     52c:	5c5e      	ldrb	r6, [r3, r1]
     52e:	4396      	bics	r6, r2
     530:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     532:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN_Msk;
     534:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     536:	4322      	orrs	r2, r4
     538:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     53e:	3942      	subs	r1, #66	; 0x42
     540:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     542:	3121      	adds	r1, #33	; 0x21
     544:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     546:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM0_PAD1);
}
     548:	bd70      	pop	{r4, r5, r6, pc}

0000054a <I2C_INSTANCE_CLOCK_init>:
     54a:	f641 4300 	movw	r3, #7168	; 0x1c00
     54e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     552:	2140      	movs	r1, #64	; 0x40
     554:	22ac      	movs	r2, #172	; 0xac
     556:	5099      	str	r1, [r3, r2]
     558:	3103      	adds	r1, #3
     55a:	3a04      	subs	r2, #4
     55c:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     55e:	f640 0300 	movw	r3, #2048	; 0x800
     562:	f2c4 0300 	movt	r3, #16384	; 0x4000
     566:	69da      	ldr	r2, [r3, #28]
     568:	3941      	subs	r1, #65	; 0x41
     56a:	430a      	orrs	r2, r1
     56c:	61da      	str	r2, [r3, #28]
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
#else
	nsc_periph_clock_init(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	nsc_periph_clock_init(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
#endif
}
     56e:	4770      	bx	lr

00000570 <I2C_INSTANCE_init>:

void I2C_INSTANCE_init(void)
{
     570:	b510      	push	{r4, lr}
	I2C_INSTANCE_CLOCK_init();
     572:	f240 534b 	movw	r3, #1355	; 0x54b
     576:	f2c0 0300 	movt	r3, #0
     57a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_INSTANCE, SERCOM0);
     57c:	f240 4100 	movw	r1, #1024	; 0x400
     580:	f2c4 2100 	movt	r1, #16896	; 0x4200
     584:	f240 0028 	movw	r0, #40	; 0x28
     588:	f2c2 0000 	movt	r0, #8192	; 0x2000
     58c:	f240 6331 	movw	r3, #1585	; 0x631
     590:	f2c0 0300 	movt	r3, #0
     594:	4798      	blx	r3
	I2C_INSTANCE_PORT_init();
     596:	f240 43fb 	movw	r3, #1275	; 0x4fb
     59a:	f2c0 0300 	movt	r3, #0
     59e:	4798      	blx	r3
}
     5a0:	bd10      	pop	{r4, pc}

000005a2 <system_init>:

void system_init(void)
{
     5a2:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5a4:	f240 7309 	movw	r3, #1801	; 0x709
     5a8:	f2c0 0300 	movt	r3, #0
     5ac:	4798      	blx	r3
#if (defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U))
	/* Only initialize MCU clock when the project is TrustZone secure project  */
	init_mcu();
#endif

	TIMER_0_CLOCK_init();
     5ae:	f240 43dd 	movw	r3, #1245	; 0x4dd
     5b2:	f2c0 0300 	movt	r3, #0
     5b6:	4798      	blx	r3

	TIMER_0_init();
     5b8:	f640 7361 	movw	r3, #3937	; 0xf61
     5bc:	f2c0 0300 	movt	r3, #0
     5c0:	4798      	blx	r3

	I2C_INSTANCE_init();
     5c2:	f240 5371 	movw	r3, #1393	; 0x571
     5c6:	f2c0 0300 	movt	r3, #0
     5ca:	4798      	blx	r3
}
     5cc:	bd10      	pop	{r4, pc}
	...

000005d0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     5d0:	b510      	push	{r4, lr}
     5d2:	b084      	sub	sp, #16
     5d4:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     5d6:	ab01      	add	r3, sp, #4
     5d8:	3814      	subs	r0, #20
     5da:	8b82      	ldrh	r2, [r0, #28]
     5dc:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     5de:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     5e0:	4a06      	ldr	r2, [pc, #24]	; (5fc <i2c_m_sync_write+0x2c>)
     5e2:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     5e4:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     5e6:	0019      	movs	r1, r3
     5e8:	f640 232d 	movw	r3, #2605	; 0xa2d
     5ec:	f2c0 0300 	movt	r3, #0
     5f0:	4798      	blx	r3

	if (ret) {
     5f2:	b900      	cbnz	r0, 5f6 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
     5f4:	0020      	movs	r0, r4
}
     5f6:	b004      	add	sp, #16
     5f8:	bd10      	pop	{r4, pc}
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	ffff8000 	.word	0xffff8000

00000600 <i2c_m_sync_read>:
{
     600:	b510      	push	{r4, lr}
     602:	b084      	sub	sp, #16
     604:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     606:	ab01      	add	r3, sp, #4
     608:	3814      	subs	r0, #20
     60a:	8b82      	ldrh	r2, [r0, #28]
     60c:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     60e:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     610:	4a06      	ldr	r2, [pc, #24]	; (62c <i2c_m_sync_read+0x2c>)
     612:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     614:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     616:	0019      	movs	r1, r3
     618:	f640 232d 	movw	r3, #2605	; 0xa2d
     61c:	f2c0 0300 	movt	r3, #0
     620:	4798      	blx	r3
	if (ret) {
     622:	b900      	cbnz	r0, 626 <i2c_m_sync_read+0x26>
	return n;
     624:	0020      	movs	r0, r4
}
     626:	b004      	add	sp, #16
     628:	bd10      	pop	{r4, pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	ffff8001 	.word	0xffff8001

00000630 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     630:	b570      	push	{r4, r5, r6, lr}
     632:	0004      	movs	r4, r0
     634:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     636:	f642 01e4 	movw	r1, #10468	; 0x28e4
     63a:	f2c0 0100 	movt	r1, #0
     63e:	1e43      	subs	r3, r0, #1
     640:	4198      	sbcs	r0, r3
     642:	b2c0      	uxtb	r0, r0
     644:	225e      	movs	r2, #94	; 0x5e
     646:	f240 7303 	movw	r3, #1795	; 0x703
     64a:	f2c0 0300 	movt	r3, #0
     64e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     650:	0029      	movs	r1, r5
     652:	0020      	movs	r0, r4
     654:	f640 1379 	movw	r3, #2425	; 0x979
     658:	f2c0 0300 	movt	r3, #0
     65c:	4798      	blx	r3
	if (init_status) {
     65e:	b948      	cbnz	r0, 674 <i2c_m_sync_init+0x44>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     660:	f240 6301 	movw	r3, #1537	; 0x601
     664:	f2c0 0300 	movt	r3, #0
     668:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     66a:	f240 53d1 	movw	r3, #1489	; 0x5d1
     66e:	f2c0 0300 	movt	r3, #0
     672:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     674:	bd70      	pop	{r4, r5, r6, pc}

00000676 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     676:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     678:	f640 13ad 	movw	r3, #2477	; 0x9ad
     67c:	f2c0 0300 	movt	r3, #0
     680:	4798      	blx	r3
}
     682:	bd10      	pop	{r4, pc}

00000684 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     684:	f240 33ff 	movw	r3, #1023	; 0x3ff
     688:	4019      	ands	r1, r3
     68a:	3301      	adds	r3, #1
     68c:	401a      	ands	r2, r3
     68e:	430a      	orrs	r2, r1
     690:	8382      	strh	r2, [r0, #28]
}
     692:	0010      	movs	r0, r2
     694:	4770      	bx	lr

00000696 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     696:	b570      	push	{r4, r5, r6, lr}
     698:	0006      	movs	r6, r0
     69a:	000c      	movs	r4, r1
     69c:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     69e:	b198      	cbz	r0, 6c8 <io_write+0x32>
     6a0:	0008      	movs	r0, r1
     6a2:	1e43      	subs	r3, r0, #1
     6a4:	4198      	sbcs	r0, r3
     6a6:	b2c0      	uxtb	r0, r0
     6a8:	f642 1100 	movw	r1, #10496	; 0x2900
     6ac:	f2c0 0100 	movt	r1, #0
     6b0:	2234      	movs	r2, #52	; 0x34
     6b2:	f240 7303 	movw	r3, #1795	; 0x703
     6b6:	f2c0 0300 	movt	r3, #0
     6ba:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     6bc:	6833      	ldr	r3, [r6, #0]
     6be:	002a      	movs	r2, r5
     6c0:	0021      	movs	r1, r4
     6c2:	0030      	movs	r0, r6
     6c4:	4798      	blx	r3
}
     6c6:	bd70      	pop	{r4, r5, r6, pc}
     6c8:	2000      	movs	r0, #0
     6ca:	e7ed      	b.n	6a8 <io_write+0x12>

000006cc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	0006      	movs	r6, r0
     6d0:	000c      	movs	r4, r1
     6d2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     6d4:	b198      	cbz	r0, 6fe <io_read+0x32>
     6d6:	0008      	movs	r0, r1
     6d8:	1e43      	subs	r3, r0, #1
     6da:	4198      	sbcs	r0, r3
     6dc:	b2c0      	uxtb	r0, r0
     6de:	f642 1100 	movw	r1, #10496	; 0x2900
     6e2:	f2c0 0100 	movt	r1, #0
     6e6:	223d      	movs	r2, #61	; 0x3d
     6e8:	f240 7303 	movw	r3, #1795	; 0x703
     6ec:	f2c0 0300 	movt	r3, #0
     6f0:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     6f2:	6873      	ldr	r3, [r6, #4]
     6f4:	002a      	movs	r2, r5
     6f6:	0021      	movs	r1, r4
     6f8:	0030      	movs	r0, r6
     6fa:	4798      	blx	r3
}
     6fc:	bd70      	pop	{r4, r5, r6, pc}
     6fe:	2000      	movs	r0, #0
     700:	e7ed      	b.n	6de <io_read+0x12>

00000702 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     702:	b900      	cbnz	r0, 706 <assert+0x4>
		__asm("BKPT #0");
     704:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     706:	4770      	bx	lr

00000708 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     708:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     70a:	f245 0300 	movw	r3, #20480	; 0x5000
     70e:	f2c4 1300 	movt	r3, #16640	; 0x4100
     712:	685a      	ldr	r2, [r3, #4]
     714:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL_SEC, CONF_NVM_WAIT_STATE);
#else
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
#endif

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
     716:	2000      	movs	r0, #0
     718:	f240 73d7 	movw	r3, #2007	; 0x7d7
     71c:	f2c0 0300 	movt	r3, #0
     720:	4798      	blx	r3

	_osc32kctrl_init_sources();
     722:	f240 738f 	movw	r3, #1935	; 0x78f
     726:	f2c0 0300 	movt	r3, #0
     72a:	4798      	blx	r3
	_oscctrl_init_sources();
     72c:	f240 73a7 	movw	r3, #1959	; 0x7a7
     730:	f2c0 0300 	movt	r3, #0
     734:	4798      	blx	r3
	_mclk_init();
     736:	f240 7381 	movw	r3, #1921	; 0x781
     73a:	f2c0 0300 	movt	r3, #0
     73e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     740:	f240 73d5 	movw	r3, #2005	; 0x7d5
     744:	f2c0 0300 	movt	r3, #0
     748:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     74a:	201f      	movs	r0, #31
     74c:	f240 7359 	movw	r3, #1881	; 0x759
     750:	f2c0 0300 	movt	r3, #0
     754:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     756:	bd10      	pop	{r4, pc}

00000758 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     758:	07c3      	lsls	r3, r0, #31
     75a:	d510      	bpl.n	77e <_gclk_init_generators_by_fref+0x26>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     75c:	f641 4300 	movw	r3, #7168	; 0x1c00
     760:	f2c4 0300 	movt	r3, #16384	; 0x4000
     764:	f240 1205 	movw	r2, #261	; 0x105
     768:	f2c0 0201 	movt	r2, #1
     76c:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     76e:	f641 4200 	movw	r2, #7168	; 0x1c00
     772:	f2c4 0200 	movt	r2, #16384	; 0x4000
     776:	217d      	movs	r1, #125	; 0x7d
     778:	6853      	ldr	r3, [r2, #4]
     77a:	4219      	tst	r1, r3
     77c:	d1fc      	bne.n	778 <_gclk_init_generators_by_fref+0x20>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
     77e:	4770      	bx	lr

00000780 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     780:	f640 0300 	movw	r3, #2048	; 0x800
     784:	f2c4 0300 	movt	r3, #16384	; 0x4000
     788:	2201      	movs	r2, #1
     78a:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     78c:	4770      	bx	lr

0000078e <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     78e:	f241 4300 	movw	r3, #5120	; 0x1400
     792:	f2c4 0300 	movt	r3, #16384	; 0x4000
     796:	69da      	ldr	r2, [r3, #28]
	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
     798:	f641 7100 	movw	r1, #7936	; 0x1f00
     79c:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     79e:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     7a0:	2200      	movs	r2, #0
     7a2:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     7a4:	4770      	bx	lr

000007a6 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     7a6:	f241 0300 	movw	r3, #4096	; 0x1000
     7aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
     7ae:	2202      	movs	r2, #2
     7b0:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     7b2:	f241 0200 	movw	r2, #4096	; 0x1000
     7b6:	f2c4 0200 	movt	r2, #16384	; 0x4000
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     7ba:	2110      	movs	r1, #16
     7bc:	6913      	ldr	r3, [r2, #16]
     7be:	4219      	tst	r1, r3
     7c0:	d0fc      	beq.n	7bc <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
     7c2:	f241 0300 	movw	r3, #4096	; 0x1000
     7c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     7ca:	7e1a      	ldrb	r2, [r3, #24]
     7cc:	2180      	movs	r1, #128	; 0x80
     7ce:	430a      	orrs	r2, r1
     7d0:	761a      	strb	r2, [r3, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     7d2:	4770      	bx	lr

000007d4 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     7d4:	4770      	bx	lr

000007d6 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     7d6:	f240 4300 	movw	r3, #1024	; 0x400
     7da:	f2c4 0300 	movt	r3, #16384	; 0x4000
     7de:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     7e0:	2203      	movs	r2, #3
     7e2:	4013      	ands	r3, r2
     7e4:	4298      	cmp	r0, r3
     7e6:	d012      	beq.n	80e <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
     7e8:	f240 4200 	movw	r2, #1024	; 0x400
     7ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
     7f0:	23ff      	movs	r3, #255	; 0xff
     7f2:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     7f4:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     7f6:	2103      	movs	r1, #3
     7f8:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     7fa:	4008      	ands	r0, r1
     7fc:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     7fe:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     800:	f240 4200 	movw	r2, #1024	; 0x400
     804:	f2c4 0200 	movt	r2, #16384	; 0x4000
     808:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     80a:	2b00      	cmp	r3, #0
     80c:	d0fc      	beq.n	808 <_set_performance_level+0x32>
			;
	}
}
     80e:	4770      	bx	lr

00000810 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     810:	b530      	push	{r4, r5, lr}
     812:	b085      	sub	sp, #20
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     814:	aa01      	add	r2, sp, #4
     816:	f642 1314 	movw	r3, #10516	; 0x2914
     81a:	f2c0 0300 	movt	r3, #0
     81e:	cb32      	ldmia	r3!, {r1, r4, r5}
     820:	c232      	stmia	r2!, {r1, r4, r5}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     822:	0003      	movs	r3, r0
     824:	9a01      	ldr	r2, [sp, #4]
     826:	4282      	cmp	r2, r0
     828:	d00c      	beq.n	844 <_sercom_get_hardware_index+0x34>
     82a:	9a02      	ldr	r2, [sp, #8]
     82c:	4282      	cmp	r2, r0
     82e:	d007      	beq.n	840 <_sercom_get_hardware_index+0x30>
			return i;
		}
	}
	return 0;
     830:	2000      	movs	r0, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     832:	9a03      	ldr	r2, [sp, #12]
     834:	429a      	cmp	r2, r3
     836:	d001      	beq.n	83c <_sercom_get_hardware_index+0x2c>
}
     838:	b005      	add	sp, #20
     83a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     83c:	3002      	adds	r0, #2
     83e:	e002      	b.n	846 <_sercom_get_hardware_index+0x36>
     840:	2001      	movs	r0, #1
     842:	e000      	b.n	846 <_sercom_get_hardware_index+0x36>
     844:	2000      	movs	r0, #0
			return i;
     846:	b2c0      	uxtb	r0, r0
     848:	e7f6      	b.n	838 <_sercom_get_hardware_index+0x28>

0000084a <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     84a:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     84c:	f640 0311 	movw	r3, #2065	; 0x811
     850:	f2c0 0300 	movt	r3, #0
     854:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
     856:	b168      	cbz	r0, 874 <_get_i2cm_index+0x2a>
			return i;
		}
	}

	ASSERT(false);
     858:	f642 1138 	movw	r1, #10552	; 0x2938
     85c:	f2c0 0100 	movt	r1, #0
     860:	f240 32a6 	movw	r2, #934	; 0x3a6
     864:	2000      	movs	r0, #0
     866:	f240 7303 	movw	r3, #1795	; 0x703
     86a:	f2c0 0300 	movt	r3, #0
     86e:	4798      	blx	r3
	return -1;
     870:	2001      	movs	r0, #1
     872:	4240      	negs	r0, r0
}
     874:	bd10      	pop	{r4, pc}
	...

00000878 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     878:	b570      	push	{r4, r5, r6, lr}
     87a:	0005      	movs	r5, r0
     87c:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     87e:	0008      	movs	r0, r1
     880:	f640 034b 	movw	r3, #2123	; 0x84b
     884:	f2c0 0300 	movt	r3, #0
     888:	4798      	blx	r3
     88a:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     88c:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     88e:	07db      	lsls	r3, r3, #31
     890:	d425      	bmi.n	8de <_i2c_m_sync_init_impl+0x66>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     892:	0043      	lsls	r3, r0, #1
     894:	181b      	adds	r3, r3, r0
     896:	00db      	lsls	r3, r3, #3
     898:	f642 1214 	movw	r2, #10516	; 0x2914
     89c:	f2c0 0200 	movt	r2, #0
     8a0:	4694      	mov	ip, r2
     8a2:	4463      	add	r3, ip
     8a4:	6919      	ldr	r1, [r3, #16]
     8a6:	231c      	movs	r3, #28
     8a8:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     8aa:	2203      	movs	r2, #3
     8ac:	69e3      	ldr	r3, [r4, #28]
     8ae:	421a      	tst	r2, r3
     8b0:	d1fc      	bne.n	8ac <_i2c_m_sync_init_impl+0x34>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     8b2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     8b4:	079b      	lsls	r3, r3, #30
     8b6:	d50b      	bpl.n	8d0 <_i2c_m_sync_init_impl+0x58>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     8b8:	6823      	ldr	r3, [r4, #0]
     8ba:	2202      	movs	r2, #2
     8bc:	4393      	bics	r3, r2
     8be:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     8c0:	3201      	adds	r2, #1
     8c2:	69e3      	ldr	r3, [r4, #28]
     8c4:	421a      	tst	r2, r3
     8c6:	d1fc      	bne.n	8c2 <_i2c_m_sync_init_impl+0x4a>
     8c8:	2202      	movs	r2, #2
     8ca:	69e3      	ldr	r3, [r4, #28]
     8cc:	421a      	tst	r2, r3
     8ce:	d1fc      	bne.n	8ca <_i2c_m_sync_init_impl+0x52>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     8d0:	2301      	movs	r3, #1
     8d2:	430b      	orrs	r3, r1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     8d4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     8d6:	2203      	movs	r2, #3
     8d8:	69e3      	ldr	r3, [r4, #28]
     8da:	421a      	tst	r2, r3
     8dc:	d1fc      	bne.n	8d8 <_i2c_m_sync_init_impl+0x60>
     8de:	2201      	movs	r2, #1
     8e0:	69e3      	ldr	r3, [r4, #28]
     8e2:	421a      	tst	r2, r3
     8e4:	d1fc      	bne.n	8e0 <_i2c_m_sync_init_impl+0x68>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     8e6:	0043      	lsls	r3, r0, #1
     8e8:	181b      	adds	r3, r3, r0
     8ea:	00db      	lsls	r3, r3, #3
     8ec:	f642 1214 	movw	r2, #10516	; 0x2914
     8f0:	f2c0 0200 	movt	r2, #0
     8f4:	4694      	mov	ip, r2
     8f6:	4463      	add	r3, ip
     8f8:	6919      	ldr	r1, [r3, #16]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     8fa:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     8fc:	2203      	movs	r2, #3
     8fe:	69e3      	ldr	r3, [r4, #28]
     900:	421a      	tst	r2, r3
     902:	d1fc      	bne.n	8fe <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     904:	0043      	lsls	r3, r0, #1
     906:	181b      	adds	r3, r3, r0
     908:	00db      	lsls	r3, r3, #3
     90a:	f642 1214 	movw	r2, #10516	; 0x2914
     90e:	f2c0 0200 	movt	r2, #0
     912:	4694      	mov	ip, r2
     914:	4463      	add	r3, ip
     916:	695b      	ldr	r3, [r3, #20]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     918:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     91a:	2204      	movs	r2, #4
     91c:	69e3      	ldr	r3, [r4, #28]
     91e:	421a      	tst	r2, r3
     920:	d1fc      	bne.n	91c <_i2c_m_sync_init_impl+0xa4>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     922:	0043      	lsls	r3, r0, #1
     924:	181b      	adds	r3, r3, r0
     926:	00db      	lsls	r3, r3, #3
     928:	f642 1214 	movw	r2, #10516	; 0x2914
     92c:	f2c0 0200 	movt	r2, #0
     930:	4694      	mov	ip, r2
     932:	4463      	add	r3, ip
     934:	699b      	ldr	r3, [r3, #24]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     936:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     938:	0189      	lsls	r1, r1, #6
     93a:	0f89      	lsrs	r1, r1, #30
     93c:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     940:	4e0c      	ldr	r6, [pc, #48]	; (974 <_i2c_m_sync_init_impl+0xfc>)
     942:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     944:	2301      	movs	r3, #1
     946:	428b      	cmp	r3, r1
     948:	419b      	sbcs	r3, r3
     94a:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     94c:	039b      	lsls	r3, r3, #14
     94e:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     950:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     952:	2204      	movs	r2, #4
     954:	69e3      	ldr	r3, [r4, #28]
     956:	421a      	tst	r2, r3
     958:	d1fc      	bne.n	954 <_i2c_m_sync_init_impl+0xdc>

	service->trise = _i2cms[i].trise;
     95a:	0043      	lsls	r3, r0, #1
     95c:	1818      	adds	r0, r3, r0
     95e:	00c0      	lsls	r0, r0, #3
     960:	f642 1314 	movw	r3, #10516	; 0x2914
     964:	f2c0 0300 	movt	r3, #0
     968:	469c      	mov	ip, r3
     96a:	4460      	add	r0, ip
     96c:	8bc3      	ldrh	r3, [r0, #30]
     96e:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     970:	2000      	movs	r0, #0
     972:	bd70      	pop	{r4, r5, r6, pc}
     974:	ffffbfff 	.word	0xffffbfff

00000978 <_i2c_m_sync_init>:
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	0004      	movs	r4, r0
     97c:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     97e:	f642 1138 	movw	r1, #10552	; 0x2938
     982:	f2c0 0100 	movt	r1, #0
     986:	1e43      	subs	r3, r0, #1
     988:	4198      	sbcs	r0, r3
     98a:	b2c0      	uxtb	r0, r0
     98c:	f240 5218 	movw	r2, #1304	; 0x518
     990:	f240 7303 	movw	r3, #1795	; 0x703
     994:	f2c0 0300 	movt	r3, #0
     998:	4798      	blx	r3
	i2c_dev->hw = hw;
     99a:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     99c:	0029      	movs	r1, r5
     99e:	0020      	movs	r0, r4
     9a0:	f640 0379 	movw	r3, #2169	; 0x879
     9a4:	f2c0 0300 	movt	r3, #0
     9a8:	4798      	blx	r3
}
     9aa:	bd70      	pop	{r4, r5, r6, pc}

000009ac <_i2c_m_sync_enable>:
{
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     9b0:	f642 1638 	movw	r6, #10552	; 0x2938
     9b4:	f2c0 0600 	movt	r6, #0
     9b8:	1e43      	subs	r3, r0, #1
     9ba:	4198      	sbcs	r0, r3
     9bc:	b2c0      	uxtb	r0, r0
     9be:	f240 5235 	movw	r2, #1333	; 0x535
     9c2:	0031      	movs	r1, r6
     9c4:	f240 7503 	movw	r5, #1795	; 0x703
     9c8:	f2c0 0500 	movt	r5, #0
     9cc:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
     9ce:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
     9d0:	0020      	movs	r0, r4
     9d2:	1e43      	subs	r3, r0, #1
     9d4:	4198      	sbcs	r0, r3
     9d6:	b2c0      	uxtb	r0, r0
     9d8:	f240 6205 	movw	r2, #1541	; 0x605
     9dc:	0031      	movs	r1, r6
     9de:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     9e0:	6823      	ldr	r3, [r4, #0]
     9e2:	2202      	movs	r2, #2
     9e4:	4313      	orrs	r3, r2
     9e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9e8:	3201      	adds	r2, #1
     9ea:	69e3      	ldr	r3, [r4, #28]
     9ec:	421a      	tst	r2, r3
     9ee:	d1fc      	bne.n	9ea <_i2c_m_sync_enable+0x3e>
     9f0:	2504      	movs	r5, #4
     9f2:	2204      	movs	r2, #4
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     9f4:	2003      	movs	r0, #3
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     9f6:	2610      	movs	r6, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
     9fc:	69e3      	ldr	r3, [r4, #28]
     9fe:	421a      	tst	r2, r3
     a00:	d1fc      	bne.n	9fc <_i2c_m_sync_enable+0x50>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     a02:	8b63      	ldrh	r3, [r4, #26]
     a04:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     a06:	4003      	ands	r3, r0
     a08:	2b01      	cmp	r3, #1
     a0a:	d009      	beq.n	a20 <_i2c_m_sync_enable+0x74>
     a0c:	3901      	subs	r1, #1
		if (timeout <= 0) {
     a0e:	2900      	cmp	r1, #0
     a10:	d1f4      	bne.n	9fc <_i2c_m_sync_enable+0x50>
     a12:	3d01      	subs	r5, #1
			if (--timeout_attempt)
     a14:	b135      	cbz	r5, a24 <_i2c_m_sync_enable+0x78>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     a16:	8366      	strh	r6, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     a18:	69e3      	ldr	r3, [r4, #28]
     a1a:	421a      	tst	r2, r3
     a1c:	d1fc      	bne.n	a18 <_i2c_m_sync_enable+0x6c>
     a1e:	e7eb      	b.n	9f8 <_i2c_m_sync_enable+0x4c>
	return ERR_NONE;
     a20:	2000      	movs	r0, #0
}
     a22:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
     a24:	2006      	movs	r0, #6
     a26:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
     a28:	e7fb      	b.n	a22 <_i2c_m_sync_enable+0x76>
	...

00000a2c <_i2c_m_sync_transfer>:
{
     a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2e:	46de      	mov	lr, fp
     a30:	4657      	mov	r7, sl
     a32:	464e      	mov	r6, r9
     a34:	4645      	mov	r5, r8
     a36:	b5e0      	push	{r5, r6, r7, lr}
     a38:	b083      	sub	sp, #12
     a3a:	0005      	movs	r5, r0
     a3c:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
     a3e:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     a40:	0006      	movs	r6, r0
     a42:	1e73      	subs	r3, r6, #1
     a44:	419e      	sbcs	r6, r3
     a46:	b2f3      	uxtb	r3, r6
     a48:	9301      	str	r3, [sp, #4]
     a4a:	f642 1638 	movw	r6, #10552	; 0x2938
     a4e:	f2c0 0600 	movt	r6, #0
     a52:	f240 52d0 	movw	r2, #1488	; 0x5d0
     a56:	0031      	movs	r1, r6
     a58:	0018      	movs	r0, r3
     a5a:	f240 7703 	movw	r7, #1795	; 0x703
     a5e:	f2c0 0700 	movt	r7, #0
     a62:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
     a64:	6928      	ldr	r0, [r5, #16]
     a66:	1e43      	subs	r3, r0, #1
     a68:	4198      	sbcs	r0, r3
     a6a:	b2c0      	uxtb	r0, r0
     a6c:	f240 52d1 	movw	r2, #1489	; 0x5d1
     a70:	0031      	movs	r1, r6
     a72:	47b8      	blx	r7
	ASSERT(msg);
     a74:	4640      	mov	r0, r8
     a76:	1e43      	subs	r3, r0, #1
     a78:	4198      	sbcs	r0, r3
     a7a:	b2c0      	uxtb	r0, r0
     a7c:	f240 52d2 	movw	r2, #1490	; 0x5d2
     a80:	0031      	movs	r1, r6
     a82:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     a84:	886b      	ldrh	r3, [r5, #2]
     a86:	05db      	lsls	r3, r3, #23
     a88:	d500      	bpl.n	a8c <_i2c_m_sync_transfer+0x60>
     a8a:	e21e      	b.n	eca <_i2c_m_sync_transfer+0x49e>
	msg->flags |= I2C_M_BUSY;
     a8c:	4643      	mov	r3, r8
     a8e:	885b      	ldrh	r3, [r3, #2]
     a90:	f240 1200 	movw	r2, #256	; 0x100
     a94:	4313      	orrs	r3, r2
     a96:	4642      	mov	r2, r8
     a98:	8053      	strh	r3, [r2, #2]
	i2c_dev->service.msg = *msg;
     a9a:	002b      	movs	r3, r5
     a9c:	ca43      	ldmia	r2!, {r0, r1, r6}
     a9e:	c343      	stmia	r3!, {r0, r1, r6}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     aa0:	6863      	ldr	r3, [r4, #4]
     aa2:	f240 1200 	movw	r2, #256	; 0x100
     aa6:	4313      	orrs	r3, r2
     aa8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     aaa:	3afc      	subs	r2, #252	; 0xfc
     aac:	69e3      	ldr	r3, [r4, #28]
     aae:	421a      	tst	r2, r3
     ab0:	d1fc      	bne.n	aac <_i2c_m_sync_transfer+0x80>
	void *             hw    = i2c_dev->hw;
     ab2:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     ab4:	683b      	ldr	r3, [r7, #0]
     ab6:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
     ab8:	f642 1138 	movw	r1, #10552	; 0x2938
     abc:	f2c0 0100 	movt	r1, #0
     ac0:	f240 52a5 	movw	r2, #1445	; 0x5a5
     ac4:	9801      	ldr	r0, [sp, #4]
     ac6:	f240 7303 	movw	r3, #1795	; 0x703
     aca:	f2c0 0300 	movt	r3, #0
     ace:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     ad0:	686b      	ldr	r3, [r5, #4]
     ad2:	2b01      	cmp	r3, #1
     ad4:	d05c      	beq.n	b90 <_i2c_m_sync_transfer+0x164>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4ab6      	ldr	r2, [pc, #728]	; (db4 <_i2c_m_sync_transfer+0x388>)
     ada:	4013      	ands	r3, r2
     adc:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ade:	2204      	movs	r2, #4
     ae0:	69fb      	ldr	r3, [r7, #28]
     ae2:	421a      	tst	r2, r3
     ae4:	d1fc      	bne.n	ae0 <_i2c_m_sync_transfer+0xb4>
	if (msg->addr & I2C_M_TEN) {
     ae6:	882b      	ldrh	r3, [r5, #0]
     ae8:	055a      	lsls	r2, r3, #21
     aea:	d55e      	bpl.n	baa <_i2c_m_sync_transfer+0x17e>
		if (msg->flags & I2C_M_RD) {
     aec:	886a      	ldrh	r2, [r5, #2]
     aee:	07d2      	lsls	r2, r2, #31
     af0:	d504      	bpl.n	afc <_i2c_m_sync_transfer+0xd0>
			msg->flags |= I2C_M_TEN;
     af2:	886a      	ldrh	r2, [r5, #2]
     af4:	f240 4100 	movw	r1, #1024	; 0x400
     af8:	430a      	orrs	r2, r1
     afa:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     afc:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     afe:	f240 71fe 	movw	r1, #2046	; 0x7fe
     b02:	4019      	ands	r1, r3
     b04:	2204      	movs	r2, #4
     b06:	69fb      	ldr	r3, [r7, #28]
     b08:	421a      	tst	r2, r3
     b0a:	d1fc      	bne.n	b06 <_i2c_m_sync_transfer+0xda>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b0e:	f244 0300 	movw	r3, #16384	; 0x4000
     b12:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     b14:	f248 0200 	movw	r2, #32768	; 0x8000
     b18:	4313      	orrs	r3, r2
     b1a:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     b1c:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b1e:	2204      	movs	r2, #4
     b20:	69fb      	ldr	r3, [r7, #28]
     b22:	421a      	tst	r2, r3
     b24:	d1fc      	bne.n	b20 <_i2c_m_sync_transfer+0xf4>
	void *   hw      = i2c_dev->hw;
     b26:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     b28:	7e0b      	ldrb	r3, [r1, #24]
     b2a:	b2db      	uxtb	r3, r3
     b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     b30:	2003      	movs	r0, #3
     b32:	4218      	tst	r0, r3
     b34:	d104      	bne.n	b40 <_i2c_m_sync_transfer+0x114>
     b36:	7e0b      	ldrb	r3, [r1, #24]
     b38:	b2db      	uxtb	r3, r3
     b3a:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
     b3c:	2a00      	cmp	r2, #0
     b3e:	d1f8      	bne.n	b32 <_i2c_m_sync_transfer+0x106>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     b40:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b42:	2104      	movs	r1, #4
     b44:	69fa      	ldr	r2, [r7, #28]
     b46:	4211      	tst	r1, r2
     b48:	d1fc      	bne.n	b44 <_i2c_m_sync_transfer+0x118>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     b4a:	8b7a      	ldrh	r2, [r7, #26]
     b4c:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
     b4e:	07d9      	lsls	r1, r3, #31
     b50:	d400      	bmi.n	b54 <_i2c_m_sync_transfer+0x128>
     b52:	e09f      	b.n	c94 <_i2c_m_sync_transfer+0x268>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     b54:	0793      	lsls	r3, r2, #30
     b56:	d53e      	bpl.n	bd6 <_i2c_m_sync_transfer+0x1aa>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     b58:	2301      	movs	r3, #1
     b5a:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
     b5c:	886b      	ldrh	r3, [r5, #2]
     b5e:	f241 0100 	movw	r1, #4096	; 0x1000
     b62:	430b      	orrs	r3, r1
     b64:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     b66:	886b      	ldrh	r3, [r5, #2]
     b68:	4993      	ldr	r1, [pc, #588]	; (db8 <_i2c_m_sync_transfer+0x38c>)
     b6a:	400b      	ands	r3, r1
     b6c:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     b6e:	2001      	movs	r0, #1
     b70:	0003      	movs	r3, r0
     b72:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
     b74:	4258      	negs	r0, r3
     b76:	4158      	adcs	r0, r3
     b78:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     b7a:	886b      	ldrh	r3, [r5, #2]
     b7c:	4a8e      	ldr	r2, [pc, #568]	; (db8 <_i2c_m_sync_transfer+0x38c>)
     b7e:	4013      	ands	r3, r2
     b80:	806b      	strh	r3, [r5, #2]
}
     b82:	b003      	add	sp, #12
     b84:	bc3c      	pop	{r2, r3, r4, r5}
     b86:	4690      	mov	r8, r2
     b88:	4699      	mov	r9, r3
     b8a:	46a2      	mov	sl, r4
     b8c:	46ab      	mov	fp, r5
     b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
     b90:	464b      	mov	r3, r9
     b92:	011b      	lsls	r3, r3, #4
     b94:	d59f      	bpl.n	ad6 <_i2c_m_sync_transfer+0xaa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     b96:	687a      	ldr	r2, [r7, #4]
     b98:	2380      	movs	r3, #128	; 0x80
     b9a:	02db      	lsls	r3, r3, #11
     b9c:	4313      	orrs	r3, r2
     b9e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ba0:	2204      	movs	r2, #4
     ba2:	69fb      	ldr	r3, [r7, #28]
     ba4:	421a      	tst	r2, r3
     ba6:	d1fc      	bne.n	ba2 <_i2c_m_sync_transfer+0x176>
     ba8:	e79d      	b.n	ae6 <_i2c_m_sync_transfer+0xba>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     baa:	886a      	ldrh	r2, [r5, #2]
     bac:	005b      	lsls	r3, r3, #1
     bae:	21ff      	movs	r1, #255	; 0xff
     bb0:	400b      	ands	r3, r1
     bb2:	39fe      	subs	r1, #254	; 0xfe
     bb4:	4011      	ands	r1, r2
     bb6:	4319      	orrs	r1, r3
     bb8:	2204      	movs	r2, #4
     bba:	69fb      	ldr	r3, [r7, #28]
     bbc:	421a      	tst	r2, r3
     bbe:	d1fc      	bne.n	bba <_i2c_m_sync_transfer+0x18e>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     bc2:	f244 0300 	movw	r3, #16384	; 0x4000
     bc6:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     bc8:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     bca:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bcc:	2204      	movs	r2, #4
     bce:	69fb      	ldr	r3, [r7, #28]
     bd0:	421a      	tst	r2, r3
     bd2:	d1fc      	bne.n	bce <_i2c_m_sync_transfer+0x1a2>
     bd4:	e7a7      	b.n	b26 <_i2c_m_sync_transfer+0xfa>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     bd6:	0753      	lsls	r3, r2, #29
     bd8:	d41b      	bmi.n	c12 <_i2c_m_sync_transfer+0x1e6>
			if (msg->flags & I2C_M_TEN) {
     bda:	886b      	ldrh	r3, [r5, #2]
     bdc:	055b      	lsls	r3, r3, #21
     bde:	d535      	bpl.n	c4c <_i2c_m_sync_transfer+0x220>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     be0:	882b      	ldrh	r3, [r5, #0]
     be2:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     be4:	2106      	movs	r1, #6
     be6:	4019      	ands	r1, r3
     be8:	2204      	movs	r2, #4
     bea:	69fb      	ldr	r3, [r7, #28]
     bec:	421a      	tst	r2, r3
     bee:	d1fc      	bne.n	bea <_i2c_m_sync_transfer+0x1be>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     bf2:	f244 0300 	movw	r3, #16384	; 0x4000
     bf6:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     bf8:	22f1      	movs	r2, #241	; 0xf1
     bfa:	4313      	orrs	r3, r2
     bfc:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     bfe:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c00:	3aed      	subs	r2, #237	; 0xed
     c02:	69fb      	ldr	r3, [r7, #28]
     c04:	421a      	tst	r2, r3
     c06:	d1fc      	bne.n	c02 <_i2c_m_sync_transfer+0x1d6>
				msg->flags &= ~I2C_M_TEN;
     c08:	886b      	ldrh	r3, [r5, #2]
     c0a:	4a6c      	ldr	r2, [pc, #432]	; (dbc <_i2c_m_sync_transfer+0x390>)
     c0c:	4013      	ands	r3, r2
     c0e:	806b      	strh	r3, [r5, #2]
     c10:	e065      	b.n	cde <_i2c_m_sync_transfer+0x2b2>
				if (msg->len > 0) {
     c12:	686b      	ldr	r3, [r5, #4]
     c14:	2b00      	cmp	r3, #0
     c16:	dd04      	ble.n	c22 <_i2c_m_sync_transfer+0x1f6>
					msg->flags |= I2C_M_FAIL;
     c18:	886b      	ldrh	r3, [r5, #2]
     c1a:	f241 0200 	movw	r2, #4096	; 0x1000
     c1e:	4313      	orrs	r3, r2
     c20:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     c22:	886b      	ldrh	r3, [r5, #2]
     c24:	b21b      	sxth	r3, r3
     c26:	2b00      	cmp	r3, #0
     c28:	db06      	blt.n	c38 <_i2c_m_sync_transfer+0x20c>
				msg->flags &= ~I2C_M_BUSY;
     c2a:	886b      	ldrh	r3, [r5, #2]
     c2c:	4a62      	ldr	r2, [pc, #392]	; (db8 <_i2c_m_sync_transfer+0x38c>)
     c2e:	4013      	ands	r3, r2
     c30:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     c32:	2002      	movs	r0, #2
     c34:	4240      	negs	r0, r0
     c36:	e7a0      	b.n	b7a <_i2c_m_sync_transfer+0x14e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     c38:	687a      	ldr	r2, [r7, #4]
     c3a:	23c0      	movs	r3, #192	; 0xc0
     c3c:	029b      	lsls	r3, r3, #10
     c3e:	4313      	orrs	r3, r2
     c40:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c42:	2304      	movs	r3, #4
     c44:	69fa      	ldr	r2, [r7, #28]
     c46:	4213      	tst	r3, r2
     c48:	d1fc      	bne.n	c44 <_i2c_m_sync_transfer+0x218>
     c4a:	e7ee      	b.n	c2a <_i2c_m_sync_transfer+0x1fe>
			if (msg->len == 0) {
     c4c:	686b      	ldr	r3, [r5, #4]
     c4e:	b993      	cbnz	r3, c76 <_i2c_m_sync_transfer+0x24a>
				if (msg->flags & I2C_M_STOP) {
     c50:	886b      	ldrh	r3, [r5, #2]
     c52:	b21b      	sxth	r3, r3
     c54:	2b00      	cmp	r3, #0
     c56:	db04      	blt.n	c62 <_i2c_m_sync_transfer+0x236>
				msg->flags &= ~I2C_M_BUSY;
     c58:	886b      	ldrh	r3, [r5, #2]
     c5a:	4a57      	ldr	r2, [pc, #348]	; (db8 <_i2c_m_sync_transfer+0x38c>)
     c5c:	4013      	ands	r3, r2
     c5e:	806b      	strh	r3, [r5, #2]
     c60:	e03d      	b.n	cde <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     c62:	687a      	ldr	r2, [r7, #4]
     c64:	23c0      	movs	r3, #192	; 0xc0
     c66:	029b      	lsls	r3, r3, #10
     c68:	4313      	orrs	r3, r2
     c6a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c6c:	2204      	movs	r2, #4
     c6e:	69fb      	ldr	r3, [r7, #28]
     c70:	421a      	tst	r2, r3
     c72:	d1fc      	bne.n	c6e <_i2c_m_sync_transfer+0x242>
     c74:	e7f0      	b.n	c58 <_i2c_m_sync_transfer+0x22c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     c76:	68ab      	ldr	r3, [r5, #8]
     c78:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     c7a:	2328      	movs	r3, #40	; 0x28
     c7c:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c7e:	2204      	movs	r2, #4
     c80:	69fb      	ldr	r3, [r7, #28]
     c82:	421a      	tst	r2, r3
     c84:	d1fc      	bne.n	c80 <_i2c_m_sync_transfer+0x254>
				msg->buffer++;
     c86:	68ab      	ldr	r3, [r5, #8]
     c88:	3301      	adds	r3, #1
     c8a:	60ab      	str	r3, [r5, #8]
				msg->len--;
     c8c:	686b      	ldr	r3, [r5, #4]
     c8e:	3b01      	subs	r3, #1
     c90:	606b      	str	r3, [r5, #4]
     c92:	e024      	b.n	cde <_i2c_m_sync_transfer+0x2b2>
	} else if (flags & SB_FLAG) {
     c94:	079b      	lsls	r3, r3, #30
     c96:	d522      	bpl.n	cde <_i2c_m_sync_transfer+0x2b2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     c98:	686b      	ldr	r3, [r5, #4]
     c9a:	2b00      	cmp	r3, #0
     c9c:	d03f      	beq.n	d1e <_i2c_m_sync_transfer+0x2f2>
     c9e:	0752      	lsls	r2, r2, #29
     ca0:	d43d      	bmi.n	d1e <_i2c_m_sync_transfer+0x2f2>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     ca2:	0136      	lsls	r6, r6, #4
     ca4:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
     ca6:	3b01      	subs	r3, #1
     ca8:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     caa:	2b00      	cmp	r3, #0
     cac:	d000      	beq.n	cb0 <_i2c_m_sync_transfer+0x284>
     cae:	e10f      	b.n	ed0 <_i2c_m_sync_transfer+0x4a4>
     cb0:	2e00      	cmp	r6, #0
     cb2:	d100      	bne.n	cb6 <_i2c_m_sync_transfer+0x28a>
     cb4:	e112      	b.n	edc <_i2c_m_sync_transfer+0x4b0>
				if (msg->flags & I2C_M_STOP) {
     cb6:	886b      	ldrh	r3, [r5, #2]
     cb8:	b21b      	sxth	r3, r3
     cba:	2b00      	cmp	r3, #0
     cbc:	db1c      	blt.n	cf8 <_i2c_m_sync_transfer+0x2cc>
				msg->flags &= ~I2C_M_BUSY;
     cbe:	886b      	ldrh	r3, [r5, #2]
     cc0:	4a3d      	ldr	r2, [pc, #244]	; (db8 <_i2c_m_sync_transfer+0x38c>)
     cc2:	4013      	ands	r3, r2
     cc4:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     cc6:	68a9      	ldr	r1, [r5, #8]
     cc8:	1c4b      	adds	r3, r1, #1
     cca:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ccc:	2204      	movs	r2, #4
     cce:	69fb      	ldr	r3, [r7, #28]
     cd0:	421a      	tst	r2, r3
     cd2:	d1fc      	bne.n	cce <_i2c_m_sync_transfer+0x2a2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     cd4:	2328      	movs	r3, #40	; 0x28
     cd6:	5cfb      	ldrb	r3, [r7, r3]
     cd8:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     cda:	2302      	movs	r3, #2
     cdc:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     cde:	2300      	movs	r3, #0
     ce0:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     ce2:	f240 1a00 	movw	sl, #256	; 0x100
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     ce6:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ce8:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
     cea:	f240 0c01 	movw	ip, #1
	} else if (flags & SB_FLAG) {
     cee:	f240 0902 	movw	r9, #2
	return ((Sercom *)hw)->I2CM.DATA.reg;
     cf2:	f240 0b28 	movw	fp, #40	; 0x28
     cf6:	e0b3      	b.n	e60 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	4a2f      	ldr	r2, [pc, #188]	; (db8 <_i2c_m_sync_transfer+0x38c>)
     cfc:	4013      	ands	r3, r2
     cfe:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d00:	3206      	adds	r2, #6
     d02:	32ff      	adds	r2, #255	; 0xff
     d04:	69fb      	ldr	r3, [r7, #28]
     d06:	421a      	tst	r2, r3
     d08:	d1fc      	bne.n	d04 <_i2c_m_sync_transfer+0x2d8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d0a:	687a      	ldr	r2, [r7, #4]
     d0c:	23c0      	movs	r3, #192	; 0xc0
     d0e:	029b      	lsls	r3, r3, #10
     d10:	4313      	orrs	r3, r2
     d12:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d14:	2204      	movs	r2, #4
     d16:	69fb      	ldr	r3, [r7, #28]
     d18:	421a      	tst	r2, r3
     d1a:	d1fc      	bne.n	d16 <_i2c_m_sync_transfer+0x2ea>
     d1c:	e7cf      	b.n	cbe <_i2c_m_sync_transfer+0x292>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d1e:	2302      	movs	r3, #2
     d20:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     d22:	2002      	movs	r0, #2
     d24:	4240      	negs	r0, r0
     d26:	e728      	b.n	b7a <_i2c_m_sync_transfer+0x14e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d28:	6862      	ldr	r2, [r4, #4]
     d2a:	23c0      	movs	r3, #192	; 0xc0
     d2c:	029b      	lsls	r3, r3, #10
     d2e:	4313      	orrs	r3, r2
     d30:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d32:	2204      	movs	r2, #4
     d34:	69e3      	ldr	r3, [r4, #28]
     d36:	421a      	tst	r2, r3
     d38:	d1fc      	bne.n	d34 <_i2c_m_sync_transfer+0x308>
     d3a:	e0a7      	b.n	e8c <_i2c_m_sync_transfer+0x460>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     d3c:	4202      	tst	r2, r0
     d3e:	d11b      	bne.n	d78 <_i2c_m_sync_transfer+0x34c>
			if (msg->flags & I2C_M_TEN) {
     d40:	886b      	ldrh	r3, [r5, #2]
     d42:	055b      	lsls	r3, r3, #21
     d44:	d53c      	bpl.n	dc0 <_i2c_m_sync_transfer+0x394>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     d46:	882b      	ldrh	r3, [r5, #0]
     d48:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     d4a:	2006      	movs	r0, #6
     d4c:	4018      	ands	r0, r3
     d4e:	69e3      	ldr	r3, [r4, #28]
     d50:	421a      	tst	r2, r3
     d52:	d1fc      	bne.n	d4e <_i2c_m_sync_transfer+0x322>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     d54:	6a66      	ldr	r6, [r4, #36]	; 0x24
     d56:	f244 0300 	movw	r3, #16384	; 0x4000
     d5a:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
     d5c:	26f1      	movs	r6, #241	; 0xf1
     d5e:	4333      	orrs	r3, r6
     d60:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     d62:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d64:	69e3      	ldr	r3, [r4, #28]
     d66:	421a      	tst	r2, r3
     d68:	d1fc      	bne.n	d64 <_i2c_m_sync_transfer+0x338>
				msg->flags &= ~I2C_M_TEN;
     d6a:	886b      	ldrh	r3, [r5, #2]
     d6c:	4813      	ldr	r0, [pc, #76]	; (dbc <_i2c_m_sync_transfer+0x390>)
     d6e:	4003      	ands	r3, r0
     d70:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     d72:	2300      	movs	r3, #0
     d74:	9301      	str	r3, [sp, #4]
     d76:	e073      	b.n	e60 <_i2c_m_sync_transfer+0x434>
				if (msg->len > 0) {
     d78:	686b      	ldr	r3, [r5, #4]
     d7a:	2b00      	cmp	r3, #0
     d7c:	dd04      	ble.n	d88 <_i2c_m_sync_transfer+0x35c>
					msg->flags |= I2C_M_FAIL;
     d7e:	886b      	ldrh	r3, [r5, #2]
     d80:	f241 0000 	movw	r0, #4096	; 0x1000
     d84:	4303      	orrs	r3, r0
     d86:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     d88:	886b      	ldrh	r3, [r5, #2]
     d8a:	b21b      	sxth	r3, r3
     d8c:	2b00      	cmp	r3, #0
     d8e:	db07      	blt.n	da0 <_i2c_m_sync_transfer+0x374>
				msg->flags &= ~I2C_M_BUSY;
     d90:	886b      	ldrh	r3, [r5, #2]
     d92:	4809      	ldr	r0, [pc, #36]	; (db8 <_i2c_m_sync_transfer+0x38c>)
     d94:	4003      	ands	r3, r0
     d96:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     d98:	2302      	movs	r3, #2
     d9a:	425b      	negs	r3, r3
     d9c:	9301      	str	r3, [sp, #4]
     d9e:	e05f      	b.n	e60 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     da0:	6860      	ldr	r0, [r4, #4]
     da2:	23c0      	movs	r3, #192	; 0xc0
     da4:	029b      	lsls	r3, r3, #10
     da6:	4303      	orrs	r3, r0
     da8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     daa:	69e3      	ldr	r3, [r4, #28]
     dac:	421a      	tst	r2, r3
     dae:	d1fc      	bne.n	daa <_i2c_m_sync_transfer+0x37e>
     db0:	e7ee      	b.n	d90 <_i2c_m_sync_transfer+0x364>
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	fffbffff 	.word	0xfffbffff
     db8:	fffffeff 	.word	0xfffffeff
     dbc:	fffffbff 	.word	0xfffffbff
			if (msg->len == 0) {
     dc0:	686b      	ldr	r3, [r5, #4]
     dc2:	b99b      	cbnz	r3, dec <_i2c_m_sync_transfer+0x3c0>
				if (msg->flags & I2C_M_STOP) {
     dc4:	886b      	ldrh	r3, [r5, #2]
     dc6:	b21b      	sxth	r3, r3
     dc8:	2b00      	cmp	r3, #0
     dca:	db06      	blt.n	dda <_i2c_m_sync_transfer+0x3ae>
				msg->flags &= ~I2C_M_BUSY;
     dcc:	886b      	ldrh	r3, [r5, #2]
     dce:	4863      	ldr	r0, [pc, #396]	; (f5c <_i2c_m_sync_transfer+0x530>)
     dd0:	4003      	ands	r3, r0
     dd2:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
     dd4:	2300      	movs	r3, #0
     dd6:	9301      	str	r3, [sp, #4]
     dd8:	e042      	b.n	e60 <_i2c_m_sync_transfer+0x434>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     dda:	6860      	ldr	r0, [r4, #4]
     ddc:	23c0      	movs	r3, #192	; 0xc0
     dde:	029b      	lsls	r3, r3, #10
     de0:	4303      	orrs	r3, r0
     de2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     de4:	69e3      	ldr	r3, [r4, #28]
     de6:	421a      	tst	r2, r3
     de8:	d1fc      	bne.n	de4 <_i2c_m_sync_transfer+0x3b8>
     dea:	e7ef      	b.n	dcc <_i2c_m_sync_transfer+0x3a0>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     dec:	68ab      	ldr	r3, [r5, #8]
     dee:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     df0:	4658      	mov	r0, fp
     df2:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     df4:	69e3      	ldr	r3, [r4, #28]
     df6:	421a      	tst	r2, r3
     df8:	d1fc      	bne.n	df4 <_i2c_m_sync_transfer+0x3c8>
				msg->buffer++;
     dfa:	68ab      	ldr	r3, [r5, #8]
     dfc:	3301      	adds	r3, #1
     dfe:	60ab      	str	r3, [r5, #8]
				msg->len--;
     e00:	686b      	ldr	r3, [r5, #4]
     e02:	3b01      	subs	r3, #1
     e04:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     e06:	2300      	movs	r3, #0
     e08:	9301      	str	r3, [sp, #4]
     e0a:	e029      	b.n	e60 <_i2c_m_sync_transfer+0x434>
	return I2C_OK;
     e0c:	2700      	movs	r7, #0
     e0e:	9701      	str	r7, [sp, #4]
	} else if (flags & SB_FLAG) {
     e10:	464f      	mov	r7, r9
     e12:	421f      	tst	r7, r3
     e14:	d024      	beq.n	e60 <_i2c_m_sync_transfer+0x434>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     e16:	686b      	ldr	r3, [r5, #4]
     e18:	2b00      	cmp	r3, #0
     e1a:	d04e      	beq.n	eba <_i2c_m_sync_transfer+0x48e>
     e1c:	4202      	tst	r2, r0
     e1e:	d14c      	bne.n	eba <_i2c_m_sync_transfer+0x48e>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     e20:	0ef6      	lsrs	r6, r6, #27
     e22:	4660      	mov	r0, ip
     e24:	4006      	ands	r6, r0
			msg->len--;
     e26:	3b01      	subs	r3, #1
     e28:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     e2a:	2b00      	cmp	r3, #0
     e2c:	d000      	beq.n	e30 <_i2c_m_sync_transfer+0x404>
     e2e:	e082      	b.n	f36 <_i2c_m_sync_transfer+0x50a>
     e30:	2e00      	cmp	r6, #0
     e32:	d100      	bne.n	e36 <_i2c_m_sync_transfer+0x40a>
     e34:	e085      	b.n	f42 <_i2c_m_sync_transfer+0x516>
				if (msg->flags & I2C_M_STOP) {
     e36:	886b      	ldrh	r3, [r5, #2]
     e38:	b21b      	sxth	r3, r3
     e3a:	2b00      	cmp	r3, #0
     e3c:	db2d      	blt.n	e9a <_i2c_m_sync_transfer+0x46e>
				msg->flags &= ~I2C_M_BUSY;
     e3e:	886b      	ldrh	r3, [r5, #2]
     e40:	4846      	ldr	r0, [pc, #280]	; (f5c <_i2c_m_sync_transfer+0x530>)
     e42:	4003      	ands	r3, r0
     e44:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     e46:	68a8      	ldr	r0, [r5, #8]
     e48:	1c43      	adds	r3, r0, #1
     e4a:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e4c:	69e3      	ldr	r3, [r4, #28]
     e4e:	421a      	tst	r2, r3
     e50:	d1fc      	bne.n	e4c <_i2c_m_sync_transfer+0x420>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     e52:	465b      	mov	r3, fp
     e54:	5ce3      	ldrb	r3, [r4, r3]
     e56:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e58:	464b      	mov	r3, r9
     e5a:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     e5c:	2300      	movs	r3, #0
     e5e:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     e60:	886b      	ldrh	r3, [r5, #2]
     e62:	4650      	mov	r0, sl
     e64:	4203      	tst	r3, r0
     e66:	d02e      	beq.n	ec6 <_i2c_m_sync_transfer+0x49a>
	void *   hw      = i2c_dev->hw;
     e68:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     e6a:	7e33      	ldrb	r3, [r6, #24]
     e6c:	b2db      	uxtb	r3, r3
     e6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     e72:	4219      	tst	r1, r3
     e74:	d140      	bne.n	ef8 <_i2c_m_sync_transfer+0x4cc>
     e76:	7e33      	ldrb	r3, [r6, #24]
     e78:	b2db      	uxtb	r3, r3
     e7a:	3801      	subs	r0, #1
		if (timeout-- == 0) {
     e7c:	2800      	cmp	r0, #0
     e7e:	d1f8      	bne.n	e72 <_i2c_m_sync_transfer+0x446>
			if (msg->flags & I2C_M_STOP) {
     e80:	4643      	mov	r3, r8
     e82:	885b      	ldrh	r3, [r3, #2]
     e84:	b21b      	sxth	r3, r3
     e86:	2b00      	cmp	r3, #0
     e88:	da00      	bge.n	e8c <_i2c_m_sync_transfer+0x460>
     e8a:	e74d      	b.n	d28 <_i2c_m_sync_transfer+0x2fc>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     e8c:	886b      	ldrh	r3, [r5, #2]
     e8e:	4a33      	ldr	r2, [pc, #204]	; (f5c <_i2c_m_sync_transfer+0x530>)
     e90:	4013      	ands	r3, r2
     e92:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
     e94:	2005      	movs	r0, #5
     e96:	4240      	negs	r0, r0
			return ret;
     e98:	e673      	b.n	b82 <_i2c_m_sync_transfer+0x156>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     e9a:	6863      	ldr	r3, [r4, #4]
     e9c:	482f      	ldr	r0, [pc, #188]	; (f5c <_i2c_m_sync_transfer+0x530>)
     e9e:	4003      	ands	r3, r0
     ea0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ea2:	69e3      	ldr	r3, [r4, #28]
     ea4:	421a      	tst	r2, r3
     ea6:	d1fc      	bne.n	ea2 <_i2c_m_sync_transfer+0x476>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     ea8:	6860      	ldr	r0, [r4, #4]
     eaa:	23c0      	movs	r3, #192	; 0xc0
     eac:	029b      	lsls	r3, r3, #10
     eae:	4303      	orrs	r3, r0
     eb0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     eb2:	69e3      	ldr	r3, [r4, #28]
     eb4:	421a      	tst	r2, r3
     eb6:	d1fc      	bne.n	eb2 <_i2c_m_sync_transfer+0x486>
     eb8:	e7c1      	b.n	e3e <_i2c_m_sync_transfer+0x412>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     eba:	464b      	mov	r3, r9
     ebc:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     ebe:	2302      	movs	r3, #2
     ec0:	425b      	negs	r3, r3
     ec2:	9301      	str	r3, [sp, #4]
     ec4:	e7cc      	b.n	e60 <_i2c_m_sync_transfer+0x434>
     ec6:	9801      	ldr	r0, [sp, #4]
     ec8:	e65b      	b.n	b82 <_i2c_m_sync_transfer+0x156>
		return I2C_ERR_BUSY;
     eca:	2006      	movs	r0, #6
     ecc:	4240      	negs	r0, r0
     ece:	e658      	b.n	b82 <_i2c_m_sync_transfer+0x156>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     ed0:	2b01      	cmp	r3, #1
     ed2:	d000      	beq.n	ed6 <_i2c_m_sync_transfer+0x4aa>
     ed4:	e6f7      	b.n	cc6 <_i2c_m_sync_transfer+0x29a>
     ed6:	2e00      	cmp	r6, #0
     ed8:	d100      	bne.n	edc <_i2c_m_sync_transfer+0x4b0>
     eda:	e6f4      	b.n	cc6 <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     edc:	687a      	ldr	r2, [r7, #4]
     ede:	2380      	movs	r3, #128	; 0x80
     ee0:	02db      	lsls	r3, r3, #11
     ee2:	4313      	orrs	r3, r2
     ee4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ee6:	2204      	movs	r2, #4
     ee8:	69fb      	ldr	r3, [r7, #28]
     eea:	421a      	tst	r2, r3
     eec:	d1fc      	bne.n	ee8 <_i2c_m_sync_transfer+0x4bc>
			if (msg->len == 0) {
     eee:	686b      	ldr	r3, [r5, #4]
     ef0:	2b00      	cmp	r3, #0
     ef2:	d100      	bne.n	ef6 <_i2c_m_sync_transfer+0x4ca>
     ef4:	e6df      	b.n	cb6 <_i2c_m_sync_transfer+0x28a>
     ef6:	e6e6      	b.n	cc6 <_i2c_m_sync_transfer+0x29a>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     ef8:	6826      	ldr	r6, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     efa:	69e0      	ldr	r0, [r4, #28]
     efc:	4202      	tst	r2, r0
     efe:	d1fc      	bne.n	efa <_i2c_m_sync_transfer+0x4ce>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     f00:	8b60      	ldrh	r0, [r4, #26]
     f02:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
     f04:	4667      	mov	r7, ip
     f06:	421f      	tst	r7, r3
     f08:	d100      	bne.n	f0c <_i2c_m_sync_transfer+0x4e0>
     f0a:	e77f      	b.n	e0c <_i2c_m_sync_transfer+0x3e0>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     f0c:	464b      	mov	r3, r9
     f0e:	4203      	tst	r3, r0
     f10:	d100      	bne.n	f14 <_i2c_m_sync_transfer+0x4e8>
     f12:	e713      	b.n	d3c <_i2c_m_sync_transfer+0x310>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     f14:	7627      	strb	r7, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     f16:	886b      	ldrh	r3, [r5, #2]
     f18:	f241 0600 	movw	r6, #4096	; 0x1000
     f1c:	4333      	orrs	r3, r6
     f1e:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     f20:	886b      	ldrh	r3, [r5, #2]
     f22:	4e0e      	ldr	r6, [pc, #56]	; (f5c <_i2c_m_sync_transfer+0x530>)
     f24:	4033      	ands	r3, r6
     f26:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     f28:	4663      	mov	r3, ip
     f2a:	4003      	ands	r3, r0
			return I2C_ERR_BAD_ADDRESS;
     f2c:	4258      	negs	r0, r3
     f2e:	4158      	adcs	r0, r3
     f30:	1f43      	subs	r3, r0, #5
     f32:	9301      	str	r3, [sp, #4]
     f34:	e794      	b.n	e60 <_i2c_m_sync_transfer+0x434>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     f36:	2b01      	cmp	r3, #1
     f38:	d000      	beq.n	f3c <_i2c_m_sync_transfer+0x510>
     f3a:	e784      	b.n	e46 <_i2c_m_sync_transfer+0x41a>
     f3c:	2e00      	cmp	r6, #0
     f3e:	d100      	bne.n	f42 <_i2c_m_sync_transfer+0x516>
     f40:	e781      	b.n	e46 <_i2c_m_sync_transfer+0x41a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f42:	6860      	ldr	r0, [r4, #4]
     f44:	2380      	movs	r3, #128	; 0x80
     f46:	02db      	lsls	r3, r3, #11
     f48:	4303      	orrs	r3, r0
     f4a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f4c:	69e3      	ldr	r3, [r4, #28]
     f4e:	421a      	tst	r2, r3
     f50:	d1fc      	bne.n	f4c <_i2c_m_sync_transfer+0x520>
			if (msg->len == 0) {
     f52:	686b      	ldr	r3, [r5, #4]
     f54:	2b00      	cmp	r3, #0
     f56:	d100      	bne.n	f5a <_i2c_m_sync_transfer+0x52e>
     f58:	e76d      	b.n	e36 <_i2c_m_sync_transfer+0x40a>
     f5a:	e774      	b.n	e46 <_i2c_m_sync_transfer+0x41a>
     f5c:	fffffeff 	.word	0xfffffeff

00000f60 <TIMER_0_init>:
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
     f60:	f641 0300 	movw	r3, #6144	; 0x1800
     f64:	f2c4 2300 	movt	r3, #16896	; 0x4200
     f68:	691b      	ldr	r3, [r3, #16]
 * \brief Initialize TC interface
 */
int8_t TIMER_0_init()
{

	if (!hri_tc_is_syncing(TC2, TC_SYNCBUSY_SWRST)) {
     f6a:	07db      	lsls	r3, r3, #31
     f6c:	d434      	bmi.n	fd8 <TIMER_0_init+0x78>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f6e:	f641 0200 	movw	r2, #6144	; 0x1800
     f72:	f2c4 2200 	movt	r2, #16896	; 0x4200
     f76:	2103      	movs	r1, #3
     f78:	6913      	ldr	r3, [r2, #16]
     f7a:	4219      	tst	r1, r3
     f7c:	d1fc      	bne.n	f78 <TIMER_0_init+0x18>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     f7e:	f641 0300 	movw	r3, #6144	; 0x1800
     f82:	f2c4 2300 	movt	r3, #16896	; 0x4200
     f86:	681b      	ldr	r3, [r3, #0]
		if (hri_tc_get_CTRLA_reg(TC2, TC_CTRLA_ENABLE)) {
     f88:	079b      	lsls	r3, r3, #30
     f8a:	d517      	bpl.n	fbc <TIMER_0_init+0x5c>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE_Msk;
     f8c:	f641 0300 	movw	r3, #6144	; 0x1800
     f90:	f2c4 2300 	movt	r3, #16896	; 0x4200
     f94:	681a      	ldr	r2, [r3, #0]
     f96:	2102      	movs	r1, #2
     f98:	438a      	bics	r2, r1
     f9a:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     f9c:	f641 0200 	movw	r2, #6144	; 0x1800
     fa0:	f2c4 2200 	movt	r2, #16896	; 0x4200
     fa4:	3101      	adds	r1, #1
     fa6:	6913      	ldr	r3, [r2, #16]
     fa8:	4219      	tst	r1, r3
     faa:	d1fc      	bne.n	fa6 <TIMER_0_init+0x46>
     fac:	f641 0200 	movw	r2, #6144	; 0x1800
     fb0:	f2c4 2200 	movt	r2, #16896	; 0x4200
     fb4:	2102      	movs	r1, #2
     fb6:	6913      	ldr	r3, [r2, #16]
     fb8:	4219      	tst	r1, r3
     fba:	d1fc      	bne.n	fb6 <TIMER_0_init+0x56>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
     fbc:	f641 0300 	movw	r3, #6144	; 0x1800
     fc0:	f2c4 2300 	movt	r3, #16896	; 0x4200
     fc4:	2201      	movs	r2, #1
     fc6:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
     fc8:	f641 0200 	movw	r2, #6144	; 0x1800
     fcc:	f2c4 2200 	movt	r2, #16896	; 0x4200
     fd0:	2103      	movs	r1, #3
     fd2:	6913      	ldr	r3, [r2, #16]
     fd4:	4219      	tst	r1, r3
     fd6:	d1fc      	bne.n	fd2 <TIMER_0_init+0x72>
     fd8:	f641 0200 	movw	r2, #6144	; 0x1800
     fdc:	f2c4 2200 	movt	r2, #16896	; 0x4200
     fe0:	2101      	movs	r1, #1
     fe2:	6913      	ldr	r3, [r2, #16]
     fe4:	4219      	tst	r1, r3
     fe6:	d1fc      	bne.n	fe2 <TIMER_0_init+0x82>
	((Tc *)hw)->COUNT16.CTRLBSET.reg = data;
     fe8:	f641 0300 	movw	r3, #6144	; 0x1800
     fec:	f2c4 2300 	movt	r3, #16896	; 0x4200
     ff0:	2200      	movs	r2, #0
     ff2:	715a      	strb	r2, [r3, #5]
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = ~data;
     ff4:	32ff      	adds	r2, #255	; 0xff
     ff6:	711a      	strb	r2, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
     ff8:	3afe      	subs	r2, #254	; 0xfe
     ffa:	73da      	strb	r2, [r3, #15]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
     ffc:	681a      	ldr	r2, [r3, #0]
	tmp &= ~TC_CTRLA_ENABLE_Msk;
     ffe:	2102      	movs	r1, #2
	tmp |= value << TC_CTRLA_ENABLE_Pos;
    1000:	430a      	orrs	r2, r1
	((Tc *)hw)->COUNT16.CTRLA.reg = tmp;
    1002:	601a      	str	r2, [r3, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1004:	f641 0200 	movw	r2, #6144	; 0x1800
    1008:	f2c4 2200 	movt	r2, #16896	; 0x4200
    100c:	3101      	adds	r1, #1
    100e:	6913      	ldr	r3, [r2, #16]
    1010:	4219      	tst	r1, r3
    1012:	d1fc      	bne.n	100e <TIMER_0_init+0xae>
	//		 | 0 << TC_INTENSET_OVF_Pos); /* Overflow Interrupt enable: disabled */

	hri_tc_write_CTRLA_ENABLE_bit(TC2, 1 << TC_CTRLA_ENABLE_Pos); /* Enable: enabled */

	return 0;
}
    1014:	2000      	movs	r0, #0
    1016:	4770      	bx	lr

00001018 <main>:
 * - Sets the non-secure main stack (MSP_NS)
 * - Gets the non-secure reset handler
 * - Jumps to the non-secure software application
 */
int main(void)
{
    1018:	b510      	push	{r4, lr}
	funcptr_void NonSecure_ResetHandler;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    101a:	f240 33d1 	movw	r3, #977	; 0x3d1
    101e:	f2c0 0300 	movt	r3, #0
    1022:	4798      	blx	r3

	/* Set non-secure main stack (MSP_NS) */
	__TZ_set_MSP_NS(*((uint32_t *)(CONF_TZ_START_NS)));
    1024:	f248 0300 	movw	r3, #32768	; 0x8000
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	f383 8888 	msr	MSP_NS, r3

	/* Get non-secure reset handler */
	NonSecure_ResetHandler = (funcptr_void)(*((uint32_t *)((CONF_TZ_START_NS) + 4U)));
    102e:	f248 0304 	movw	r3, #32772	; 0x8004

	/* Start non-secure state software application */
	NonSecure_ResetHandler();
    1032:	681c      	ldr	r4, [r3, #0]
    1034:	0864      	lsrs	r4, r4, #1
    1036:	0064      	lsls	r4, r4, #1
    1038:	0020      	movs	r0, r4
    103a:	0021      	movs	r1, r4
    103c:	0022      	movs	r2, r4
    103e:	0023      	movs	r3, r4
    1040:	f000 f8c0 	bl	11c4 <__gnu_cmse_nonsecure_call>

	/* Replace with your secure application code */
	while (1) {
		__NOP();
    1044:	46c0      	nop			; (mov r8, r8)
    1046:	e7fd      	b.n	1044 <main+0x2c>

00001048 <at30tse75x_read>:

/**
 * \brief Read temperature from the given sensor
 */
float at30tse75x_read(const struct temperature_sensor *const me)
{
    1048:	b5f0      	push	{r4, r5, r6, r7, lr}
    104a:	b083      	sub	sp, #12
    104c:	0006      	movs	r6, r0
	uint8_t                 buffer[2];
	struct at30tse75x *     at30  = (struct at30tse75x *)me;
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    104e:	6805      	ldr	r5, [r0, #0]
	uint16_t                data;
	int8_t                  sign = 1;

	/* Read the 16-bit temperature register. */
	buffer[0] = AT30TSE_TEMPERATURE_REG | AT30TSE_NON_VOLATILE_REG_TYPE;
    1050:	ac01      	add	r4, sp, #4
    1052:	2300      	movs	r3, #0
    1054:	7023      	strb	r3, [r4, #0]
	buffer[1] = 0;
    1056:	7063      	strb	r3, [r4, #1]
	i2c_m_sync_set_slaveaddr(descr, AT30TSE_SENSOR_ADDRESS, I2C_M_SEVEN);
    1058:	f640 0200 	movw	r2, #2048	; 0x800
    105c:	214f      	movs	r1, #79	; 0x4f
    105e:	0028      	movs	r0, r5
    1060:	f240 6385 	movw	r3, #1669	; 0x685
    1064:	f2c0 0300 	movt	r3, #0
    1068:	4798      	blx	r3
	io_write(&descr->io, buffer, 1);
    106a:	3514      	adds	r5, #20
    106c:	2201      	movs	r2, #1
    106e:	0021      	movs	r1, r4
    1070:	0028      	movs	r0, r5
    1072:	f240 6397 	movw	r3, #1687	; 0x697
    1076:	f2c0 0300 	movt	r3, #0
    107a:	4798      	blx	r3
	io_read(&descr->io, buffer, 2);
    107c:	2202      	movs	r2, #2
    107e:	0021      	movs	r1, r4
    1080:	0028      	movs	r0, r5
    1082:	f240 63cd 	movw	r3, #1741	; 0x6cd
    1086:	f2c0 0300 	movt	r3, #0
    108a:	4798      	blx	r3

	data = (buffer[0] << 8) | buffer[1];
    108c:	7823      	ldrb	r3, [r4, #0]
    108e:	021b      	lsls	r3, r3, #8
    1090:	7860      	ldrb	r0, [r4, #1]
    1092:	4318      	orrs	r0, r3
    1094:	b200      	sxth	r0, r0
	sign -= (bool)(data & (1 << 15)) << 1;
    1096:	0fc3      	lsrs	r3, r0, #31
    1098:	005b      	lsls	r3, r3, #1
	data &= ~(1 << 15);

	/* Convert to temperature */
	data = data >> (7 - at30->resolution);
    109a:	7a35      	ldrb	r5, [r6, #8]
    109c:	f647 74ff 	movw	r4, #32767	; 0x7fff
    10a0:	4004      	ands	r4, r0
    10a2:	2207      	movs	r2, #7
    10a4:	1b52      	subs	r2, r2, r5
    10a6:	4114      	asrs	r4, r2
	sign -= (bool)(data & (1 << 15)) << 1;
    10a8:	2001      	movs	r0, #1
    10aa:	1ac0      	subs	r0, r0, r3
	return (float)data * sign * (0.5 / (1 << at30->resolution));
    10ac:	b240      	sxtb	r0, r0
    10ae:	f241 73dd 	movw	r3, #6109	; 0x17dd
    10b2:	f2c0 0300 	movt	r3, #0
    10b6:	4798      	blx	r3
    10b8:	1c06      	adds	r6, r0, #0
    10ba:	b2a0      	uxth	r0, r4
    10bc:	f641 037d 	movw	r3, #6269	; 0x187d
    10c0:	f2c0 0300 	movt	r3, #0
    10c4:	4798      	blx	r3
    10c6:	1c01      	adds	r1, r0, #0
    10c8:	f241 2329 	movw	r3, #4649	; 0x1229
    10cc:	f2c0 0300 	movt	r3, #0
    10d0:	1c30      	adds	r0, r6, #0
    10d2:	4798      	blx	r3
    10d4:	f242 43ed 	movw	r3, #9453	; 0x24ed
    10d8:	f2c0 0300 	movt	r3, #0
    10dc:	4798      	blx	r3
    10de:	0006      	movs	r6, r0
    10e0:	000f      	movs	r7, r1
    10e2:	2001      	movs	r0, #1
    10e4:	40a8      	lsls	r0, r5
    10e6:	f242 4369 	movw	r3, #9321	; 0x2469
    10ea:	f2c0 0300 	movt	r3, #0
    10ee:	4798      	blx	r3
    10f0:	0002      	movs	r2, r0
    10f2:	000b      	movs	r3, r1
    10f4:	f641 1409 	movw	r4, #6409	; 0x1909
    10f8:	f2c0 0400 	movt	r4, #0
    10fc:	2000      	movs	r0, #0
    10fe:	2100      	movs	r1, #0
    1100:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
    1104:	47a0      	blx	r4
    1106:	0002      	movs	r2, r0
    1108:	000b      	movs	r3, r1
    110a:	f641 7459 	movw	r4, #8025	; 0x1f59
    110e:	f2c0 0400 	movt	r4, #0
    1112:	0030      	movs	r0, r6
    1114:	0039      	movs	r1, r7
    1116:	47a0      	blx	r4
    1118:	f242 5391 	movw	r3, #9617	; 0x2591
    111c:	f2c0 0300 	movt	r3, #0
    1120:	4798      	blx	r3
}
    1122:	b003      	add	sp, #12
    1124:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001126 <at30tse75x_construct>:
{
    1126:	b5f0      	push	{r4, r5, r6, r7, lr}
    1128:	b083      	sub	sp, #12
    112a:	0004      	movs	r4, r0
    112c:	0017      	movs	r7, r2
	temperature_sensor_construct(me, io, &at30tse75x_interface);
    112e:	f642 1254 	movw	r2, #10580	; 0x2954
    1132:	f2c0 0200 	movt	r2, #0
    1136:	f241 137d 	movw	r3, #4477	; 0x117d
    113a:	f2c0 0300 	movt	r3, #0
    113e:	4798      	blx	r3
	descr            = (struct i2c_m_sync_desc *)(me->io);
    1140:	6825      	ldr	r5, [r4, #0]
	at30->resolution = resolution;
    1142:	7227      	strb	r7, [r4, #8]
	data[0] = AT30TSE_CONFIGURATION_REG | AT30TSE_NON_VOLATILE_REG_TYPE;
    1144:	ae01      	add	r6, sp, #4
    1146:	2301      	movs	r3, #1
    1148:	7033      	strb	r3, [r6, #0]
	data[1] = (uint16_t)(at30->resolution) << (AT30TSE_CONFIGURATION_REG_RESOLUTION_BF_OFFSET - 8);
    114a:	017f      	lsls	r7, r7, #5
    114c:	7077      	strb	r7, [r6, #1]
	data[2] = 0;
    114e:	2300      	movs	r3, #0
    1150:	70b3      	strb	r3, [r6, #2]
	i2c_m_sync_set_slaveaddr(descr, AT30TSE_SENSOR_ADDRESS, I2C_M_SEVEN);
    1152:	f640 0200 	movw	r2, #2048	; 0x800
    1156:	214f      	movs	r1, #79	; 0x4f
    1158:	0028      	movs	r0, r5
    115a:	f240 6385 	movw	r3, #1669	; 0x685
    115e:	f2c0 0300 	movt	r3, #0
    1162:	4798      	blx	r3
	io_write(&descr->io, data, 3);
    1164:	0028      	movs	r0, r5
    1166:	3014      	adds	r0, #20
    1168:	2203      	movs	r2, #3
    116a:	0031      	movs	r1, r6
    116c:	f240 6397 	movw	r3, #1687	; 0x697
    1170:	f2c0 0300 	movt	r3, #0
    1174:	4798      	blx	r3
}
    1176:	0020      	movs	r0, r4
    1178:	b003      	add	sp, #12
    117a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000117c <temperature_sensor_construct>:
 * \brief Construct abstract temperature sensor
 */
struct temperature_sensor *temperature_sensor_construct(struct temperature_sensor *const me, void *const io,
                                                        const struct temperature_sensor_interface *const interface)
{
	me->io        = io;
    117c:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    117e:	6042      	str	r2, [r0, #4]

	return me;
}
    1180:	4770      	bx	lr

00001182 <temperature_sensor_read>:

/**
 * \brief Read temperature from the given sensor
 */
float temperature_sensor_read(const struct temperature_sensor *const me)
{
    1182:	b510      	push	{r4, lr}
	return me->interface->read(me);
    1184:	6843      	ldr	r3, [r0, #4]
    1186:	681b      	ldr	r3, [r3, #0]
    1188:	4798      	blx	r3
}
    118a:	bd10      	pop	{r4, pc}

0000118c <temperature_sensors_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void temperature_sensors_init(void)
{
    118c:	b510      	push	{r4, lr}

	i2c_m_sync_enable(&I2C_INSTANCE);
    118e:	f240 0428 	movw	r4, #40	; 0x28
    1192:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1196:	0020      	movs	r0, r4
    1198:	f240 6377 	movw	r3, #1655	; 0x677
    119c:	f2c0 0300 	movt	r3, #0
    11a0:	4798      	blx	r3
	AT30TSE75X = at30tse75x_construct(&AT30TSE75X_descr.parent, &I2C_INSTANCE, CONF_AT30TSE75X_RESOLUTION);
    11a2:	f240 001c 	movw	r0, #28
    11a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    11aa:	2202      	movs	r2, #2
    11ac:	0021      	movs	r1, r4
    11ae:	f241 1327 	movw	r3, #4391	; 0x1127
    11b2:	f2c0 0300 	movt	r3, #0
    11b6:	4798      	blx	r3
    11b8:	f240 0348 	movw	r3, #72	; 0x48
    11bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11c0:	6018      	str	r0, [r3, #0]
}
    11c2:	bd10      	pop	{r4, pc}

000011c4 <__gnu_cmse_nonsecure_call>:
    11c4:	b5e0      	push	{r5, r6, r7, lr}
    11c6:	4645      	mov	r5, r8
    11c8:	464e      	mov	r6, r9
    11ca:	4657      	mov	r7, sl
    11cc:	b4e0      	push	{r5, r6, r7}
    11ce:	465d      	mov	r5, fp
    11d0:	b420      	push	{r5}
    11d2:	4625      	mov	r5, r4
    11d4:	4626      	mov	r6, r4
    11d6:	4627      	mov	r7, r4
    11d8:	46a0      	mov	r8, r4
    11da:	46a1      	mov	r9, r4
    11dc:	46a2      	mov	sl, r4
    11de:	46a3      	mov	fp, r4
    11e0:	46a4      	mov	ip, r4
    11e2:	f384 8800 	msr	CPSR_f, r4
    11e6:	47a4      	blxns	r4
    11e8:	bc20      	pop	{r5}
    11ea:	46ab      	mov	fp, r5
    11ec:	bce0      	pop	{r5, r6, r7}
    11ee:	46ba      	mov	sl, r7
    11f0:	46b1      	mov	r9, r6
    11f2:	46a8      	mov	r8, r5
    11f4:	bde0      	pop	{r5, r6, r7, pc}
	...

000011f8 <__aeabi_f2uiz>:
    11f8:	219e      	movs	r1, #158	; 0x9e
    11fa:	b510      	push	{r4, lr}
    11fc:	05c9      	lsls	r1, r1, #23
    11fe:	1c04      	adds	r4, r0, #0
    1200:	f001 fa82 	bl	2708 <__aeabi_fcmpge>
    1204:	b918      	cbnz	r0, 120e <__aeabi_f2uiz+0x16>
    1206:	1c20      	adds	r0, r4, #0
    1208:	f000 faca 	bl	17a0 <__aeabi_f2iz>
    120c:	bd10      	pop	{r4, pc}
    120e:	219e      	movs	r1, #158	; 0x9e
    1210:	1c20      	adds	r0, r4, #0
    1212:	05c9      	lsls	r1, r1, #23
    1214:	f000 f934 	bl	1480 <__aeabi_fsub>
    1218:	f000 fac2 	bl	17a0 <__aeabi_f2iz>
    121c:	2380      	movs	r3, #128	; 0x80
    121e:	061b      	lsls	r3, r3, #24
    1220:	469c      	mov	ip, r3
    1222:	4460      	add	r0, ip
    1224:	e7f2      	b.n	120c <__aeabi_f2uiz+0x14>
    1226:	46c0      	nop			; (mov r8, r8)

00001228 <__aeabi_fmul>:
    1228:	b5f0      	push	{r4, r5, r6, r7, lr}
    122a:	4646      	mov	r6, r8
    122c:	464f      	mov	r7, r9
    122e:	46d6      	mov	lr, sl
    1230:	0243      	lsls	r3, r0, #9
    1232:	b5c0      	push	{r6, r7, lr}
    1234:	0046      	lsls	r6, r0, #1
    1236:	0a5b      	lsrs	r3, r3, #9
    1238:	0e36      	lsrs	r6, r6, #24
    123a:	4688      	mov	r8, r1
    123c:	4699      	mov	r9, r3
    123e:	0fc4      	lsrs	r4, r0, #31
    1240:	2e00      	cmp	r6, #0
    1242:	d051      	beq.n	12e8 <__aeabi_fmul+0xc0>
    1244:	2eff      	cmp	r6, #255	; 0xff
    1246:	d023      	beq.n	1290 <__aeabi_fmul+0x68>
    1248:	2080      	movs	r0, #128	; 0x80
    124a:	00db      	lsls	r3, r3, #3
    124c:	04c0      	lsls	r0, r0, #19
    124e:	4318      	orrs	r0, r3
    1250:	4681      	mov	r9, r0
    1252:	2700      	movs	r7, #0
    1254:	f240 0a00 	movw	sl, #0
    1258:	3e7f      	subs	r6, #127	; 0x7f
    125a:	4643      	mov	r3, r8
    125c:	0058      	lsls	r0, r3, #1
    125e:	025d      	lsls	r5, r3, #9
    1260:	0e00      	lsrs	r0, r0, #24
    1262:	0fdb      	lsrs	r3, r3, #31
    1264:	0a6d      	lsrs	r5, r5, #9
    1266:	4698      	mov	r8, r3
    1268:	b308      	cbz	r0, 12ae <__aeabi_fmul+0x86>
    126a:	28ff      	cmp	r0, #255	; 0xff
    126c:	d042      	beq.n	12f4 <__aeabi_fmul+0xcc>
    126e:	00eb      	lsls	r3, r5, #3
    1270:	2580      	movs	r5, #128	; 0x80
    1272:	04ed      	lsls	r5, r5, #19
    1274:	431d      	orrs	r5, r3
    1276:	2300      	movs	r3, #0
    1278:	387f      	subs	r0, #127	; 0x7f
    127a:	4641      	mov	r1, r8
    127c:	1836      	adds	r6, r6, r0
    127e:	4061      	eors	r1, r4
    1280:	1c70      	adds	r0, r6, #1
    1282:	431f      	orrs	r7, r3
    1284:	2f0f      	cmp	r7, #15
    1286:	d869      	bhi.n	135c <__aeabi_fmul+0x134>
    1288:	4a7b      	ldr	r2, [pc, #492]	; (1478 <__aeabi_fmul+0x250>)
    128a:	00bf      	lsls	r7, r7, #2
    128c:	59d2      	ldr	r2, [r2, r7]
    128e:	4697      	mov	pc, r2
    1290:	2b00      	cmp	r3, #0
    1292:	d148      	bne.n	1326 <__aeabi_fmul+0xfe>
    1294:	4643      	mov	r3, r8
    1296:	0058      	lsls	r0, r3, #1
    1298:	025d      	lsls	r5, r3, #9
    129a:	0e00      	lsrs	r0, r0, #24
    129c:	0fdb      	lsrs	r3, r3, #31
    129e:	2708      	movs	r7, #8
    12a0:	26ff      	movs	r6, #255	; 0xff
    12a2:	f240 0a02 	movw	sl, #2
    12a6:	0a6d      	lsrs	r5, r5, #9
    12a8:	4698      	mov	r8, r3
    12aa:	2800      	cmp	r0, #0
    12ac:	d1dd      	bne.n	126a <__aeabi_fmul+0x42>
    12ae:	2d00      	cmp	r5, #0
    12b0:	d13e      	bne.n	1330 <__aeabi_fmul+0x108>
    12b2:	2000      	movs	r0, #0
    12b4:	2301      	movs	r3, #1
    12b6:	e7e0      	b.n	127a <__aeabi_fmul+0x52>
    12b8:	4641      	mov	r1, r8
    12ba:	2b02      	cmp	r3, #2
    12bc:	d020      	beq.n	1300 <__aeabi_fmul+0xd8>
    12be:	2b03      	cmp	r3, #3
    12c0:	d100      	bne.n	12c4 <__aeabi_fmul+0x9c>
    12c2:	e0cf      	b.n	1464 <__aeabi_fmul+0x23c>
    12c4:	2b01      	cmp	r3, #1
    12c6:	d000      	beq.n	12ca <__aeabi_fmul+0xa2>
    12c8:	e0ad      	b.n	1426 <__aeabi_fmul+0x1fe>
    12ca:	2200      	movs	r2, #0
    12cc:	2000      	movs	r0, #0
    12ce:	4019      	ands	r1, r3
    12d0:	b2cc      	uxtb	r4, r1
    12d2:	0240      	lsls	r0, r0, #9
    12d4:	05d2      	lsls	r2, r2, #23
    12d6:	0a40      	lsrs	r0, r0, #9
    12d8:	07e4      	lsls	r4, r4, #31
    12da:	4310      	orrs	r0, r2
    12dc:	4320      	orrs	r0, r4
    12de:	bc1c      	pop	{r2, r3, r4}
    12e0:	4690      	mov	r8, r2
    12e2:	4699      	mov	r9, r3
    12e4:	46a2      	mov	sl, r4
    12e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12e8:	b97b      	cbnz	r3, 130a <__aeabi_fmul+0xe2>
    12ea:	2704      	movs	r7, #4
    12ec:	2600      	movs	r6, #0
    12ee:	f240 0a01 	movw	sl, #1
    12f2:	e7b2      	b.n	125a <__aeabi_fmul+0x32>
    12f4:	20ff      	movs	r0, #255	; 0xff
    12f6:	2302      	movs	r3, #2
    12f8:	2d00      	cmp	r5, #0
    12fa:	d0be      	beq.n	127a <__aeabi_fmul+0x52>
    12fc:	2303      	movs	r3, #3
    12fe:	e7bc      	b.n	127a <__aeabi_fmul+0x52>
    1300:	2401      	movs	r4, #1
    1302:	22ff      	movs	r2, #255	; 0xff
    1304:	400c      	ands	r4, r1
    1306:	2000      	movs	r0, #0
    1308:	e7e3      	b.n	12d2 <__aeabi_fmul+0xaa>
    130a:	0018      	movs	r0, r3
    130c:	f001 fa06 	bl	271c <__clzsi2>
    1310:	464a      	mov	r2, r9
    1312:	1f43      	subs	r3, r0, #5
    1314:	2676      	movs	r6, #118	; 0x76
    1316:	409a      	lsls	r2, r3
    1318:	4276      	negs	r6, r6
    131a:	4691      	mov	r9, r2
    131c:	1a36      	subs	r6, r6, r0
    131e:	2700      	movs	r7, #0
    1320:	f240 0a00 	movw	sl, #0
    1324:	e799      	b.n	125a <__aeabi_fmul+0x32>
    1326:	270c      	movs	r7, #12
    1328:	26ff      	movs	r6, #255	; 0xff
    132a:	f240 0a03 	movw	sl, #3
    132e:	e794      	b.n	125a <__aeabi_fmul+0x32>
    1330:	0028      	movs	r0, r5
    1332:	f001 f9f3 	bl	271c <__clzsi2>
    1336:	1f43      	subs	r3, r0, #5
    1338:	409d      	lsls	r5, r3
    133a:	2376      	movs	r3, #118	; 0x76
    133c:	425b      	negs	r3, r3
    133e:	1a18      	subs	r0, r3, r0
    1340:	2300      	movs	r3, #0
    1342:	e79a      	b.n	127a <__aeabi_fmul+0x52>
    1344:	2080      	movs	r0, #128	; 0x80
    1346:	2400      	movs	r4, #0
    1348:	03c0      	lsls	r0, r0, #15
    134a:	22ff      	movs	r2, #255	; 0xff
    134c:	e7c1      	b.n	12d2 <__aeabi_fmul+0xaa>
    134e:	464d      	mov	r5, r9
    1350:	4653      	mov	r3, sl
    1352:	e7b2      	b.n	12ba <__aeabi_fmul+0x92>
    1354:	464d      	mov	r5, r9
    1356:	0021      	movs	r1, r4
    1358:	4653      	mov	r3, sl
    135a:	e7ae      	b.n	12ba <__aeabi_fmul+0x92>
    135c:	464b      	mov	r3, r9
    135e:	0c1b      	lsrs	r3, r3, #16
    1360:	4698      	mov	r8, r3
    1362:	464a      	mov	r2, r9
    1364:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1368:	401a      	ands	r2, r3
    136a:	402b      	ands	r3, r5
    136c:	001c      	movs	r4, r3
    136e:	4354      	muls	r4, r2
    1370:	0c2f      	lsrs	r7, r5, #16
    1372:	46a4      	mov	ip, r4
    1374:	4645      	mov	r5, r8
    1376:	4644      	mov	r4, r8
    1378:	437d      	muls	r5, r7
    137a:	4357      	muls	r7, r2
    137c:	4662      	mov	r2, ip
    137e:	4363      	muls	r3, r4
    1380:	0c12      	lsrs	r2, r2, #16
    1382:	18ff      	adds	r7, r7, r3
    1384:	19d2      	adds	r2, r2, r7
    1386:	4293      	cmp	r3, r2
    1388:	d903      	bls.n	1392 <__aeabi_fmul+0x16a>
    138a:	2380      	movs	r3, #128	; 0x80
    138c:	025b      	lsls	r3, r3, #9
    138e:	4698      	mov	r8, r3
    1390:	4445      	add	r5, r8
    1392:	4667      	mov	r7, ip
    1394:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1398:	0414      	lsls	r4, r2, #16
    139a:	403b      	ands	r3, r7
    139c:	18e4      	adds	r4, r4, r3
    139e:	01a3      	lsls	r3, r4, #6
    13a0:	1e5f      	subs	r7, r3, #1
    13a2:	41bb      	sbcs	r3, r7
    13a4:	0c12      	lsrs	r2, r2, #16
    13a6:	0ea4      	lsrs	r4, r4, #26
    13a8:	1955      	adds	r5, r2, r5
    13aa:	431c      	orrs	r4, r3
    13ac:	01ad      	lsls	r5, r5, #6
    13ae:	4325      	orrs	r5, r4
    13b0:	012b      	lsls	r3, r5, #4
    13b2:	d504      	bpl.n	13be <__aeabi_fmul+0x196>
    13b4:	2301      	movs	r3, #1
    13b6:	0006      	movs	r6, r0
    13b8:	086a      	lsrs	r2, r5, #1
    13ba:	401d      	ands	r5, r3
    13bc:	4315      	orrs	r5, r2
    13be:	0032      	movs	r2, r6
    13c0:	327f      	adds	r2, #127	; 0x7f
    13c2:	2a00      	cmp	r2, #0
    13c4:	dd27      	ble.n	1416 <__aeabi_fmul+0x1ee>
    13c6:	076b      	lsls	r3, r5, #29
    13c8:	d004      	beq.n	13d4 <__aeabi_fmul+0x1ac>
    13ca:	230f      	movs	r3, #15
    13cc:	402b      	ands	r3, r5
    13ce:	2b04      	cmp	r3, #4
    13d0:	d000      	beq.n	13d4 <__aeabi_fmul+0x1ac>
    13d2:	3504      	adds	r5, #4
    13d4:	012b      	lsls	r3, r5, #4
    13d6:	d503      	bpl.n	13e0 <__aeabi_fmul+0x1b8>
    13d8:	0032      	movs	r2, r6
    13da:	4b28      	ldr	r3, [pc, #160]	; (147c <__aeabi_fmul+0x254>)
    13dc:	3280      	adds	r2, #128	; 0x80
    13de:	401d      	ands	r5, r3
    13e0:	2afe      	cmp	r2, #254	; 0xfe
    13e2:	dc8d      	bgt.n	1300 <__aeabi_fmul+0xd8>
    13e4:	2401      	movs	r4, #1
    13e6:	01a8      	lsls	r0, r5, #6
    13e8:	0a40      	lsrs	r0, r0, #9
    13ea:	b2d2      	uxtb	r2, r2
    13ec:	400c      	ands	r4, r1
    13ee:	e770      	b.n	12d2 <__aeabi_fmul+0xaa>
    13f0:	2080      	movs	r0, #128	; 0x80
    13f2:	464b      	mov	r3, r9
    13f4:	03c0      	lsls	r0, r0, #15
    13f6:	4203      	tst	r3, r0
    13f8:	d008      	beq.n	140c <__aeabi_fmul+0x1e4>
    13fa:	4205      	tst	r5, r0
    13fc:	d105      	bne.n	140a <__aeabi_fmul+0x1e2>
    13fe:	4328      	orrs	r0, r5
    1400:	0240      	lsls	r0, r0, #9
    1402:	0a40      	lsrs	r0, r0, #9
    1404:	4644      	mov	r4, r8
    1406:	22ff      	movs	r2, #255	; 0xff
    1408:	e763      	b.n	12d2 <__aeabi_fmul+0xaa>
    140a:	464b      	mov	r3, r9
    140c:	4318      	orrs	r0, r3
    140e:	0240      	lsls	r0, r0, #9
    1410:	0a40      	lsrs	r0, r0, #9
    1412:	22ff      	movs	r2, #255	; 0xff
    1414:	e75d      	b.n	12d2 <__aeabi_fmul+0xaa>
    1416:	2401      	movs	r4, #1
    1418:	1aa3      	subs	r3, r4, r2
    141a:	2b1b      	cmp	r3, #27
    141c:	dd05      	ble.n	142a <__aeabi_fmul+0x202>
    141e:	400c      	ands	r4, r1
    1420:	2200      	movs	r2, #0
    1422:	2000      	movs	r0, #0
    1424:	e755      	b.n	12d2 <__aeabi_fmul+0xaa>
    1426:	0006      	movs	r6, r0
    1428:	e7c9      	b.n	13be <__aeabi_fmul+0x196>
    142a:	002a      	movs	r2, r5
    142c:	2020      	movs	r0, #32
    142e:	40da      	lsrs	r2, r3
    1430:	1ac3      	subs	r3, r0, r3
    1432:	409d      	lsls	r5, r3
    1434:	002b      	movs	r3, r5
    1436:	1e5d      	subs	r5, r3, #1
    1438:	41ab      	sbcs	r3, r5
    143a:	4313      	orrs	r3, r2
    143c:	075a      	lsls	r2, r3, #29
    143e:	d004      	beq.n	144a <__aeabi_fmul+0x222>
    1440:	220f      	movs	r2, #15
    1442:	401a      	ands	r2, r3
    1444:	2a04      	cmp	r2, #4
    1446:	d000      	beq.n	144a <__aeabi_fmul+0x222>
    1448:	3304      	adds	r3, #4
    144a:	015a      	lsls	r2, r3, #5
    144c:	d504      	bpl.n	1458 <__aeabi_fmul+0x230>
    144e:	2401      	movs	r4, #1
    1450:	2201      	movs	r2, #1
    1452:	400c      	ands	r4, r1
    1454:	2000      	movs	r0, #0
    1456:	e73c      	b.n	12d2 <__aeabi_fmul+0xaa>
    1458:	2401      	movs	r4, #1
    145a:	019b      	lsls	r3, r3, #6
    145c:	0a58      	lsrs	r0, r3, #9
    145e:	400c      	ands	r4, r1
    1460:	2200      	movs	r2, #0
    1462:	e736      	b.n	12d2 <__aeabi_fmul+0xaa>
    1464:	2080      	movs	r0, #128	; 0x80
    1466:	2401      	movs	r4, #1
    1468:	03c0      	lsls	r0, r0, #15
    146a:	4328      	orrs	r0, r5
    146c:	0240      	lsls	r0, r0, #9
    146e:	0a40      	lsrs	r0, r0, #9
    1470:	400c      	ands	r4, r1
    1472:	22ff      	movs	r2, #255	; 0xff
    1474:	e72d      	b.n	12d2 <__aeabi_fmul+0xaa>
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	00002958 	.word	0x00002958
    147c:	f7ffffff 	.word	0xf7ffffff

00001480 <__aeabi_fsub>:
    1480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1482:	46ce      	mov	lr, r9
    1484:	4647      	mov	r7, r8
    1486:	0044      	lsls	r4, r0, #1
    1488:	0fc2      	lsrs	r2, r0, #31
    148a:	b580      	push	{r7, lr}
    148c:	0247      	lsls	r7, r0, #9
    148e:	0248      	lsls	r0, r1, #9
    1490:	0a40      	lsrs	r0, r0, #9
    1492:	4684      	mov	ip, r0
    1494:	4666      	mov	r6, ip
    1496:	0a7b      	lsrs	r3, r7, #9
    1498:	0048      	lsls	r0, r1, #1
    149a:	4699      	mov	r9, r3
    149c:	0e24      	lsrs	r4, r4, #24
    149e:	0015      	movs	r5, r2
    14a0:	00db      	lsls	r3, r3, #3
    14a2:	0e00      	lsrs	r0, r0, #24
    14a4:	0fc9      	lsrs	r1, r1, #31
    14a6:	00f6      	lsls	r6, r6, #3
    14a8:	28ff      	cmp	r0, #255	; 0xff
    14aa:	d100      	bne.n	14ae <__aeabi_fsub+0x2e>
    14ac:	e08d      	b.n	15ca <__aeabi_fsub+0x14a>
    14ae:	f240 0801 	movw	r8, #1
    14b2:	4647      	mov	r7, r8
    14b4:	4079      	eors	r1, r7
    14b6:	4291      	cmp	r1, r2
    14b8:	d065      	beq.n	1586 <__aeabi_fsub+0x106>
    14ba:	1a22      	subs	r2, r4, r0
    14bc:	2a00      	cmp	r2, #0
    14be:	dc00      	bgt.n	14c2 <__aeabi_fsub+0x42>
    14c0:	e09c      	b.n	15fc <__aeabi_fsub+0x17c>
    14c2:	2800      	cmp	r0, #0
    14c4:	d13c      	bne.n	1540 <__aeabi_fsub+0xc0>
    14c6:	2e00      	cmp	r6, #0
    14c8:	d100      	bne.n	14cc <__aeabi_fsub+0x4c>
    14ca:	e08a      	b.n	15e2 <__aeabi_fsub+0x162>
    14cc:	1e51      	subs	r1, r2, #1
    14ce:	2900      	cmp	r1, #0
    14d0:	d000      	beq.n	14d4 <__aeabi_fsub+0x54>
    14d2:	e0b3      	b.n	163c <__aeabi_fsub+0x1bc>
    14d4:	2401      	movs	r4, #1
    14d6:	1b9b      	subs	r3, r3, r6
    14d8:	015a      	lsls	r2, r3, #5
    14da:	d543      	bpl.n	1564 <__aeabi_fsub+0xe4>
    14dc:	019b      	lsls	r3, r3, #6
    14de:	099f      	lsrs	r7, r3, #6
    14e0:	0038      	movs	r0, r7
    14e2:	f001 f91b 	bl	271c <__clzsi2>
    14e6:	3805      	subs	r0, #5
    14e8:	4087      	lsls	r7, r0
    14ea:	4284      	cmp	r4, r0
    14ec:	dd00      	ble.n	14f0 <__aeabi_fsub+0x70>
    14ee:	e094      	b.n	161a <__aeabi_fsub+0x19a>
    14f0:	1b04      	subs	r4, r0, r4
    14f2:	003a      	movs	r2, r7
    14f4:	2020      	movs	r0, #32
    14f6:	3401      	adds	r4, #1
    14f8:	40e2      	lsrs	r2, r4
    14fa:	1b04      	subs	r4, r0, r4
    14fc:	40a7      	lsls	r7, r4
    14fe:	003b      	movs	r3, r7
    1500:	1e5f      	subs	r7, r3, #1
    1502:	41bb      	sbcs	r3, r7
    1504:	2400      	movs	r4, #0
    1506:	4313      	orrs	r3, r2
    1508:	075a      	lsls	r2, r3, #29
    150a:	d004      	beq.n	1516 <__aeabi_fsub+0x96>
    150c:	220f      	movs	r2, #15
    150e:	401a      	ands	r2, r3
    1510:	2a04      	cmp	r2, #4
    1512:	d000      	beq.n	1516 <__aeabi_fsub+0x96>
    1514:	3304      	adds	r3, #4
    1516:	015a      	lsls	r2, r3, #5
    1518:	d526      	bpl.n	1568 <__aeabi_fsub+0xe8>
    151a:	3401      	adds	r4, #1
    151c:	2cff      	cmp	r4, #255	; 0xff
    151e:	d100      	bne.n	1522 <__aeabi_fsub+0xa2>
    1520:	e077      	b.n	1612 <__aeabi_fsub+0x192>
    1522:	2201      	movs	r2, #1
    1524:	019b      	lsls	r3, r3, #6
    1526:	0a5b      	lsrs	r3, r3, #9
    1528:	b2e4      	uxtb	r4, r4
    152a:	402a      	ands	r2, r5
    152c:	025b      	lsls	r3, r3, #9
    152e:	05e4      	lsls	r4, r4, #23
    1530:	0a58      	lsrs	r0, r3, #9
    1532:	07d2      	lsls	r2, r2, #31
    1534:	4320      	orrs	r0, r4
    1536:	4310      	orrs	r0, r2
    1538:	bc0c      	pop	{r2, r3}
    153a:	4690      	mov	r8, r2
    153c:	4699      	mov	r9, r3
    153e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1540:	2cff      	cmp	r4, #255	; 0xff
    1542:	d0e1      	beq.n	1508 <__aeabi_fsub+0x88>
    1544:	2180      	movs	r1, #128	; 0x80
    1546:	04c9      	lsls	r1, r1, #19
    1548:	430e      	orrs	r6, r1
    154a:	2a1b      	cmp	r2, #27
    154c:	dc7a      	bgt.n	1644 <__aeabi_fsub+0x1c4>
    154e:	0031      	movs	r1, r6
    1550:	2020      	movs	r0, #32
    1552:	40d1      	lsrs	r1, r2
    1554:	1a82      	subs	r2, r0, r2
    1556:	4096      	lsls	r6, r2
    1558:	1e72      	subs	r2, r6, #1
    155a:	4196      	sbcs	r6, r2
    155c:	430e      	orrs	r6, r1
    155e:	1b9b      	subs	r3, r3, r6
    1560:	015a      	lsls	r2, r3, #5
    1562:	d4bb      	bmi.n	14dc <__aeabi_fsub+0x5c>
    1564:	075a      	lsls	r2, r3, #29
    1566:	d1d1      	bne.n	150c <__aeabi_fsub+0x8c>
    1568:	2201      	movs	r2, #1
    156a:	08df      	lsrs	r7, r3, #3
    156c:	402a      	ands	r2, r5
    156e:	2cff      	cmp	r4, #255	; 0xff
    1570:	d133      	bne.n	15da <__aeabi_fsub+0x15a>
    1572:	2f00      	cmp	r7, #0
    1574:	d100      	bne.n	1578 <__aeabi_fsub+0xf8>
    1576:	e0a6      	b.n	16c6 <__aeabi_fsub+0x246>
    1578:	2380      	movs	r3, #128	; 0x80
    157a:	03db      	lsls	r3, r3, #15
    157c:	433b      	orrs	r3, r7
    157e:	025b      	lsls	r3, r3, #9
    1580:	0a5b      	lsrs	r3, r3, #9
    1582:	24ff      	movs	r4, #255	; 0xff
    1584:	e7d2      	b.n	152c <__aeabi_fsub+0xac>
    1586:	1a21      	subs	r1, r4, r0
    1588:	2900      	cmp	r1, #0
    158a:	dd4b      	ble.n	1624 <__aeabi_fsub+0x1a4>
    158c:	b358      	cbz	r0, 15e6 <__aeabi_fsub+0x166>
    158e:	2cff      	cmp	r4, #255	; 0xff
    1590:	d0ba      	beq.n	1508 <__aeabi_fsub+0x88>
    1592:	2080      	movs	r0, #128	; 0x80
    1594:	04c0      	lsls	r0, r0, #19
    1596:	4306      	orrs	r6, r0
    1598:	291b      	cmp	r1, #27
    159a:	dd00      	ble.n	159e <__aeabi_fsub+0x11e>
    159c:	e0ac      	b.n	16f8 <__aeabi_fsub+0x278>
    159e:	0030      	movs	r0, r6
    15a0:	2720      	movs	r7, #32
    15a2:	40c8      	lsrs	r0, r1
    15a4:	1a79      	subs	r1, r7, r1
    15a6:	408e      	lsls	r6, r1
    15a8:	1e71      	subs	r1, r6, #1
    15aa:	418e      	sbcs	r6, r1
    15ac:	4306      	orrs	r6, r0
    15ae:	199b      	adds	r3, r3, r6
    15b0:	0159      	lsls	r1, r3, #5
    15b2:	d5d7      	bpl.n	1564 <__aeabi_fsub+0xe4>
    15b4:	3401      	adds	r4, #1
    15b6:	2cff      	cmp	r4, #255	; 0xff
    15b8:	d100      	bne.n	15bc <__aeabi_fsub+0x13c>
    15ba:	e084      	b.n	16c6 <__aeabi_fsub+0x246>
    15bc:	2201      	movs	r2, #1
    15be:	4976      	ldr	r1, [pc, #472]	; (1798 <__aeabi_fsub+0x318>)
    15c0:	401a      	ands	r2, r3
    15c2:	085b      	lsrs	r3, r3, #1
    15c4:	400b      	ands	r3, r1
    15c6:	4313      	orrs	r3, r2
    15c8:	e79e      	b.n	1508 <__aeabi_fsub+0x88>
    15ca:	2e00      	cmp	r6, #0
    15cc:	d000      	beq.n	15d0 <__aeabi_fsub+0x150>
    15ce:	e772      	b.n	14b6 <__aeabi_fsub+0x36>
    15d0:	e76d      	b.n	14ae <__aeabi_fsub+0x2e>
    15d2:	003b      	movs	r3, r7
    15d4:	2f00      	cmp	r7, #0
    15d6:	d1c5      	bne.n	1564 <__aeabi_fsub+0xe4>
    15d8:	2200      	movs	r2, #0
    15da:	027b      	lsls	r3, r7, #9
    15dc:	0a5b      	lsrs	r3, r3, #9
    15de:	b2e4      	uxtb	r4, r4
    15e0:	e7a4      	b.n	152c <__aeabi_fsub+0xac>
    15e2:	0014      	movs	r4, r2
    15e4:	e790      	b.n	1508 <__aeabi_fsub+0x88>
    15e6:	2e00      	cmp	r6, #0
    15e8:	d04b      	beq.n	1682 <__aeabi_fsub+0x202>
    15ea:	1e48      	subs	r0, r1, #1
    15ec:	2800      	cmp	r0, #0
    15ee:	d155      	bne.n	169c <__aeabi_fsub+0x21c>
    15f0:	199b      	adds	r3, r3, r6
    15f2:	2401      	movs	r4, #1
    15f4:	015a      	lsls	r2, r3, #5
    15f6:	d5b5      	bpl.n	1564 <__aeabi_fsub+0xe4>
    15f8:	2402      	movs	r4, #2
    15fa:	e7df      	b.n	15bc <__aeabi_fsub+0x13c>
    15fc:	bb2a      	cbnz	r2, 164a <__aeabi_fsub+0x1ca>
    15fe:	1c62      	adds	r2, r4, #1
    1600:	b2d2      	uxtb	r2, r2
    1602:	2a01      	cmp	r2, #1
    1604:	dd71      	ble.n	16ea <__aeabi_fsub+0x26a>
    1606:	1b9f      	subs	r7, r3, r6
    1608:	017a      	lsls	r2, r7, #5
    160a:	d534      	bpl.n	1676 <__aeabi_fsub+0x1f6>
    160c:	1af7      	subs	r7, r6, r3
    160e:	000d      	movs	r5, r1
    1610:	e766      	b.n	14e0 <__aeabi_fsub+0x60>
    1612:	2201      	movs	r2, #1
    1614:	2300      	movs	r3, #0
    1616:	402a      	ands	r2, r5
    1618:	e788      	b.n	152c <__aeabi_fsub+0xac>
    161a:	003b      	movs	r3, r7
    161c:	4a5f      	ldr	r2, [pc, #380]	; (179c <__aeabi_fsub+0x31c>)
    161e:	1a24      	subs	r4, r4, r0
    1620:	4013      	ands	r3, r2
    1622:	e771      	b.n	1508 <__aeabi_fsub+0x88>
    1624:	2900      	cmp	r1, #0
    1626:	d169      	bne.n	16fc <__aeabi_fsub+0x27c>
    1628:	1c61      	adds	r1, r4, #1
    162a:	b2c8      	uxtb	r0, r1
    162c:	2801      	cmp	r0, #1
    162e:	dd4d      	ble.n	16cc <__aeabi_fsub+0x24c>
    1630:	29ff      	cmp	r1, #255	; 0xff
    1632:	d048      	beq.n	16c6 <__aeabi_fsub+0x246>
    1634:	199b      	adds	r3, r3, r6
    1636:	085b      	lsrs	r3, r3, #1
    1638:	000c      	movs	r4, r1
    163a:	e765      	b.n	1508 <__aeabi_fsub+0x88>
    163c:	2aff      	cmp	r2, #255	; 0xff
    163e:	d040      	beq.n	16c2 <__aeabi_fsub+0x242>
    1640:	000a      	movs	r2, r1
    1642:	e782      	b.n	154a <__aeabi_fsub+0xca>
    1644:	2601      	movs	r6, #1
    1646:	1b9b      	subs	r3, r3, r6
    1648:	e78a      	b.n	1560 <__aeabi_fsub+0xe0>
    164a:	b1e4      	cbz	r4, 1686 <__aeabi_fsub+0x206>
    164c:	28ff      	cmp	r0, #255	; 0xff
    164e:	d021      	beq.n	1694 <__aeabi_fsub+0x214>
    1650:	2480      	movs	r4, #128	; 0x80
    1652:	04e4      	lsls	r4, r4, #19
    1654:	4252      	negs	r2, r2
    1656:	4323      	orrs	r3, r4
    1658:	2a1b      	cmp	r2, #27
    165a:	dd00      	ble.n	165e <__aeabi_fsub+0x1de>
    165c:	e090      	b.n	1780 <__aeabi_fsub+0x300>
    165e:	001c      	movs	r4, r3
    1660:	2520      	movs	r5, #32
    1662:	40d4      	lsrs	r4, r2
    1664:	1aaa      	subs	r2, r5, r2
    1666:	4093      	lsls	r3, r2
    1668:	1e5a      	subs	r2, r3, #1
    166a:	4193      	sbcs	r3, r2
    166c:	4323      	orrs	r3, r4
    166e:	1af3      	subs	r3, r6, r3
    1670:	0004      	movs	r4, r0
    1672:	000d      	movs	r5, r1
    1674:	e730      	b.n	14d8 <__aeabi_fsub+0x58>
    1676:	2f00      	cmp	r7, #0
    1678:	d000      	beq.n	167c <__aeabi_fsub+0x1fc>
    167a:	e731      	b.n	14e0 <__aeabi_fsub+0x60>
    167c:	2200      	movs	r2, #0
    167e:	2400      	movs	r4, #0
    1680:	e7ab      	b.n	15da <__aeabi_fsub+0x15a>
    1682:	000c      	movs	r4, r1
    1684:	e740      	b.n	1508 <__aeabi_fsub+0x88>
    1686:	2b00      	cmp	r3, #0
    1688:	d052      	beq.n	1730 <__aeabi_fsub+0x2b0>
    168a:	43d2      	mvns	r2, r2
    168c:	2a00      	cmp	r2, #0
    168e:	d0ee      	beq.n	166e <__aeabi_fsub+0x1ee>
    1690:	28ff      	cmp	r0, #255	; 0xff
    1692:	d1e1      	bne.n	1658 <__aeabi_fsub+0x1d8>
    1694:	0033      	movs	r3, r6
    1696:	24ff      	movs	r4, #255	; 0xff
    1698:	000d      	movs	r5, r1
    169a:	e735      	b.n	1508 <__aeabi_fsub+0x88>
    169c:	29ff      	cmp	r1, #255	; 0xff
    169e:	d010      	beq.n	16c2 <__aeabi_fsub+0x242>
    16a0:	0001      	movs	r1, r0
    16a2:	e779      	b.n	1598 <__aeabi_fsub+0x118>
    16a4:	2b00      	cmp	r3, #0
    16a6:	d068      	beq.n	177a <__aeabi_fsub+0x2fa>
    16a8:	24ff      	movs	r4, #255	; 0xff
    16aa:	2e00      	cmp	r6, #0
    16ac:	d100      	bne.n	16b0 <__aeabi_fsub+0x230>
    16ae:	e72b      	b.n	1508 <__aeabi_fsub+0x88>
    16b0:	2280      	movs	r2, #128	; 0x80
    16b2:	4649      	mov	r1, r9
    16b4:	03d2      	lsls	r2, r2, #15
    16b6:	4211      	tst	r1, r2
    16b8:	d003      	beq.n	16c2 <__aeabi_fsub+0x242>
    16ba:	4661      	mov	r1, ip
    16bc:	4211      	tst	r1, r2
    16be:	d100      	bne.n	16c2 <__aeabi_fsub+0x242>
    16c0:	0033      	movs	r3, r6
    16c2:	24ff      	movs	r4, #255	; 0xff
    16c4:	e720      	b.n	1508 <__aeabi_fsub+0x88>
    16c6:	24ff      	movs	r4, #255	; 0xff
    16c8:	2300      	movs	r3, #0
    16ca:	e72f      	b.n	152c <__aeabi_fsub+0xac>
    16cc:	2c00      	cmp	r4, #0
    16ce:	d1e9      	bne.n	16a4 <__aeabi_fsub+0x224>
    16d0:	2b00      	cmp	r3, #0
    16d2:	d05d      	beq.n	1790 <__aeabi_fsub+0x310>
    16d4:	2e00      	cmp	r6, #0
    16d6:	d100      	bne.n	16da <__aeabi_fsub+0x25a>
    16d8:	e716      	b.n	1508 <__aeabi_fsub+0x88>
    16da:	199b      	adds	r3, r3, r6
    16dc:	015a      	lsls	r2, r3, #5
    16de:	d400      	bmi.n	16e2 <__aeabi_fsub+0x262>
    16e0:	e740      	b.n	1564 <__aeabi_fsub+0xe4>
    16e2:	4a2e      	ldr	r2, [pc, #184]	; (179c <__aeabi_fsub+0x31c>)
    16e4:	000c      	movs	r4, r1
    16e6:	4013      	ands	r3, r2
    16e8:	e70e      	b.n	1508 <__aeabi_fsub+0x88>
    16ea:	b9dc      	cbnz	r4, 1724 <__aeabi_fsub+0x2a4>
    16ec:	bb5b      	cbnz	r3, 1746 <__aeabi_fsub+0x2c6>
    16ee:	2e00      	cmp	r6, #0
    16f0:	d04b      	beq.n	178a <__aeabi_fsub+0x30a>
    16f2:	0033      	movs	r3, r6
    16f4:	000d      	movs	r5, r1
    16f6:	e707      	b.n	1508 <__aeabi_fsub+0x88>
    16f8:	2601      	movs	r6, #1
    16fa:	e758      	b.n	15ae <__aeabi_fsub+0x12e>
    16fc:	b9e4      	cbnz	r4, 1738 <__aeabi_fsub+0x2b8>
    16fe:	2b00      	cmp	r3, #0
    1700:	d040      	beq.n	1784 <__aeabi_fsub+0x304>
    1702:	43c9      	mvns	r1, r1
    1704:	b159      	cbz	r1, 171e <__aeabi_fsub+0x29e>
    1706:	28ff      	cmp	r0, #255	; 0xff
    1708:	d037      	beq.n	177a <__aeabi_fsub+0x2fa>
    170a:	291b      	cmp	r1, #27
    170c:	dc42      	bgt.n	1794 <__aeabi_fsub+0x314>
    170e:	001c      	movs	r4, r3
    1710:	2720      	movs	r7, #32
    1712:	40cc      	lsrs	r4, r1
    1714:	1a79      	subs	r1, r7, r1
    1716:	408b      	lsls	r3, r1
    1718:	1e59      	subs	r1, r3, #1
    171a:	418b      	sbcs	r3, r1
    171c:	4323      	orrs	r3, r4
    171e:	199b      	adds	r3, r3, r6
    1720:	0004      	movs	r4, r0
    1722:	e745      	b.n	15b0 <__aeabi_fsub+0x130>
    1724:	b9cb      	cbnz	r3, 175a <__aeabi_fsub+0x2da>
    1726:	bb26      	cbnz	r6, 1772 <__aeabi_fsub+0x2f2>
    1728:	2780      	movs	r7, #128	; 0x80
    172a:	2200      	movs	r2, #0
    172c:	03ff      	lsls	r7, r7, #15
    172e:	e723      	b.n	1578 <__aeabi_fsub+0xf8>
    1730:	0033      	movs	r3, r6
    1732:	0004      	movs	r4, r0
    1734:	000d      	movs	r5, r1
    1736:	e6e7      	b.n	1508 <__aeabi_fsub+0x88>
    1738:	28ff      	cmp	r0, #255	; 0xff
    173a:	d01e      	beq.n	177a <__aeabi_fsub+0x2fa>
    173c:	2480      	movs	r4, #128	; 0x80
    173e:	04e4      	lsls	r4, r4, #19
    1740:	4249      	negs	r1, r1
    1742:	4323      	orrs	r3, r4
    1744:	e7e1      	b.n	170a <__aeabi_fsub+0x28a>
    1746:	2e00      	cmp	r6, #0
    1748:	d100      	bne.n	174c <__aeabi_fsub+0x2cc>
    174a:	e6dd      	b.n	1508 <__aeabi_fsub+0x88>
    174c:	1b9f      	subs	r7, r3, r6
    174e:	017a      	lsls	r2, r7, #5
    1750:	d400      	bmi.n	1754 <__aeabi_fsub+0x2d4>
    1752:	e73e      	b.n	15d2 <__aeabi_fsub+0x152>
    1754:	1af3      	subs	r3, r6, r3
    1756:	000d      	movs	r5, r1
    1758:	e6d6      	b.n	1508 <__aeabi_fsub+0x88>
    175a:	24ff      	movs	r4, #255	; 0xff
    175c:	2e00      	cmp	r6, #0
    175e:	d100      	bne.n	1762 <__aeabi_fsub+0x2e2>
    1760:	e6d2      	b.n	1508 <__aeabi_fsub+0x88>
    1762:	2280      	movs	r2, #128	; 0x80
    1764:	4648      	mov	r0, r9
    1766:	03d2      	lsls	r2, r2, #15
    1768:	4210      	tst	r0, r2
    176a:	d0aa      	beq.n	16c2 <__aeabi_fsub+0x242>
    176c:	4660      	mov	r0, ip
    176e:	4210      	tst	r0, r2
    1770:	d1a7      	bne.n	16c2 <__aeabi_fsub+0x242>
    1772:	0033      	movs	r3, r6
    1774:	000d      	movs	r5, r1
    1776:	24ff      	movs	r4, #255	; 0xff
    1778:	e6c6      	b.n	1508 <__aeabi_fsub+0x88>
    177a:	0033      	movs	r3, r6
    177c:	24ff      	movs	r4, #255	; 0xff
    177e:	e6c3      	b.n	1508 <__aeabi_fsub+0x88>
    1780:	2301      	movs	r3, #1
    1782:	e774      	b.n	166e <__aeabi_fsub+0x1ee>
    1784:	0033      	movs	r3, r6
    1786:	0004      	movs	r4, r0
    1788:	e6be      	b.n	1508 <__aeabi_fsub+0x88>
    178a:	2700      	movs	r7, #0
    178c:	2200      	movs	r2, #0
    178e:	e724      	b.n	15da <__aeabi_fsub+0x15a>
    1790:	0033      	movs	r3, r6
    1792:	e6b9      	b.n	1508 <__aeabi_fsub+0x88>
    1794:	2301      	movs	r3, #1
    1796:	e7c2      	b.n	171e <__aeabi_fsub+0x29e>
    1798:	7dffffff 	.word	0x7dffffff
    179c:	fbffffff 	.word	0xfbffffff

000017a0 <__aeabi_f2iz>:
    17a0:	0241      	lsls	r1, r0, #9
    17a2:	0043      	lsls	r3, r0, #1
    17a4:	0fc2      	lsrs	r2, r0, #31
    17a6:	0a49      	lsrs	r1, r1, #9
    17a8:	0e1b      	lsrs	r3, r3, #24
    17aa:	2000      	movs	r0, #0
    17ac:	2b7e      	cmp	r3, #126	; 0x7e
    17ae:	dd0c      	ble.n	17ca <__aeabi_f2iz+0x2a>
    17b0:	2b9d      	cmp	r3, #157	; 0x9d
    17b2:	dc0b      	bgt.n	17cc <__aeabi_f2iz+0x2c>
    17b4:	2080      	movs	r0, #128	; 0x80
    17b6:	0400      	lsls	r0, r0, #16
    17b8:	4301      	orrs	r1, r0
    17ba:	2b95      	cmp	r3, #149	; 0x95
    17bc:	dc09      	bgt.n	17d2 <__aeabi_f2iz+0x32>
    17be:	2096      	movs	r0, #150	; 0x96
    17c0:	1ac3      	subs	r3, r0, r3
    17c2:	40d9      	lsrs	r1, r3
    17c4:	4248      	negs	r0, r1
    17c6:	b902      	cbnz	r2, 17ca <__aeabi_f2iz+0x2a>
    17c8:	0008      	movs	r0, r1
    17ca:	4770      	bx	lr
    17cc:	4b02      	ldr	r3, [pc, #8]	; (17d8 <__aeabi_f2iz+0x38>)
    17ce:	18d0      	adds	r0, r2, r3
    17d0:	e7fb      	b.n	17ca <__aeabi_f2iz+0x2a>
    17d2:	3b96      	subs	r3, #150	; 0x96
    17d4:	4099      	lsls	r1, r3
    17d6:	e7f5      	b.n	17c4 <__aeabi_f2iz+0x24>
    17d8:	7fffffff 	.word	0x7fffffff

000017dc <__aeabi_i2f>:
    17dc:	b570      	push	{r4, r5, r6, lr}
    17de:	2800      	cmp	r0, #0
    17e0:	d030      	beq.n	1844 <__aeabi_i2f+0x68>
    17e2:	17c3      	asrs	r3, r0, #31
    17e4:	18c4      	adds	r4, r0, r3
    17e6:	405c      	eors	r4, r3
    17e8:	0fc5      	lsrs	r5, r0, #31
    17ea:	0020      	movs	r0, r4
    17ec:	f000 ff96 	bl	271c <__clzsi2>
    17f0:	239e      	movs	r3, #158	; 0x9e
    17f2:	1a1b      	subs	r3, r3, r0
    17f4:	2b96      	cmp	r3, #150	; 0x96
    17f6:	dc0d      	bgt.n	1814 <__aeabi_i2f+0x38>
    17f8:	2296      	movs	r2, #150	; 0x96
    17fa:	1ad2      	subs	r2, r2, r3
    17fc:	4094      	lsls	r4, r2
    17fe:	002a      	movs	r2, r5
    1800:	0264      	lsls	r4, r4, #9
    1802:	0a64      	lsrs	r4, r4, #9
    1804:	b2db      	uxtb	r3, r3
    1806:	0264      	lsls	r4, r4, #9
    1808:	05db      	lsls	r3, r3, #23
    180a:	0a60      	lsrs	r0, r4, #9
    180c:	07d2      	lsls	r2, r2, #31
    180e:	4318      	orrs	r0, r3
    1810:	4310      	orrs	r0, r2
    1812:	bd70      	pop	{r4, r5, r6, pc}
    1814:	2b99      	cmp	r3, #153	; 0x99
    1816:	dc19      	bgt.n	184c <__aeabi_i2f+0x70>
    1818:	2299      	movs	r2, #153	; 0x99
    181a:	1ad2      	subs	r2, r2, r3
    181c:	2a00      	cmp	r2, #0
    181e:	dd29      	ble.n	1874 <__aeabi_i2f+0x98>
    1820:	4094      	lsls	r4, r2
    1822:	0022      	movs	r2, r4
    1824:	4c14      	ldr	r4, [pc, #80]	; (1878 <__aeabi_i2f+0x9c>)
    1826:	4014      	ands	r4, r2
    1828:	0751      	lsls	r1, r2, #29
    182a:	d004      	beq.n	1836 <__aeabi_i2f+0x5a>
    182c:	210f      	movs	r1, #15
    182e:	400a      	ands	r2, r1
    1830:	2a04      	cmp	r2, #4
    1832:	d000      	beq.n	1836 <__aeabi_i2f+0x5a>
    1834:	3404      	adds	r4, #4
    1836:	0162      	lsls	r2, r4, #5
    1838:	d413      	bmi.n	1862 <__aeabi_i2f+0x86>
    183a:	01a4      	lsls	r4, r4, #6
    183c:	0a64      	lsrs	r4, r4, #9
    183e:	b2db      	uxtb	r3, r3
    1840:	002a      	movs	r2, r5
    1842:	e7e0      	b.n	1806 <__aeabi_i2f+0x2a>
    1844:	2200      	movs	r2, #0
    1846:	2300      	movs	r3, #0
    1848:	2400      	movs	r4, #0
    184a:	e7dc      	b.n	1806 <__aeabi_i2f+0x2a>
    184c:	2205      	movs	r2, #5
    184e:	0021      	movs	r1, r4
    1850:	1a12      	subs	r2, r2, r0
    1852:	40d1      	lsrs	r1, r2
    1854:	22b9      	movs	r2, #185	; 0xb9
    1856:	1ad2      	subs	r2, r2, r3
    1858:	4094      	lsls	r4, r2
    185a:	1e62      	subs	r2, r4, #1
    185c:	4194      	sbcs	r4, r2
    185e:	430c      	orrs	r4, r1
    1860:	e7da      	b.n	1818 <__aeabi_i2f+0x3c>
    1862:	4b05      	ldr	r3, [pc, #20]	; (1878 <__aeabi_i2f+0x9c>)
    1864:	002a      	movs	r2, r5
    1866:	401c      	ands	r4, r3
    1868:	239f      	movs	r3, #159	; 0x9f
    186a:	01a4      	lsls	r4, r4, #6
    186c:	1a1b      	subs	r3, r3, r0
    186e:	0a64      	lsrs	r4, r4, #9
    1870:	b2db      	uxtb	r3, r3
    1872:	e7c8      	b.n	1806 <__aeabi_i2f+0x2a>
    1874:	0022      	movs	r2, r4
    1876:	e7d5      	b.n	1824 <__aeabi_i2f+0x48>
    1878:	fbffffff 	.word	0xfbffffff

0000187c <__aeabi_ui2f>:
    187c:	b510      	push	{r4, lr}
    187e:	0004      	movs	r4, r0
    1880:	b338      	cbz	r0, 18d2 <__aeabi_ui2f+0x56>
    1882:	f000 ff4b 	bl	271c <__clzsi2>
    1886:	239e      	movs	r3, #158	; 0x9e
    1888:	1a1b      	subs	r3, r3, r0
    188a:	2b96      	cmp	r3, #150	; 0x96
    188c:	dc0a      	bgt.n	18a4 <__aeabi_ui2f+0x28>
    188e:	2296      	movs	r2, #150	; 0x96
    1890:	1ad2      	subs	r2, r2, r3
    1892:	4094      	lsls	r4, r2
    1894:	0264      	lsls	r4, r4, #9
    1896:	0a64      	lsrs	r4, r4, #9
    1898:	b2db      	uxtb	r3, r3
    189a:	0264      	lsls	r4, r4, #9
    189c:	05db      	lsls	r3, r3, #23
    189e:	0a60      	lsrs	r0, r4, #9
    18a0:	4318      	orrs	r0, r3
    18a2:	bd10      	pop	{r4, pc}
    18a4:	2b99      	cmp	r3, #153	; 0x99
    18a6:	dc17      	bgt.n	18d8 <__aeabi_ui2f+0x5c>
    18a8:	2299      	movs	r2, #153	; 0x99
    18aa:	1ad2      	subs	r2, r2, r3
    18ac:	2a00      	cmp	r2, #0
    18ae:	dd27      	ble.n	1900 <__aeabi_ui2f+0x84>
    18b0:	4094      	lsls	r4, r2
    18b2:	0022      	movs	r2, r4
    18b4:	4c13      	ldr	r4, [pc, #76]	; (1904 <__aeabi_ui2f+0x88>)
    18b6:	4014      	ands	r4, r2
    18b8:	0751      	lsls	r1, r2, #29
    18ba:	d004      	beq.n	18c6 <__aeabi_ui2f+0x4a>
    18bc:	210f      	movs	r1, #15
    18be:	400a      	ands	r2, r1
    18c0:	2a04      	cmp	r2, #4
    18c2:	d000      	beq.n	18c6 <__aeabi_ui2f+0x4a>
    18c4:	3404      	adds	r4, #4
    18c6:	0162      	lsls	r2, r4, #5
    18c8:	d412      	bmi.n	18f0 <__aeabi_ui2f+0x74>
    18ca:	01a4      	lsls	r4, r4, #6
    18cc:	0a64      	lsrs	r4, r4, #9
    18ce:	b2db      	uxtb	r3, r3
    18d0:	e7e3      	b.n	189a <__aeabi_ui2f+0x1e>
    18d2:	2300      	movs	r3, #0
    18d4:	2400      	movs	r4, #0
    18d6:	e7e0      	b.n	189a <__aeabi_ui2f+0x1e>
    18d8:	22b9      	movs	r2, #185	; 0xb9
    18da:	0021      	movs	r1, r4
    18dc:	1ad2      	subs	r2, r2, r3
    18de:	4091      	lsls	r1, r2
    18e0:	000a      	movs	r2, r1
    18e2:	1e51      	subs	r1, r2, #1
    18e4:	418a      	sbcs	r2, r1
    18e6:	2105      	movs	r1, #5
    18e8:	1a09      	subs	r1, r1, r0
    18ea:	40cc      	lsrs	r4, r1
    18ec:	4314      	orrs	r4, r2
    18ee:	e7db      	b.n	18a8 <__aeabi_ui2f+0x2c>
    18f0:	4b04      	ldr	r3, [pc, #16]	; (1904 <__aeabi_ui2f+0x88>)
    18f2:	401c      	ands	r4, r3
    18f4:	239f      	movs	r3, #159	; 0x9f
    18f6:	01a4      	lsls	r4, r4, #6
    18f8:	1a1b      	subs	r3, r3, r0
    18fa:	0a64      	lsrs	r4, r4, #9
    18fc:	b2db      	uxtb	r3, r3
    18fe:	e7cc      	b.n	189a <__aeabi_ui2f+0x1e>
    1900:	0022      	movs	r2, r4
    1902:	e7d7      	b.n	18b4 <__aeabi_ui2f+0x38>
    1904:	fbffffff 	.word	0xfbffffff

00001908 <__aeabi_ddiv>:
    1908:	b5f0      	push	{r4, r5, r6, r7, lr}
    190a:	4657      	mov	r7, sl
    190c:	4645      	mov	r5, r8
    190e:	46de      	mov	lr, fp
    1910:	464e      	mov	r6, r9
    1912:	b5e0      	push	{r5, r6, r7, lr}
    1914:	004c      	lsls	r4, r1, #1
    1916:	001e      	movs	r6, r3
    1918:	030f      	lsls	r7, r1, #12
    191a:	0fcb      	lsrs	r3, r1, #31
    191c:	0d64      	lsrs	r4, r4, #21
    191e:	b085      	sub	sp, #20
    1920:	4683      	mov	fp, r0
    1922:	4692      	mov	sl, r2
    1924:	0005      	movs	r5, r0
    1926:	0b3f      	lsrs	r7, r7, #12
    1928:	4698      	mov	r8, r3
    192a:	2c00      	cmp	r4, #0
    192c:	d053      	beq.n	19d6 <__aeabi_ddiv+0xce>
    192e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    1932:	429c      	cmp	r4, r3
    1934:	d035      	beq.n	19a2 <__aeabi_ddiv+0x9a>
    1936:	2380      	movs	r3, #128	; 0x80
    1938:	0f42      	lsrs	r2, r0, #29
    193a:	041b      	lsls	r3, r3, #16
    193c:	00ff      	lsls	r7, r7, #3
    193e:	4313      	orrs	r3, r2
    1940:	433b      	orrs	r3, r7
    1942:	4699      	mov	r9, r3
    1944:	4b71      	ldr	r3, [pc, #452]	; (1b0c <__aeabi_ddiv+0x204>)
    1946:	2700      	movs	r7, #0
    1948:	469c      	mov	ip, r3
    194a:	2300      	movs	r3, #0
    194c:	00c5      	lsls	r5, r0, #3
    194e:	4464      	add	r4, ip
    1950:	9302      	str	r3, [sp, #8]
    1952:	0333      	lsls	r3, r6, #12
    1954:	0b1b      	lsrs	r3, r3, #12
    1956:	469b      	mov	fp, r3
    1958:	0073      	lsls	r3, r6, #1
    195a:	0d5b      	lsrs	r3, r3, #21
    195c:	0ff6      	lsrs	r6, r6, #31
    195e:	4650      	mov	r0, sl
    1960:	9601      	str	r6, [sp, #4]
    1962:	2b00      	cmp	r3, #0
    1964:	d063      	beq.n	1a2e <__aeabi_ddiv+0x126>
    1966:	f240 72ff 	movw	r2, #2047	; 0x7ff
    196a:	4293      	cmp	r3, r2
    196c:	d055      	beq.n	1a1a <__aeabi_ddiv+0x112>
    196e:	465a      	mov	r2, fp
    1970:	00d1      	lsls	r1, r2, #3
    1972:	2280      	movs	r2, #128	; 0x80
    1974:	0f40      	lsrs	r0, r0, #29
    1976:	0412      	lsls	r2, r2, #16
    1978:	4302      	orrs	r2, r0
    197a:	430a      	orrs	r2, r1
    197c:	4963      	ldr	r1, [pc, #396]	; (1b0c <__aeabi_ddiv+0x204>)
    197e:	4693      	mov	fp, r2
    1980:	4652      	mov	r2, sl
    1982:	1858      	adds	r0, r3, r1
    1984:	2100      	movs	r1, #0
    1986:	00d2      	lsls	r2, r2, #3
    1988:	4643      	mov	r3, r8
    198a:	1a20      	subs	r0, r4, r0
    198c:	4073      	eors	r3, r6
    198e:	469c      	mov	ip, r3
    1990:	9000      	str	r0, [sp, #0]
    1992:	430f      	orrs	r7, r1
    1994:	2f0f      	cmp	r7, #15
    1996:	d900      	bls.n	199a <__aeabi_ddiv+0x92>
    1998:	e0be      	b.n	1b18 <__aeabi_ddiv+0x210>
    199a:	485d      	ldr	r0, [pc, #372]	; (1b10 <__aeabi_ddiv+0x208>)
    199c:	00bf      	lsls	r7, r7, #2
    199e:	59c0      	ldr	r0, [r0, r7]
    19a0:	4687      	mov	pc, r0
    19a2:	0003      	movs	r3, r0
    19a4:	433b      	orrs	r3, r7
    19a6:	4699      	mov	r9, r3
    19a8:	2b00      	cmp	r3, #0
    19aa:	d175      	bne.n	1a98 <__aeabi_ddiv+0x190>
    19ac:	2302      	movs	r3, #2
    19ae:	2500      	movs	r5, #0
    19b0:	2708      	movs	r7, #8
    19b2:	f240 74ff 	movw	r4, #2047	; 0x7ff
    19b6:	9302      	str	r3, [sp, #8]
    19b8:	e7cb      	b.n	1952 <__aeabi_ddiv+0x4a>
    19ba:	4643      	mov	r3, r8
    19bc:	46cb      	mov	fp, r9
    19be:	002a      	movs	r2, r5
    19c0:	9902      	ldr	r1, [sp, #8]
    19c2:	9301      	str	r3, [sp, #4]
    19c4:	2902      	cmp	r1, #2
    19c6:	d000      	beq.n	19ca <__aeabi_ddiv+0xc2>
    19c8:	e1bd      	b.n	1d46 <__aeabi_ddiv+0x43e>
    19ca:	9b01      	ldr	r3, [sp, #4]
    19cc:	f240 76ff 	movw	r6, #2047	; 0x7ff
    19d0:	2400      	movs	r4, #0
    19d2:	2500      	movs	r5, #0
    19d4:	e06d      	b.n	1ab2 <__aeabi_ddiv+0x1aa>
    19d6:	0003      	movs	r3, r0
    19d8:	433b      	orrs	r3, r7
    19da:	4699      	mov	r9, r3
    19dc:	2b00      	cmp	r3, #0
    19de:	d055      	beq.n	1a8c <__aeabi_ddiv+0x184>
    19e0:	2f00      	cmp	r7, #0
    19e2:	d100      	bne.n	19e6 <__aeabi_ddiv+0xde>
    19e4:	e1c8      	b.n	1d78 <__aeabi_ddiv+0x470>
    19e6:	0038      	movs	r0, r7
    19e8:	f000 fe98 	bl	271c <__clzsi2>
    19ec:	0003      	movs	r3, r0
    19ee:	3b0b      	subs	r3, #11
    19f0:	2b1c      	cmp	r3, #28
    19f2:	dd00      	ble.n	19f6 <__aeabi_ddiv+0xee>
    19f4:	e1b9      	b.n	1d6a <__aeabi_ddiv+0x462>
    19f6:	221d      	movs	r2, #29
    19f8:	1ad3      	subs	r3, r2, r3
    19fa:	465a      	mov	r2, fp
    19fc:	0001      	movs	r1, r0
    19fe:	40da      	lsrs	r2, r3
    1a00:	3908      	subs	r1, #8
    1a02:	408f      	lsls	r7, r1
    1a04:	0013      	movs	r3, r2
    1a06:	465d      	mov	r5, fp
    1a08:	433b      	orrs	r3, r7
    1a0a:	4699      	mov	r9, r3
    1a0c:	408d      	lsls	r5, r1
    1a0e:	2300      	movs	r3, #0
    1a10:	4c40      	ldr	r4, [pc, #256]	; (1b14 <__aeabi_ddiv+0x20c>)
    1a12:	2700      	movs	r7, #0
    1a14:	1a24      	subs	r4, r4, r0
    1a16:	9302      	str	r3, [sp, #8]
    1a18:	e79b      	b.n	1952 <__aeabi_ddiv+0x4a>
    1a1a:	4652      	mov	r2, sl
    1a1c:	465b      	mov	r3, fp
    1a1e:	431a      	orrs	r2, r3
    1a20:	bb7a      	cbnz	r2, 1a82 <__aeabi_ddiv+0x17a>
    1a22:	f240 0b00 	movw	fp, #0
    1a26:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1a2a:	2102      	movs	r1, #2
    1a2c:	e7ac      	b.n	1988 <__aeabi_ddiv+0x80>
    1a2e:	465a      	mov	r2, fp
    1a30:	4302      	orrs	r2, r0
    1a32:	b30a      	cbz	r2, 1a78 <__aeabi_ddiv+0x170>
    1a34:	465b      	mov	r3, fp
    1a36:	2b00      	cmp	r3, #0
    1a38:	d100      	bne.n	1a3c <__aeabi_ddiv+0x134>
    1a3a:	e1a8      	b.n	1d8e <__aeabi_ddiv+0x486>
    1a3c:	4658      	mov	r0, fp
    1a3e:	f000 fe6d 	bl	271c <__clzsi2>
    1a42:	0003      	movs	r3, r0
    1a44:	3b0b      	subs	r3, #11
    1a46:	2b1c      	cmp	r3, #28
    1a48:	dd00      	ble.n	1a4c <__aeabi_ddiv+0x144>
    1a4a:	e199      	b.n	1d80 <__aeabi_ddiv+0x478>
    1a4c:	0002      	movs	r2, r0
    1a4e:	4659      	mov	r1, fp
    1a50:	3a08      	subs	r2, #8
    1a52:	4091      	lsls	r1, r2
    1a54:	f240 0c1d 	movw	ip, #29
    1a58:	468b      	mov	fp, r1
    1a5a:	4661      	mov	r1, ip
    1a5c:	1acb      	subs	r3, r1, r3
    1a5e:	4651      	mov	r1, sl
    1a60:	40d9      	lsrs	r1, r3
    1a62:	000b      	movs	r3, r1
    1a64:	4659      	mov	r1, fp
    1a66:	430b      	orrs	r3, r1
    1a68:	469b      	mov	fp, r3
    1a6a:	4653      	mov	r3, sl
    1a6c:	4093      	lsls	r3, r2
    1a6e:	001a      	movs	r2, r3
    1a70:	4b28      	ldr	r3, [pc, #160]	; (1b14 <__aeabi_ddiv+0x20c>)
    1a72:	2100      	movs	r1, #0
    1a74:	1a18      	subs	r0, r3, r0
    1a76:	e787      	b.n	1988 <__aeabi_ddiv+0x80>
    1a78:	f240 0b00 	movw	fp, #0
    1a7c:	2000      	movs	r0, #0
    1a7e:	2101      	movs	r1, #1
    1a80:	e782      	b.n	1988 <__aeabi_ddiv+0x80>
    1a82:	4652      	mov	r2, sl
    1a84:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1a88:	2103      	movs	r1, #3
    1a8a:	e77d      	b.n	1988 <__aeabi_ddiv+0x80>
    1a8c:	2301      	movs	r3, #1
    1a8e:	2500      	movs	r5, #0
    1a90:	2704      	movs	r7, #4
    1a92:	2400      	movs	r4, #0
    1a94:	9302      	str	r3, [sp, #8]
    1a96:	e75c      	b.n	1952 <__aeabi_ddiv+0x4a>
    1a98:	2303      	movs	r3, #3
    1a9a:	46b9      	mov	r9, r7
    1a9c:	f240 74ff 	movw	r4, #2047	; 0x7ff
    1aa0:	270c      	movs	r7, #12
    1aa2:	9302      	str	r3, [sp, #8]
    1aa4:	e755      	b.n	1952 <__aeabi_ddiv+0x4a>
    1aa6:	2480      	movs	r4, #128	; 0x80
    1aa8:	2300      	movs	r3, #0
    1aaa:	2500      	movs	r5, #0
    1aac:	0324      	lsls	r4, r4, #12
    1aae:	f240 76ff 	movw	r6, #2047	; 0x7ff
    1ab2:	2100      	movs	r1, #0
    1ab4:	0028      	movs	r0, r5
    1ab6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    1aba:	0324      	lsls	r4, r4, #12
    1abc:	0b22      	lsrs	r2, r4, #12
    1abe:	0d0c      	lsrs	r4, r1, #20
    1ac0:	0524      	lsls	r4, r4, #20
    1ac2:	4314      	orrs	r4, r2
    1ac4:	f2c8 050f 	movt	r5, #32783	; 0x800f
    1ac8:	0532      	lsls	r2, r6, #20
    1aca:	402c      	ands	r4, r5
    1acc:	4322      	orrs	r2, r4
    1ace:	0052      	lsls	r2, r2, #1
    1ad0:	07db      	lsls	r3, r3, #31
    1ad2:	0852      	lsrs	r2, r2, #1
    1ad4:	431a      	orrs	r2, r3
    1ad6:	0011      	movs	r1, r2
    1ad8:	b005      	add	sp, #20
    1ada:	bc3c      	pop	{r2, r3, r4, r5}
    1adc:	4690      	mov	r8, r2
    1ade:	4699      	mov	r9, r3
    1ae0:	46a2      	mov	sl, r4
    1ae2:	46ab      	mov	fp, r5
    1ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ae6:	2201      	movs	r2, #1
    1ae8:	4252      	negs	r2, r2
    1aea:	2301      	movs	r3, #1
    1aec:	1b99      	subs	r1, r3, r6
    1aee:	2938      	cmp	r1, #56	; 0x38
    1af0:	dc00      	bgt.n	1af4 <__aeabi_ddiv+0x1ec>
    1af2:	e1bc      	b.n	1e6e <__aeabi_ddiv+0x566>
    1af4:	4662      	mov	r2, ip
    1af6:	4013      	ands	r3, r2
    1af8:	2600      	movs	r6, #0
    1afa:	2400      	movs	r4, #0
    1afc:	2500      	movs	r5, #0
    1afe:	e7d8      	b.n	1ab2 <__aeabi_ddiv+0x1aa>
    1b00:	f240 76ff 	movw	r6, #2047	; 0x7ff
    1b04:	2400      	movs	r4, #0
    1b06:	2500      	movs	r5, #0
    1b08:	e7d3      	b.n	1ab2 <__aeabi_ddiv+0x1aa>
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	fffffc01 	.word	0xfffffc01
    1b10:	00002998 	.word	0x00002998
    1b14:	fffffc0d 	.word	0xfffffc0d
    1b18:	45d9      	cmp	r9, fp
    1b1a:	d900      	bls.n	1b1e <__aeabi_ddiv+0x216>
    1b1c:	e13e      	b.n	1d9c <__aeabi_ddiv+0x494>
    1b1e:	d100      	bne.n	1b22 <__aeabi_ddiv+0x21a>
    1b20:	e139      	b.n	1d96 <__aeabi_ddiv+0x48e>
    1b22:	9b00      	ldr	r3, [sp, #0]
    1b24:	002f      	movs	r7, r5
    1b26:	3b01      	subs	r3, #1
    1b28:	9300      	str	r3, [sp, #0]
    1b2a:	2500      	movs	r5, #0
    1b2c:	464b      	mov	r3, r9
    1b2e:	4659      	mov	r1, fp
    1b30:	0e10      	lsrs	r0, r2, #24
    1b32:	0209      	lsls	r1, r1, #8
    1b34:	4301      	orrs	r1, r0
    1b36:	0c08      	lsrs	r0, r1, #16
    1b38:	0216      	lsls	r6, r2, #8
    1b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1b3e:	fbb3 f8f0 	udiv	r8, r3, r0
    1b42:	400a      	ands	r2, r1
    1b44:	0014      	movs	r4, r2
    1b46:	9201      	str	r2, [sp, #4]
    1b48:	4642      	mov	r2, r8
    1b4a:	4362      	muls	r2, r4
    1b4c:	4644      	mov	r4, r8
    1b4e:	4344      	muls	r4, r0
    1b50:	1b1b      	subs	r3, r3, r4
    1b52:	041b      	lsls	r3, r3, #16
    1b54:	4699      	mov	r9, r3
    1b56:	464c      	mov	r4, r9
    1b58:	0c3b      	lsrs	r3, r7, #16
    1b5a:	4323      	orrs	r3, r4
    1b5c:	429a      	cmp	r2, r3
    1b5e:	d90f      	bls.n	1b80 <__aeabi_ddiv+0x278>
    1b60:	2401      	movs	r4, #1
    1b62:	4264      	negs	r4, r4
    1b64:	4444      	add	r4, r8
    1b66:	185b      	adds	r3, r3, r1
    1b68:	46a1      	mov	r9, r4
    1b6a:	4299      	cmp	r1, r3
    1b6c:	d900      	bls.n	1b70 <__aeabi_ddiv+0x268>
    1b6e:	e13d      	b.n	1dec <__aeabi_ddiv+0x4e4>
    1b70:	429a      	cmp	r2, r3
    1b72:	d800      	bhi.n	1b76 <__aeabi_ddiv+0x26e>
    1b74:	e13a      	b.n	1dec <__aeabi_ddiv+0x4e4>
    1b76:	2402      	movs	r4, #2
    1b78:	4264      	negs	r4, r4
    1b7a:	46a1      	mov	r9, r4
    1b7c:	185b      	adds	r3, r3, r1
    1b7e:	44c8      	add	r8, r9
    1b80:	1a9b      	subs	r3, r3, r2
    1b82:	fbb3 fbf0 	udiv	fp, r3, r0
    1b86:	465a      	mov	r2, fp
    1b88:	9c01      	ldr	r4, [sp, #4]
    1b8a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    1b8e:	4362      	muls	r2, r4
    1b90:	465c      	mov	r4, fp
    1b92:	4344      	muls	r4, r0
    1b94:	1b1b      	subs	r3, r3, r4
    1b96:	4654      	mov	r4, sl
    1b98:	041b      	lsls	r3, r3, #16
    1b9a:	403c      	ands	r4, r7
    1b9c:	4323      	orrs	r3, r4
    1b9e:	429a      	cmp	r2, r3
    1ba0:	d90d      	bls.n	1bbe <__aeabi_ddiv+0x2b6>
    1ba2:	465c      	mov	r4, fp
    1ba4:	185b      	adds	r3, r3, r1
    1ba6:	1e67      	subs	r7, r4, #1
    1ba8:	4299      	cmp	r1, r3
    1baa:	d900      	bls.n	1bae <__aeabi_ddiv+0x2a6>
    1bac:	e120      	b.n	1df0 <__aeabi_ddiv+0x4e8>
    1bae:	429a      	cmp	r2, r3
    1bb0:	d800      	bhi.n	1bb4 <__aeabi_ddiv+0x2ac>
    1bb2:	e11d      	b.n	1df0 <__aeabi_ddiv+0x4e8>
    1bb4:	2402      	movs	r4, #2
    1bb6:	4264      	negs	r4, r4
    1bb8:	46a1      	mov	r9, r4
    1bba:	185b      	adds	r3, r3, r1
    1bbc:	44cb      	add	fp, r9
    1bbe:	1a9a      	subs	r2, r3, r2
    1bc0:	4643      	mov	r3, r8
    1bc2:	465c      	mov	r4, fp
    1bc4:	f64f 78ff 	movw	r8, #65535	; 0xffff
    1bc8:	041b      	lsls	r3, r3, #16
    1bca:	431c      	orrs	r4, r3
    1bcc:	0c33      	lsrs	r3, r6, #16
    1bce:	469a      	mov	sl, r3
    1bd0:	4643      	mov	r3, r8
    1bd2:	0c27      	lsrs	r7, r4, #16
    1bd4:	4023      	ands	r3, r4
    1bd6:	46a3      	mov	fp, r4
    1bd8:	4644      	mov	r4, r8
    1bda:	4034      	ands	r4, r6
    1bdc:	9403      	str	r4, [sp, #12]
    1bde:	435c      	muls	r4, r3
    1be0:	9402      	str	r4, [sp, #8]
    1be2:	9c03      	ldr	r4, [sp, #12]
    1be4:	437c      	muls	r4, r7
    1be6:	46a1      	mov	r9, r4
    1be8:	4654      	mov	r4, sl
    1bea:	4363      	muls	r3, r4
    1bec:	4367      	muls	r7, r4
    1bee:	9c02      	ldr	r4, [sp, #8]
    1bf0:	444b      	add	r3, r9
    1bf2:	0c24      	lsrs	r4, r4, #16
    1bf4:	46a0      	mov	r8, r4
    1bf6:	4443      	add	r3, r8
    1bf8:	4599      	cmp	r9, r3
    1bfa:	d903      	bls.n	1c04 <__aeabi_ddiv+0x2fc>
    1bfc:	2480      	movs	r4, #128	; 0x80
    1bfe:	0264      	lsls	r4, r4, #9
    1c00:	46a0      	mov	r8, r4
    1c02:	4447      	add	r7, r8
    1c04:	0c1c      	lsrs	r4, r3, #16
    1c06:	46a1      	mov	r9, r4
    1c08:	44b9      	add	r9, r7
    1c0a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1c0e:	9c02      	ldr	r4, [sp, #8]
    1c10:	041b      	lsls	r3, r3, #16
    1c12:	4027      	ands	r7, r4
    1c14:	19db      	adds	r3, r3, r7
    1c16:	454a      	cmp	r2, r9
    1c18:	d200      	bcs.n	1c1c <__aeabi_ddiv+0x314>
    1c1a:	e0cb      	b.n	1db4 <__aeabi_ddiv+0x4ac>
    1c1c:	d100      	bne.n	1c20 <__aeabi_ddiv+0x318>
    1c1e:	e0c5      	b.n	1dac <__aeabi_ddiv+0x4a4>
    1c20:	464c      	mov	r4, r9
    1c22:	1b17      	subs	r7, r2, r4
    1c24:	1aeb      	subs	r3, r5, r3
    1c26:	429d      	cmp	r5, r3
    1c28:	41ad      	sbcs	r5, r5
    1c2a:	426d      	negs	r5, r5
    1c2c:	1b7f      	subs	r7, r7, r5
    1c2e:	42b9      	cmp	r1, r7
    1c30:	d100      	bne.n	1c34 <__aeabi_ddiv+0x32c>
    1c32:	e107      	b.n	1e44 <__aeabi_ddiv+0x53c>
    1c34:	fbb7 f2f0 	udiv	r2, r7, r0
    1c38:	0004      	movs	r4, r0
    1c3a:	9d01      	ldr	r5, [sp, #4]
    1c3c:	4354      	muls	r4, r2
    1c3e:	4355      	muls	r5, r2
    1c40:	1b3f      	subs	r7, r7, r4
    1c42:	043f      	lsls	r7, r7, #16
    1c44:	0c1c      	lsrs	r4, r3, #16
    1c46:	4327      	orrs	r7, r4
    1c48:	42bd      	cmp	r5, r7
    1c4a:	d90a      	bls.n	1c62 <__aeabi_ddiv+0x35a>
    1c4c:	1e54      	subs	r4, r2, #1
    1c4e:	187f      	adds	r7, r7, r1
    1c50:	46a0      	mov	r8, r4
    1c52:	42b9      	cmp	r1, r7
    1c54:	d900      	bls.n	1c58 <__aeabi_ddiv+0x350>
    1c56:	e0ff      	b.n	1e58 <__aeabi_ddiv+0x550>
    1c58:	42bd      	cmp	r5, r7
    1c5a:	d800      	bhi.n	1c5e <__aeabi_ddiv+0x356>
    1c5c:	e0fc      	b.n	1e58 <__aeabi_ddiv+0x550>
    1c5e:	3a02      	subs	r2, #2
    1c60:	187f      	adds	r7, r7, r1
    1c62:	1b7f      	subs	r7, r7, r5
    1c64:	fbb7 f5f0 	udiv	r5, r7, r0
    1c68:	4368      	muls	r0, r5
    1c6a:	1a3f      	subs	r7, r7, r0
    1c6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1c70:	9c01      	ldr	r4, [sp, #4]
    1c72:	043f      	lsls	r7, r7, #16
    1c74:	436c      	muls	r4, r5
    1c76:	4003      	ands	r3, r0
    1c78:	46a0      	mov	r8, r4
    1c7a:	433b      	orrs	r3, r7
    1c7c:	429c      	cmp	r4, r3
    1c7e:	d909      	bls.n	1c94 <__aeabi_ddiv+0x38c>
    1c80:	185b      	adds	r3, r3, r1
    1c82:	1e68      	subs	r0, r5, #1
    1c84:	4299      	cmp	r1, r3
    1c86:	d900      	bls.n	1c8a <__aeabi_ddiv+0x382>
    1c88:	e0e8      	b.n	1e5c <__aeabi_ddiv+0x554>
    1c8a:	429c      	cmp	r4, r3
    1c8c:	d800      	bhi.n	1c90 <__aeabi_ddiv+0x388>
    1c8e:	e0e5      	b.n	1e5c <__aeabi_ddiv+0x554>
    1c90:	3d02      	subs	r5, #2
    1c92:	185b      	adds	r3, r3, r1
    1c94:	4640      	mov	r0, r8
    1c96:	0412      	lsls	r2, r2, #16
    1c98:	432a      	orrs	r2, r5
    1c9a:	9c03      	ldr	r4, [sp, #12]
    1c9c:	0c15      	lsrs	r5, r2, #16
    1c9e:	1a1b      	subs	r3, r3, r0
    1ca0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1ca4:	0027      	movs	r7, r4
    1ca6:	436c      	muls	r4, r5
    1ca8:	46a0      	mov	r8, r4
    1caa:	4654      	mov	r4, sl
    1cac:	4010      	ands	r0, r2
    1cae:	4347      	muls	r7, r0
    1cb0:	4365      	muls	r5, r4
    1cb2:	4360      	muls	r0, r4
    1cb4:	0c3c      	lsrs	r4, r7, #16
    1cb6:	46a1      	mov	r9, r4
    1cb8:	4440      	add	r0, r8
    1cba:	4448      	add	r0, r9
    1cbc:	4580      	cmp	r8, r0
    1cbe:	d903      	bls.n	1cc8 <__aeabi_ddiv+0x3c0>
    1cc0:	2480      	movs	r4, #128	; 0x80
    1cc2:	0264      	lsls	r4, r4, #9
    1cc4:	46a0      	mov	r8, r4
    1cc6:	4445      	add	r5, r8
    1cc8:	0c04      	lsrs	r4, r0, #16
    1cca:	46a0      	mov	r8, r4
    1ccc:	4445      	add	r5, r8
    1cce:	f64f 78ff 	movw	r8, #65535	; 0xffff
    1cd2:	4644      	mov	r4, r8
    1cd4:	0400      	lsls	r0, r0, #16
    1cd6:	403c      	ands	r4, r7
    1cd8:	1900      	adds	r0, r0, r4
    1cda:	42ab      	cmp	r3, r5
    1cdc:	d200      	bcs.n	1ce0 <__aeabi_ddiv+0x3d8>
    1cde:	e099      	b.n	1e14 <__aeabi_ddiv+0x50c>
    1ce0:	d100      	bne.n	1ce4 <__aeabi_ddiv+0x3dc>
    1ce2:	e094      	b.n	1e0e <__aeabi_ddiv+0x506>
    1ce4:	2301      	movs	r3, #1
    1ce6:	431a      	orrs	r2, r3
    1ce8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1cec:	9900      	ldr	r1, [sp, #0]
    1cee:	18ce      	adds	r6, r1, r3
    1cf0:	2e00      	cmp	r6, #0
    1cf2:	dc00      	bgt.n	1cf6 <__aeabi_ddiv+0x3ee>
    1cf4:	e6f9      	b.n	1aea <__aeabi_ddiv+0x1e2>
    1cf6:	0753      	lsls	r3, r2, #29
    1cf8:	d000      	beq.n	1cfc <__aeabi_ddiv+0x3f4>
    1cfa:	e097      	b.n	1e2c <__aeabi_ddiv+0x524>
    1cfc:	465b      	mov	r3, fp
    1cfe:	01db      	lsls	r3, r3, #7
    1d00:	d507      	bpl.n	1d12 <__aeabi_ddiv+0x40a>
    1d02:	4659      	mov	r1, fp
    1d04:	4b93      	ldr	r3, [pc, #588]	; (1f54 <__aeabi_ddiv+0x64c>)
    1d06:	4019      	ands	r1, r3
    1d08:	f240 4300 	movw	r3, #1024	; 0x400
    1d0c:	468b      	mov	fp, r1
    1d0e:	9900      	ldr	r1, [sp, #0]
    1d10:	18ce      	adds	r6, r1, r3
    1d12:	f240 73fe 	movw	r3, #2046	; 0x7fe
    1d16:	429e      	cmp	r6, r3
    1d18:	dd6c      	ble.n	1df4 <__aeabi_ddiv+0x4ec>
    1d1a:	2301      	movs	r3, #1
    1d1c:	4662      	mov	r2, ip
    1d1e:	f240 76ff 	movw	r6, #2047	; 0x7ff
    1d22:	4013      	ands	r3, r2
    1d24:	2400      	movs	r4, #0
    1d26:	2500      	movs	r5, #0
    1d28:	e6c3      	b.n	1ab2 <__aeabi_ddiv+0x1aa>
    1d2a:	2480      	movs	r4, #128	; 0x80
    1d2c:	464b      	mov	r3, r9
    1d2e:	0324      	lsls	r4, r4, #12
    1d30:	4223      	tst	r3, r4
    1d32:	d015      	beq.n	1d60 <__aeabi_ddiv+0x458>
    1d34:	465b      	mov	r3, fp
    1d36:	4223      	tst	r3, r4
    1d38:	d111      	bne.n	1d5e <__aeabi_ddiv+0x456>
    1d3a:	431c      	orrs	r4, r3
    1d3c:	0324      	lsls	r4, r4, #12
    1d3e:	0b24      	lsrs	r4, r4, #12
    1d40:	0033      	movs	r3, r6
    1d42:	0015      	movs	r5, r2
    1d44:	e6b3      	b.n	1aae <__aeabi_ddiv+0x1a6>
    1d46:	2903      	cmp	r1, #3
    1d48:	d100      	bne.n	1d4c <__aeabi_ddiv+0x444>
    1d4a:	e0f9      	b.n	1f40 <__aeabi_ddiv+0x638>
    1d4c:	9b01      	ldr	r3, [sp, #4]
    1d4e:	2901      	cmp	r1, #1
    1d50:	d000      	beq.n	1d54 <__aeabi_ddiv+0x44c>
    1d52:	e08a      	b.n	1e6a <__aeabi_ddiv+0x562>
    1d54:	400b      	ands	r3, r1
    1d56:	2600      	movs	r6, #0
    1d58:	2400      	movs	r4, #0
    1d5a:	2500      	movs	r5, #0
    1d5c:	e6a9      	b.n	1ab2 <__aeabi_ddiv+0x1aa>
    1d5e:	464b      	mov	r3, r9
    1d60:	431c      	orrs	r4, r3
    1d62:	0324      	lsls	r4, r4, #12
    1d64:	0b24      	lsrs	r4, r4, #12
    1d66:	4643      	mov	r3, r8
    1d68:	e6a1      	b.n	1aae <__aeabi_ddiv+0x1a6>
    1d6a:	0003      	movs	r3, r0
    1d6c:	465a      	mov	r2, fp
    1d6e:	3b28      	subs	r3, #40	; 0x28
    1d70:	409a      	lsls	r2, r3
    1d72:	2500      	movs	r5, #0
    1d74:	4691      	mov	r9, r2
    1d76:	e64a      	b.n	1a0e <__aeabi_ddiv+0x106>
    1d78:	f000 fcd0 	bl	271c <__clzsi2>
    1d7c:	3020      	adds	r0, #32
    1d7e:	e635      	b.n	19ec <__aeabi_ddiv+0xe4>
    1d80:	0003      	movs	r3, r0
    1d82:	4652      	mov	r2, sl
    1d84:	3b28      	subs	r3, #40	; 0x28
    1d86:	409a      	lsls	r2, r3
    1d88:	4693      	mov	fp, r2
    1d8a:	2200      	movs	r2, #0
    1d8c:	e670      	b.n	1a70 <__aeabi_ddiv+0x168>
    1d8e:	f000 fcc5 	bl	271c <__clzsi2>
    1d92:	3020      	adds	r0, #32
    1d94:	e655      	b.n	1a42 <__aeabi_ddiv+0x13a>
    1d96:	4295      	cmp	r5, r2
    1d98:	d200      	bcs.n	1d9c <__aeabi_ddiv+0x494>
    1d9a:	e6c2      	b.n	1b22 <__aeabi_ddiv+0x21a>
    1d9c:	4649      	mov	r1, r9
    1d9e:	464b      	mov	r3, r9
    1da0:	07cf      	lsls	r7, r1, #31
    1da2:	0869      	lsrs	r1, r5, #1
    1da4:	085b      	lsrs	r3, r3, #1
    1da6:	430f      	orrs	r7, r1
    1da8:	07ed      	lsls	r5, r5, #31
    1daa:	e6c0      	b.n	1b2e <__aeabi_ddiv+0x226>
    1dac:	2700      	movs	r7, #0
    1dae:	429d      	cmp	r5, r3
    1db0:	d300      	bcc.n	1db4 <__aeabi_ddiv+0x4ac>
    1db2:	e737      	b.n	1c24 <__aeabi_ddiv+0x31c>
    1db4:	19ad      	adds	r5, r5, r6
    1db6:	42b5      	cmp	r5, r6
    1db8:	41bf      	sbcs	r7, r7
    1dba:	2401      	movs	r4, #1
    1dbc:	427f      	negs	r7, r7
    1dbe:	4264      	negs	r4, r4
    1dc0:	187f      	adds	r7, r7, r1
    1dc2:	445c      	add	r4, fp
    1dc4:	18ba      	adds	r2, r7, r2
    1dc6:	46a0      	mov	r8, r4
    1dc8:	4291      	cmp	r1, r2
    1dca:	d207      	bcs.n	1ddc <__aeabi_ddiv+0x4d4>
    1dcc:	4591      	cmp	r9, r2
    1dce:	d872      	bhi.n	1eb6 <__aeabi_ddiv+0x5ae>
    1dd0:	d100      	bne.n	1dd4 <__aeabi_ddiv+0x4cc>
    1dd2:	e0aa      	b.n	1f2a <__aeabi_ddiv+0x622>
    1dd4:	464c      	mov	r4, r9
    1dd6:	46c3      	mov	fp, r8
    1dd8:	1b17      	subs	r7, r2, r4
    1dda:	e723      	b.n	1c24 <__aeabi_ddiv+0x31c>
    1ddc:	4291      	cmp	r1, r2
    1dde:	d1f9      	bne.n	1dd4 <__aeabi_ddiv+0x4cc>
    1de0:	42ae      	cmp	r6, r5
    1de2:	d9f3      	bls.n	1dcc <__aeabi_ddiv+0x4c4>
    1de4:	464a      	mov	r2, r9
    1de6:	46a3      	mov	fp, r4
    1de8:	1a8f      	subs	r7, r1, r2
    1dea:	e71b      	b.n	1c24 <__aeabi_ddiv+0x31c>
    1dec:	46c8      	mov	r8, r9
    1dee:	e6c7      	b.n	1b80 <__aeabi_ddiv+0x278>
    1df0:	46bb      	mov	fp, r7
    1df2:	e6e4      	b.n	1bbe <__aeabi_ddiv+0x2b6>
    1df4:	465b      	mov	r3, fp
    1df6:	08d2      	lsrs	r2, r2, #3
    1df8:	075d      	lsls	r5, r3, #29
    1dfa:	4315      	orrs	r5, r2
    1dfc:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1e00:	025c      	lsls	r4, r3, #9
    1e02:	4016      	ands	r6, r2
    1e04:	2301      	movs	r3, #1
    1e06:	4662      	mov	r2, ip
    1e08:	0b24      	lsrs	r4, r4, #12
    1e0a:	4013      	ands	r3, r2
    1e0c:	e651      	b.n	1ab2 <__aeabi_ddiv+0x1aa>
    1e0e:	2800      	cmp	r0, #0
    1e10:	d100      	bne.n	1e14 <__aeabi_ddiv+0x50c>
    1e12:	e769      	b.n	1ce8 <__aeabi_ddiv+0x3e0>
    1e14:	18cb      	adds	r3, r1, r3
    1e16:	1e57      	subs	r7, r2, #1
    1e18:	4299      	cmp	r1, r3
    1e1a:	d921      	bls.n	1e60 <__aeabi_ddiv+0x558>
    1e1c:	003a      	movs	r2, r7
    1e1e:	42ab      	cmp	r3, r5
    1e20:	d000      	beq.n	1e24 <__aeabi_ddiv+0x51c>
    1e22:	e75f      	b.n	1ce4 <__aeabi_ddiv+0x3dc>
    1e24:	42b0      	cmp	r0, r6
    1e26:	d000      	beq.n	1e2a <__aeabi_ddiv+0x522>
    1e28:	e75c      	b.n	1ce4 <__aeabi_ddiv+0x3dc>
    1e2a:	e75d      	b.n	1ce8 <__aeabi_ddiv+0x3e0>
    1e2c:	230f      	movs	r3, #15
    1e2e:	4013      	ands	r3, r2
    1e30:	2b04      	cmp	r3, #4
    1e32:	d100      	bne.n	1e36 <__aeabi_ddiv+0x52e>
    1e34:	e762      	b.n	1cfc <__aeabi_ddiv+0x3f4>
    1e36:	0013      	movs	r3, r2
    1e38:	1d1a      	adds	r2, r3, #4
    1e3a:	429a      	cmp	r2, r3
    1e3c:	419b      	sbcs	r3, r3
    1e3e:	425b      	negs	r3, r3
    1e40:	449b      	add	fp, r3
    1e42:	e75b      	b.n	1cfc <__aeabi_ddiv+0x3f4>
    1e44:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1e48:	9a00      	ldr	r2, [sp, #0]
    1e4a:	18d6      	adds	r6, r2, r3
    1e4c:	2e00      	cmp	r6, #0
    1e4e:	dc00      	bgt.n	1e52 <__aeabi_ddiv+0x54a>
    1e50:	e649      	b.n	1ae6 <__aeabi_ddiv+0x1de>
    1e52:	2301      	movs	r3, #1
    1e54:	425b      	negs	r3, r3
    1e56:	e7ef      	b.n	1e38 <__aeabi_ddiv+0x530>
    1e58:	4642      	mov	r2, r8
    1e5a:	e702      	b.n	1c62 <__aeabi_ddiv+0x35a>
    1e5c:	0005      	movs	r5, r0
    1e5e:	e719      	b.n	1c94 <__aeabi_ddiv+0x38c>
    1e60:	429d      	cmp	r5, r3
    1e62:	d835      	bhi.n	1ed0 <__aeabi_ddiv+0x5c8>
    1e64:	d066      	beq.n	1f34 <__aeabi_ddiv+0x62c>
    1e66:	003a      	movs	r2, r7
    1e68:	e73c      	b.n	1ce4 <__aeabi_ddiv+0x3dc>
    1e6a:	469c      	mov	ip, r3
    1e6c:	e73c      	b.n	1ce8 <__aeabi_ddiv+0x3e0>
    1e6e:	291f      	cmp	r1, #31
    1e70:	dc37      	bgt.n	1ee2 <__aeabi_ddiv+0x5da>
    1e72:	2320      	movs	r3, #32
    1e74:	0014      	movs	r4, r2
    1e76:	4658      	mov	r0, fp
    1e78:	1a5b      	subs	r3, r3, r1
    1e7a:	409a      	lsls	r2, r3
    1e7c:	4098      	lsls	r0, r3
    1e7e:	40cc      	lsrs	r4, r1
    1e80:	1e53      	subs	r3, r2, #1
    1e82:	419a      	sbcs	r2, r3
    1e84:	4320      	orrs	r0, r4
    1e86:	465c      	mov	r4, fp
    1e88:	4310      	orrs	r0, r2
    1e8a:	40cc      	lsrs	r4, r1
    1e8c:	0743      	lsls	r3, r0, #29
    1e8e:	d009      	beq.n	1ea4 <__aeabi_ddiv+0x59c>
    1e90:	230f      	movs	r3, #15
    1e92:	4003      	ands	r3, r0
    1e94:	2b04      	cmp	r3, #4
    1e96:	d005      	beq.n	1ea4 <__aeabi_ddiv+0x59c>
    1e98:	0002      	movs	r2, r0
    1e9a:	1d10      	adds	r0, r2, #4
    1e9c:	4290      	cmp	r0, r2
    1e9e:	419b      	sbcs	r3, r3
    1ea0:	425b      	negs	r3, r3
    1ea2:	18e4      	adds	r4, r4, r3
    1ea4:	0223      	lsls	r3, r4, #8
    1ea6:	d535      	bpl.n	1f14 <__aeabi_ddiv+0x60c>
    1ea8:	2301      	movs	r3, #1
    1eaa:	4662      	mov	r2, ip
    1eac:	2601      	movs	r6, #1
    1eae:	4013      	ands	r3, r2
    1eb0:	2400      	movs	r4, #0
    1eb2:	2500      	movs	r5, #0
    1eb4:	e5fd      	b.n	1ab2 <__aeabi_ddiv+0x1aa>
    1eb6:	19ad      	adds	r5, r5, r6
    1eb8:	42b5      	cmp	r5, r6
    1eba:	41bf      	sbcs	r7, r7
    1ebc:	2402      	movs	r4, #2
    1ebe:	427f      	negs	r7, r7
    1ec0:	4264      	negs	r4, r4
    1ec2:	187f      	adds	r7, r7, r1
    1ec4:	18bf      	adds	r7, r7, r2
    1ec6:	46a0      	mov	r8, r4
    1ec8:	464a      	mov	r2, r9
    1eca:	44c3      	add	fp, r8
    1ecc:	1abf      	subs	r7, r7, r2
    1ece:	e6a9      	b.n	1c24 <__aeabi_ddiv+0x31c>
    1ed0:	1e97      	subs	r7, r2, #2
    1ed2:	0072      	lsls	r2, r6, #1
    1ed4:	42b2      	cmp	r2, r6
    1ed6:	41b6      	sbcs	r6, r6
    1ed8:	4276      	negs	r6, r6
    1eda:	1871      	adds	r1, r6, r1
    1edc:	185b      	adds	r3, r3, r1
    1ede:	0016      	movs	r6, r2
    1ee0:	e79c      	b.n	1e1c <__aeabi_ddiv+0x514>
    1ee2:	231f      	movs	r3, #31
    1ee4:	465d      	mov	r5, fp
    1ee6:	425b      	negs	r3, r3
    1ee8:	1b9e      	subs	r6, r3, r6
    1eea:	40f5      	lsrs	r5, r6
    1eec:	2920      	cmp	r1, #32
    1eee:	d025      	beq.n	1f3c <__aeabi_ddiv+0x634>
    1ef0:	335f      	adds	r3, #95	; 0x5f
    1ef2:	1a59      	subs	r1, r3, r1
    1ef4:	465b      	mov	r3, fp
    1ef6:	408b      	lsls	r3, r1
    1ef8:	431a      	orrs	r2, r3
    1efa:	1e53      	subs	r3, r2, #1
    1efc:	419a      	sbcs	r2, r3
    1efe:	432a      	orrs	r2, r5
    1f00:	2507      	movs	r5, #7
    1f02:	4015      	ands	r5, r2
    1f04:	2400      	movs	r4, #0
    1f06:	b14d      	cbz	r5, 1f1c <__aeabi_ddiv+0x614>
    1f08:	230f      	movs	r3, #15
    1f0a:	2400      	movs	r4, #0
    1f0c:	4013      	ands	r3, r2
    1f0e:	0010      	movs	r0, r2
    1f10:	2b04      	cmp	r3, #4
    1f12:	d1c2      	bne.n	1e9a <__aeabi_ddiv+0x592>
    1f14:	0002      	movs	r2, r0
    1f16:	0765      	lsls	r5, r4, #29
    1f18:	0264      	lsls	r4, r4, #9
    1f1a:	0b24      	lsrs	r4, r4, #12
    1f1c:	08d2      	lsrs	r2, r2, #3
    1f1e:	4315      	orrs	r5, r2
    1f20:	2301      	movs	r3, #1
    1f22:	4662      	mov	r2, ip
    1f24:	2600      	movs	r6, #0
    1f26:	4013      	ands	r3, r2
    1f28:	e5c3      	b.n	1ab2 <__aeabi_ddiv+0x1aa>
    1f2a:	42ab      	cmp	r3, r5
    1f2c:	d8c3      	bhi.n	1eb6 <__aeabi_ddiv+0x5ae>
    1f2e:	46c3      	mov	fp, r8
    1f30:	2700      	movs	r7, #0
    1f32:	e677      	b.n	1c24 <__aeabi_ddiv+0x31c>
    1f34:	4286      	cmp	r6, r0
    1f36:	d3cb      	bcc.n	1ed0 <__aeabi_ddiv+0x5c8>
    1f38:	003a      	movs	r2, r7
    1f3a:	e773      	b.n	1e24 <__aeabi_ddiv+0x51c>
    1f3c:	2300      	movs	r3, #0
    1f3e:	e7db      	b.n	1ef8 <__aeabi_ddiv+0x5f0>
    1f40:	2480      	movs	r4, #128	; 0x80
    1f42:	465b      	mov	r3, fp
    1f44:	0324      	lsls	r4, r4, #12
    1f46:	431c      	orrs	r4, r3
    1f48:	0324      	lsls	r4, r4, #12
    1f4a:	0b24      	lsrs	r4, r4, #12
    1f4c:	9b01      	ldr	r3, [sp, #4]
    1f4e:	0015      	movs	r5, r2
    1f50:	e5ad      	b.n	1aae <__aeabi_ddiv+0x1a6>
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	feffffff 	.word	0xfeffffff

00001f58 <__aeabi_dmul>:
    1f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5a:	464e      	mov	r6, r9
    1f5c:	46de      	mov	lr, fp
    1f5e:	4657      	mov	r7, sl
    1f60:	4645      	mov	r5, r8
    1f62:	b5e0      	push	{r5, r6, r7, lr}
    1f64:	4699      	mov	r9, r3
    1f66:	004e      	lsls	r6, r1, #1
    1f68:	030b      	lsls	r3, r1, #12
    1f6a:	0b1b      	lsrs	r3, r3, #12
    1f6c:	0d76      	lsrs	r6, r6, #21
    1f6e:	b087      	sub	sp, #28
    1f70:	0004      	movs	r4, r0
    1f72:	4692      	mov	sl, r2
    1f74:	469b      	mov	fp, r3
    1f76:	0fcd      	lsrs	r5, r1, #31
    1f78:	2e00      	cmp	r6, #0
    1f7a:	d100      	bne.n	1f7e <__aeabi_dmul+0x26>
    1f7c:	e076      	b.n	206c <__aeabi_dmul+0x114>
    1f7e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    1f82:	429e      	cmp	r6, r3
    1f84:	d03a      	beq.n	1ffc <__aeabi_dmul+0xa4>
    1f86:	465b      	mov	r3, fp
    1f88:	00da      	lsls	r2, r3, #3
    1f8a:	2380      	movs	r3, #128	; 0x80
    1f8c:	0f41      	lsrs	r1, r0, #29
    1f8e:	041b      	lsls	r3, r3, #16
    1f90:	430b      	orrs	r3, r1
    1f92:	4313      	orrs	r3, r2
    1f94:	469b      	mov	fp, r3
    1f96:	4b71      	ldr	r3, [pc, #452]	; (215c <__aeabi_dmul+0x204>)
    1f98:	f240 0800 	movw	r8, #0
    1f9c:	469c      	mov	ip, r3
    1f9e:	2300      	movs	r3, #0
    1fa0:	00c7      	lsls	r7, r0, #3
    1fa2:	4466      	add	r6, ip
    1fa4:	9302      	str	r3, [sp, #8]
    1fa6:	464b      	mov	r3, r9
    1fa8:	005a      	lsls	r2, r3, #1
    1faa:	031c      	lsls	r4, r3, #12
    1fac:	0d52      	lsrs	r2, r2, #21
    1fae:	0fdb      	lsrs	r3, r3, #31
    1fb0:	4650      	mov	r0, sl
    1fb2:	0b24      	lsrs	r4, r4, #12
    1fb4:	4699      	mov	r9, r3
    1fb6:	2a00      	cmp	r2, #0
    1fb8:	d100      	bne.n	1fbc <__aeabi_dmul+0x64>
    1fba:	e082      	b.n	20c2 <__aeabi_dmul+0x16a>
    1fbc:	f240 73ff 	movw	r3, #2047	; 0x7ff
    1fc0:	429a      	cmp	r2, r3
    1fc2:	d100      	bne.n	1fc6 <__aeabi_dmul+0x6e>
    1fc4:	e075      	b.n	20b2 <__aeabi_dmul+0x15a>
    1fc6:	2380      	movs	r3, #128	; 0x80
    1fc8:	0f41      	lsrs	r1, r0, #29
    1fca:	041b      	lsls	r3, r3, #16
    1fcc:	430b      	orrs	r3, r1
    1fce:	4963      	ldr	r1, [pc, #396]	; (215c <__aeabi_dmul+0x204>)
    1fd0:	00e4      	lsls	r4, r4, #3
    1fd2:	431c      	orrs	r4, r3
    1fd4:	00c3      	lsls	r3, r0, #3
    1fd6:	1850      	adds	r0, r2, r1
    1fd8:	2200      	movs	r2, #0
    1fda:	4649      	mov	r1, r9
    1fdc:	1836      	adds	r6, r6, r0
    1fde:	4640      	mov	r0, r8
    1fe0:	4069      	eors	r1, r5
    1fe2:	9100      	str	r1, [sp, #0]
    1fe4:	1c71      	adds	r1, r6, #1
    1fe6:	9101      	str	r1, [sp, #4]
    1fe8:	4310      	orrs	r0, r2
    1fea:	280f      	cmp	r0, #15
    1fec:	d900      	bls.n	1ff0 <__aeabi_dmul+0x98>
    1fee:	e0bb      	b.n	2168 <__aeabi_dmul+0x210>
    1ff0:	0080      	lsls	r0, r0, #2
    1ff2:	4680      	mov	r8, r0
    1ff4:	4641      	mov	r1, r8
    1ff6:	485a      	ldr	r0, [pc, #360]	; (2160 <__aeabi_dmul+0x208>)
    1ff8:	5841      	ldr	r1, [r0, r1]
    1ffa:	468f      	mov	pc, r1
    1ffc:	465f      	mov	r7, fp
    1ffe:	4307      	orrs	r7, r0
    2000:	2f00      	cmp	r7, #0
    2002:	d000      	beq.n	2006 <__aeabi_dmul+0xae>
    2004:	e092      	b.n	212c <__aeabi_dmul+0x1d4>
    2006:	2302      	movs	r3, #2
    2008:	f240 0b00 	movw	fp, #0
    200c:	f240 0808 	movw	r8, #8
    2010:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2014:	9302      	str	r3, [sp, #8]
    2016:	e7c6      	b.n	1fa6 <__aeabi_dmul+0x4e>
    2018:	4649      	mov	r1, r9
    201a:	9100      	str	r1, [sp, #0]
    201c:	2a02      	cmp	r2, #2
    201e:	d06c      	beq.n	20fa <__aeabi_dmul+0x1a2>
    2020:	2a03      	cmp	r2, #3
    2022:	d100      	bne.n	2026 <__aeabi_dmul+0xce>
    2024:	e214      	b.n	2450 <__aeabi_dmul+0x4f8>
    2026:	2a01      	cmp	r2, #1
    2028:	d000      	beq.n	202c <__aeabi_dmul+0xd4>
    202a:	e16c      	b.n	2306 <__aeabi_dmul+0x3ae>
    202c:	9900      	ldr	r1, [sp, #0]
    202e:	2400      	movs	r4, #0
    2030:	4011      	ands	r1, r2
    2032:	2700      	movs	r7, #0
    2034:	2200      	movs	r2, #0
    2036:	b2cd      	uxtb	r5, r1
    2038:	2100      	movs	r1, #0
    203a:	0312      	lsls	r2, r2, #12
    203c:	0d0b      	lsrs	r3, r1, #20
    203e:	0b12      	lsrs	r2, r2, #12
    2040:	051b      	lsls	r3, r3, #20
    2042:	4313      	orrs	r3, r2
    2044:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2048:	f2c8 020f 	movt	r2, #32783	; 0x800f
    204c:	4013      	ands	r3, r2
    204e:	0524      	lsls	r4, r4, #20
    2050:	431c      	orrs	r4, r3
    2052:	0064      	lsls	r4, r4, #1
    2054:	07ed      	lsls	r5, r5, #31
    2056:	0864      	lsrs	r4, r4, #1
    2058:	432c      	orrs	r4, r5
    205a:	0038      	movs	r0, r7
    205c:	0021      	movs	r1, r4
    205e:	b007      	add	sp, #28
    2060:	bc3c      	pop	{r2, r3, r4, r5}
    2062:	4690      	mov	r8, r2
    2064:	4699      	mov	r9, r3
    2066:	46a2      	mov	sl, r4
    2068:	46ab      	mov	fp, r5
    206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    206c:	001f      	movs	r7, r3
    206e:	4307      	orrs	r7, r0
    2070:	2f00      	cmp	r7, #0
    2072:	d053      	beq.n	211c <__aeabi_dmul+0x1c4>
    2074:	2b00      	cmp	r3, #0
    2076:	d100      	bne.n	207a <__aeabi_dmul+0x122>
    2078:	e192      	b.n	23a0 <__aeabi_dmul+0x448>
    207a:	0018      	movs	r0, r3
    207c:	f000 fb4e 	bl	271c <__clzsi2>
    2080:	0003      	movs	r3, r0
    2082:	3b0b      	subs	r3, #11
    2084:	2b1c      	cmp	r3, #28
    2086:	dd00      	ble.n	208a <__aeabi_dmul+0x132>
    2088:	e184      	b.n	2394 <__aeabi_dmul+0x43c>
    208a:	221d      	movs	r2, #29
    208c:	1ad3      	subs	r3, r2, r3
    208e:	0022      	movs	r2, r4
    2090:	0001      	movs	r1, r0
    2092:	465e      	mov	r6, fp
    2094:	40da      	lsrs	r2, r3
    2096:	3908      	subs	r1, #8
    2098:	408e      	lsls	r6, r1
    209a:	0013      	movs	r3, r2
    209c:	408c      	lsls	r4, r1
    209e:	4333      	orrs	r3, r6
    20a0:	469b      	mov	fp, r3
    20a2:	0027      	movs	r7, r4
    20a4:	2300      	movs	r3, #0
    20a6:	4e2f      	ldr	r6, [pc, #188]	; (2164 <__aeabi_dmul+0x20c>)
    20a8:	f240 0800 	movw	r8, #0
    20ac:	1a36      	subs	r6, r6, r0
    20ae:	9302      	str	r3, [sp, #8]
    20b0:	e779      	b.n	1fa6 <__aeabi_dmul+0x4e>
    20b2:	4653      	mov	r3, sl
    20b4:	4323      	orrs	r3, r4
    20b6:	bb63      	cbnz	r3, 2112 <__aeabi_dmul+0x1ba>
    20b8:	2400      	movs	r4, #0
    20ba:	f240 70ff 	movw	r0, #2047	; 0x7ff
    20be:	2202      	movs	r2, #2
    20c0:	e78b      	b.n	1fda <__aeabi_dmul+0x82>
    20c2:	4653      	mov	r3, sl
    20c4:	4323      	orrs	r3, r4
    20c6:	b303      	cbz	r3, 210a <__aeabi_dmul+0x1b2>
    20c8:	2c00      	cmp	r4, #0
    20ca:	d100      	bne.n	20ce <__aeabi_dmul+0x176>
    20cc:	e15e      	b.n	238c <__aeabi_dmul+0x434>
    20ce:	0020      	movs	r0, r4
    20d0:	f000 fb24 	bl	271c <__clzsi2>
    20d4:	0003      	movs	r3, r0
    20d6:	3b0b      	subs	r3, #11
    20d8:	2b1c      	cmp	r3, #28
    20da:	dd00      	ble.n	20de <__aeabi_dmul+0x186>
    20dc:	e150      	b.n	2380 <__aeabi_dmul+0x428>
    20de:	211d      	movs	r1, #29
    20e0:	1acb      	subs	r3, r1, r3
    20e2:	4651      	mov	r1, sl
    20e4:	0002      	movs	r2, r0
    20e6:	40d9      	lsrs	r1, r3
    20e8:	4653      	mov	r3, sl
    20ea:	3a08      	subs	r2, #8
    20ec:	4094      	lsls	r4, r2
    20ee:	4093      	lsls	r3, r2
    20f0:	430c      	orrs	r4, r1
    20f2:	4a1c      	ldr	r2, [pc, #112]	; (2164 <__aeabi_dmul+0x20c>)
    20f4:	1a10      	subs	r0, r2, r0
    20f6:	2200      	movs	r2, #0
    20f8:	e76f      	b.n	1fda <__aeabi_dmul+0x82>
    20fa:	2501      	movs	r5, #1
    20fc:	9b00      	ldr	r3, [sp, #0]
    20fe:	f240 74ff 	movw	r4, #2047	; 0x7ff
    2102:	401d      	ands	r5, r3
    2104:	2200      	movs	r2, #0
    2106:	2700      	movs	r7, #0
    2108:	e796      	b.n	2038 <__aeabi_dmul+0xe0>
    210a:	2400      	movs	r4, #0
    210c:	2000      	movs	r0, #0
    210e:	2201      	movs	r2, #1
    2110:	e763      	b.n	1fda <__aeabi_dmul+0x82>
    2112:	4653      	mov	r3, sl
    2114:	f240 70ff 	movw	r0, #2047	; 0x7ff
    2118:	2203      	movs	r2, #3
    211a:	e75e      	b.n	1fda <__aeabi_dmul+0x82>
    211c:	2301      	movs	r3, #1
    211e:	f240 0b00 	movw	fp, #0
    2122:	f240 0804 	movw	r8, #4
    2126:	2600      	movs	r6, #0
    2128:	9302      	str	r3, [sp, #8]
    212a:	e73c      	b.n	1fa6 <__aeabi_dmul+0x4e>
    212c:	2303      	movs	r3, #3
    212e:	0007      	movs	r7, r0
    2130:	f240 080c 	movw	r8, #12
    2134:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2138:	9302      	str	r3, [sp, #8]
    213a:	e734      	b.n	1fa6 <__aeabi_dmul+0x4e>
    213c:	2280      	movs	r2, #128	; 0x80
    213e:	2500      	movs	r5, #0
    2140:	2700      	movs	r7, #0
    2142:	0312      	lsls	r2, r2, #12
    2144:	f240 74ff 	movw	r4, #2047	; 0x7ff
    2148:	e776      	b.n	2038 <__aeabi_dmul+0xe0>
    214a:	465c      	mov	r4, fp
    214c:	003b      	movs	r3, r7
    214e:	9a02      	ldr	r2, [sp, #8]
    2150:	e764      	b.n	201c <__aeabi_dmul+0xc4>
    2152:	465c      	mov	r4, fp
    2154:	003b      	movs	r3, r7
    2156:	9500      	str	r5, [sp, #0]
    2158:	9a02      	ldr	r2, [sp, #8]
    215a:	e75f      	b.n	201c <__aeabi_dmul+0xc4>
    215c:	fffffc01 	.word	0xfffffc01
    2160:	000029d8 	.word	0x000029d8
    2164:	fffffc0d 	.word	0xfffffc0d
    2168:	f64f 75ff 	movw	r5, #65535	; 0xffff
    216c:	0c3a      	lsrs	r2, r7, #16
    216e:	4694      	mov	ip, r2
    2170:	0c1a      	lsrs	r2, r3, #16
    2172:	402b      	ands	r3, r5
    2174:	0019      	movs	r1, r3
    2176:	402f      	ands	r7, r5
    2178:	4379      	muls	r1, r7
    217a:	4689      	mov	r9, r1
    217c:	4661      	mov	r1, ip
    217e:	4648      	mov	r0, r9
    2180:	4359      	muls	r1, r3
    2182:	0015      	movs	r5, r2
    2184:	4688      	mov	r8, r1
    2186:	4661      	mov	r1, ip
    2188:	0c00      	lsrs	r0, r0, #16
    218a:	4682      	mov	sl, r0
    218c:	437d      	muls	r5, r7
    218e:	4351      	muls	r1, r2
    2190:	4445      	add	r5, r8
    2192:	4455      	add	r5, sl
    2194:	9102      	str	r1, [sp, #8]
    2196:	45a8      	cmp	r8, r5
    2198:	d904      	bls.n	21a4 <__aeabi_dmul+0x24c>
    219a:	2080      	movs	r0, #128	; 0x80
    219c:	0240      	lsls	r0, r0, #9
    219e:	4680      	mov	r8, r0
    21a0:	4441      	add	r1, r8
    21a2:	9102      	str	r1, [sp, #8]
    21a4:	f64f 78ff 	movw	r8, #65535	; 0xffff
    21a8:	0c29      	lsrs	r1, r5, #16
    21aa:	4640      	mov	r0, r8
    21ac:	9103      	str	r1, [sp, #12]
    21ae:	4649      	mov	r1, r9
    21b0:	042d      	lsls	r5, r5, #16
    21b2:	4001      	ands	r1, r0
    21b4:	4689      	mov	r9, r1
    21b6:	0029      	movs	r1, r5
    21b8:	0c25      	lsrs	r5, r4, #16
    21ba:	4449      	add	r1, r9
    21bc:	4004      	ands	r4, r0
    21be:	9104      	str	r1, [sp, #16]
    21c0:	0021      	movs	r1, r4
    21c2:	4379      	muls	r1, r7
    21c4:	4688      	mov	r8, r1
    21c6:	4661      	mov	r1, ip
    21c8:	4361      	muls	r1, r4
    21ca:	4689      	mov	r9, r1
    21cc:	4661      	mov	r1, ip
    21ce:	4369      	muls	r1, r5
    21d0:	468c      	mov	ip, r1
    21d2:	4641      	mov	r1, r8
    21d4:	0c09      	lsrs	r1, r1, #16
    21d6:	468a      	mov	sl, r1
    21d8:	436f      	muls	r7, r5
    21da:	444f      	add	r7, r9
    21dc:	4457      	add	r7, sl
    21de:	45b9      	cmp	r9, r7
    21e0:	d903      	bls.n	21ea <__aeabi_dmul+0x292>
    21e2:	2180      	movs	r1, #128	; 0x80
    21e4:	0249      	lsls	r1, r1, #9
    21e6:	4689      	mov	r9, r1
    21e8:	44cc      	add	ip, r9
    21ea:	0c39      	lsrs	r1, r7, #16
    21ec:	4461      	add	r1, ip
    21ee:	f64f 7cff 	movw	ip, #65535	; 0xffff
    21f2:	9105      	str	r1, [sp, #20]
    21f4:	4660      	mov	r0, ip
    21f6:	4641      	mov	r1, r8
    21f8:	4001      	ands	r1, r0
    21fa:	4688      	mov	r8, r1
    21fc:	9903      	ldr	r1, [sp, #12]
    21fe:	043f      	lsls	r7, r7, #16
    2200:	4447      	add	r7, r8
    2202:	4688      	mov	r8, r1
    2204:	44b8      	add	r8, r7
    2206:	4641      	mov	r1, r8
    2208:	9103      	str	r1, [sp, #12]
    220a:	4659      	mov	r1, fp
    220c:	0c09      	lsrs	r1, r1, #16
    220e:	4688      	mov	r8, r1
    2210:	4658      	mov	r0, fp
    2212:	4661      	mov	r1, ip
    2214:	4001      	ands	r1, r0
    2216:	468c      	mov	ip, r1
    2218:	4359      	muls	r1, r3
    221a:	4689      	mov	r9, r1
    221c:	4641      	mov	r1, r8
    221e:	434b      	muls	r3, r1
    2220:	4351      	muls	r1, r2
    2222:	468a      	mov	sl, r1
    2224:	4661      	mov	r1, ip
    2226:	434a      	muls	r2, r1
    2228:	4649      	mov	r1, r9
    222a:	0c09      	lsrs	r1, r1, #16
    222c:	468b      	mov	fp, r1
    222e:	18d2      	adds	r2, r2, r3
    2230:	445a      	add	r2, fp
    2232:	4293      	cmp	r3, r2
    2234:	d903      	bls.n	223e <__aeabi_dmul+0x2e6>
    2236:	2380      	movs	r3, #128	; 0x80
    2238:	025b      	lsls	r3, r3, #9
    223a:	469b      	mov	fp, r3
    223c:	44da      	add	sl, fp
    223e:	0c13      	lsrs	r3, r2, #16
    2240:	4453      	add	r3, sl
    2242:	f64f 7aff 	movw	sl, #65535	; 0xffff
    2246:	4648      	mov	r0, r9
    2248:	4651      	mov	r1, sl
    224a:	4001      	ands	r1, r0
    224c:	4689      	mov	r9, r1
    224e:	4641      	mov	r1, r8
    2250:	4361      	muls	r1, r4
    2252:	468a      	mov	sl, r1
    2254:	4641      	mov	r1, r8
    2256:	4369      	muls	r1, r5
    2258:	0412      	lsls	r2, r2, #16
    225a:	4491      	add	r9, r2
    225c:	4688      	mov	r8, r1
    225e:	4662      	mov	r2, ip
    2260:	4661      	mov	r1, ip
    2262:	4362      	muls	r2, r4
    2264:	434d      	muls	r5, r1
    2266:	0c14      	lsrs	r4, r2, #16
    2268:	4455      	add	r5, sl
    226a:	1964      	adds	r4, r4, r5
    226c:	45a2      	cmp	sl, r4
    226e:	d903      	bls.n	2278 <__aeabi_dmul+0x320>
    2270:	2180      	movs	r1, #128	; 0x80
    2272:	0249      	lsls	r1, r1, #9
    2274:	468c      	mov	ip, r1
    2276:	44e0      	add	r8, ip
    2278:	9803      	ldr	r0, [sp, #12]
    227a:	9902      	ldr	r1, [sp, #8]
    227c:	4684      	mov	ip, r0
    227e:	4461      	add	r1, ip
    2280:	42b9      	cmp	r1, r7
    2282:	41bf      	sbcs	r7, r7
    2284:	f64f 7cff 	movw	ip, #65535	; 0xffff
    2288:	000d      	movs	r5, r1
    228a:	4279      	negs	r1, r7
    228c:	468a      	mov	sl, r1
    228e:	9805      	ldr	r0, [sp, #20]
    2290:	4661      	mov	r1, ip
    2292:	4684      	mov	ip, r0
    2294:	0427      	lsls	r7, r4, #16
    2296:	4011      	ands	r1, r2
    2298:	187a      	adds	r2, r7, r1
    229a:	4462      	add	r2, ip
    229c:	444d      	add	r5, r9
    229e:	4694      	mov	ip, r2
    22a0:	002f      	movs	r7, r5
    22a2:	454d      	cmp	r5, r9
    22a4:	41ad      	sbcs	r5, r5
    22a6:	44d4      	add	ip, sl
    22a8:	426d      	negs	r5, r5
    22aa:	469b      	mov	fp, r3
    22ac:	4282      	cmp	r2, r0
    22ae:	4192      	sbcs	r2, r2
    22b0:	45d4      	cmp	ip, sl
    22b2:	4189      	sbcs	r1, r1
    22b4:	46a9      	mov	r9, r5
    22b6:	44e3      	add	fp, ip
    22b8:	4252      	negs	r2, r2
    22ba:	4249      	negs	r1, r1
    22bc:	44d9      	add	r9, fp
    22be:	0c24      	lsrs	r4, r4, #16
    22c0:	430a      	orrs	r2, r1
    22c2:	1912      	adds	r2, r2, r4
    22c4:	45a9      	cmp	r9, r5
    22c6:	41ad      	sbcs	r5, r5
    22c8:	459b      	cmp	fp, r3
    22ca:	41a4      	sbcs	r4, r4
    22cc:	464b      	mov	r3, r9
    22ce:	426d      	negs	r5, r5
    22d0:	4264      	negs	r4, r4
    22d2:	432c      	orrs	r4, r5
    22d4:	1914      	adds	r4, r2, r4
    22d6:	4444      	add	r4, r8
    22d8:	0ddb      	lsrs	r3, r3, #23
    22da:	0264      	lsls	r4, r4, #9
    22dc:	431c      	orrs	r4, r3
    22de:	9b04      	ldr	r3, [sp, #16]
    22e0:	027d      	lsls	r5, r7, #9
    22e2:	431d      	orrs	r5, r3
    22e4:	002b      	movs	r3, r5
    22e6:	1e5d      	subs	r5, r3, #1
    22e8:	41ab      	sbcs	r3, r5
    22ea:	0dff      	lsrs	r7, r7, #23
    22ec:	431f      	orrs	r7, r3
    22ee:	464b      	mov	r3, r9
    22f0:	025b      	lsls	r3, r3, #9
    22f2:	433b      	orrs	r3, r7
    22f4:	01e2      	lsls	r2, r4, #7
    22f6:	d557      	bpl.n	23a8 <__aeabi_dmul+0x450>
    22f8:	2701      	movs	r7, #1
    22fa:	085a      	lsrs	r2, r3, #1
    22fc:	403b      	ands	r3, r7
    22fe:	4313      	orrs	r3, r2
    2300:	07e7      	lsls	r7, r4, #31
    2302:	433b      	orrs	r3, r7
    2304:	0864      	lsrs	r4, r4, #1
    2306:	f240 32ff 	movw	r2, #1023	; 0x3ff
    230a:	9901      	ldr	r1, [sp, #4]
    230c:	188e      	adds	r6, r1, r2
    230e:	2e00      	cmp	r6, #0
    2310:	dd4c      	ble.n	23ac <__aeabi_dmul+0x454>
    2312:	075a      	lsls	r2, r3, #29
    2314:	d009      	beq.n	232a <__aeabi_dmul+0x3d2>
    2316:	220f      	movs	r2, #15
    2318:	401a      	ands	r2, r3
    231a:	2a04      	cmp	r2, #4
    231c:	d005      	beq.n	232a <__aeabi_dmul+0x3d2>
    231e:	1d1a      	adds	r2, r3, #4
    2320:	429a      	cmp	r2, r3
    2322:	419b      	sbcs	r3, r3
    2324:	425b      	negs	r3, r3
    2326:	18e4      	adds	r4, r4, r3
    2328:	0013      	movs	r3, r2
    232a:	01e2      	lsls	r2, r4, #7
    232c:	d505      	bpl.n	233a <__aeabi_dmul+0x3e2>
    232e:	4a4d      	ldr	r2, [pc, #308]	; (2464 <__aeabi_dmul+0x50c>)
    2330:	9901      	ldr	r1, [sp, #4]
    2332:	4014      	ands	r4, r2
    2334:	f240 4200 	movw	r2, #1024	; 0x400
    2338:	188e      	adds	r6, r1, r2
    233a:	f240 72fe 	movw	r2, #2046	; 0x7fe
    233e:	4296      	cmp	r6, r2
    2340:	dd00      	ble.n	2344 <__aeabi_dmul+0x3ec>
    2342:	e6da      	b.n	20fa <__aeabi_dmul+0x1a2>
    2344:	0767      	lsls	r7, r4, #29
    2346:	0264      	lsls	r4, r4, #9
    2348:	0b22      	lsrs	r2, r4, #12
    234a:	2501      	movs	r5, #1
    234c:	f240 74ff 	movw	r4, #2047	; 0x7ff
    2350:	08db      	lsrs	r3, r3, #3
    2352:	431f      	orrs	r7, r3
    2354:	9b00      	ldr	r3, [sp, #0]
    2356:	4034      	ands	r4, r6
    2358:	401d      	ands	r5, r3
    235a:	e66d      	b.n	2038 <__aeabi_dmul+0xe0>
    235c:	2280      	movs	r2, #128	; 0x80
    235e:	4659      	mov	r1, fp
    2360:	0312      	lsls	r2, r2, #12
    2362:	4211      	tst	r1, r2
    2364:	d007      	beq.n	2376 <__aeabi_dmul+0x41e>
    2366:	4214      	tst	r4, r2
    2368:	d105      	bne.n	2376 <__aeabi_dmul+0x41e>
    236a:	4322      	orrs	r2, r4
    236c:	0312      	lsls	r2, r2, #12
    236e:	0b12      	lsrs	r2, r2, #12
    2370:	464d      	mov	r5, r9
    2372:	001f      	movs	r7, r3
    2374:	e6e6      	b.n	2144 <__aeabi_dmul+0x1ec>
    2376:	465b      	mov	r3, fp
    2378:	431a      	orrs	r2, r3
    237a:	0312      	lsls	r2, r2, #12
    237c:	0b12      	lsrs	r2, r2, #12
    237e:	e6e1      	b.n	2144 <__aeabi_dmul+0x1ec>
    2380:	0003      	movs	r3, r0
    2382:	4654      	mov	r4, sl
    2384:	3b28      	subs	r3, #40	; 0x28
    2386:	409c      	lsls	r4, r3
    2388:	2300      	movs	r3, #0
    238a:	e6b2      	b.n	20f2 <__aeabi_dmul+0x19a>
    238c:	f000 f9c6 	bl	271c <__clzsi2>
    2390:	3020      	adds	r0, #32
    2392:	e69f      	b.n	20d4 <__aeabi_dmul+0x17c>
    2394:	0003      	movs	r3, r0
    2396:	3b28      	subs	r3, #40	; 0x28
    2398:	409c      	lsls	r4, r3
    239a:	2700      	movs	r7, #0
    239c:	46a3      	mov	fp, r4
    239e:	e681      	b.n	20a4 <__aeabi_dmul+0x14c>
    23a0:	f000 f9bc 	bl	271c <__clzsi2>
    23a4:	3020      	adds	r0, #32
    23a6:	e66b      	b.n	2080 <__aeabi_dmul+0x128>
    23a8:	9601      	str	r6, [sp, #4]
    23aa:	e7ac      	b.n	2306 <__aeabi_dmul+0x3ae>
    23ac:	2501      	movs	r5, #1
    23ae:	1baa      	subs	r2, r5, r6
    23b0:	2a38      	cmp	r2, #56	; 0x38
    23b2:	dd05      	ble.n	23c0 <__aeabi_dmul+0x468>
    23b4:	9b00      	ldr	r3, [sp, #0]
    23b6:	2400      	movs	r4, #0
    23b8:	401d      	ands	r5, r3
    23ba:	2200      	movs	r2, #0
    23bc:	2700      	movs	r7, #0
    23be:	e63b      	b.n	2038 <__aeabi_dmul+0xe0>
    23c0:	2a1f      	cmp	r2, #31
    23c2:	dc20      	bgt.n	2406 <__aeabi_dmul+0x4ae>
    23c4:	2520      	movs	r5, #32
    23c6:	0020      	movs	r0, r4
    23c8:	1aad      	subs	r5, r5, r2
    23ca:	001e      	movs	r6, r3
    23cc:	40ab      	lsls	r3, r5
    23ce:	40a8      	lsls	r0, r5
    23d0:	40d6      	lsrs	r6, r2
    23d2:	1e5d      	subs	r5, r3, #1
    23d4:	41ab      	sbcs	r3, r5
    23d6:	4330      	orrs	r0, r6
    23d8:	4318      	orrs	r0, r3
    23da:	40d4      	lsrs	r4, r2
    23dc:	0743      	lsls	r3, r0, #29
    23de:	d009      	beq.n	23f4 <__aeabi_dmul+0x49c>
    23e0:	230f      	movs	r3, #15
    23e2:	4003      	ands	r3, r0
    23e4:	2b04      	cmp	r3, #4
    23e6:	d005      	beq.n	23f4 <__aeabi_dmul+0x49c>
    23e8:	0003      	movs	r3, r0
    23ea:	1d18      	adds	r0, r3, #4
    23ec:	4298      	cmp	r0, r3
    23ee:	419b      	sbcs	r3, r3
    23f0:	425b      	negs	r3, r3
    23f2:	18e4      	adds	r4, r4, r3
    23f4:	0223      	lsls	r3, r4, #8
    23f6:	d51e      	bpl.n	2436 <__aeabi_dmul+0x4de>
    23f8:	2501      	movs	r5, #1
    23fa:	9b00      	ldr	r3, [sp, #0]
    23fc:	2401      	movs	r4, #1
    23fe:	401d      	ands	r5, r3
    2400:	2200      	movs	r2, #0
    2402:	2700      	movs	r7, #0
    2404:	e618      	b.n	2038 <__aeabi_dmul+0xe0>
    2406:	201f      	movs	r0, #31
    2408:	0027      	movs	r7, r4
    240a:	4240      	negs	r0, r0
    240c:	1b86      	subs	r6, r0, r6
    240e:	40f7      	lsrs	r7, r6
    2410:	2a20      	cmp	r2, #32
    2412:	d01b      	beq.n	244c <__aeabi_dmul+0x4f4>
    2414:	305f      	adds	r0, #95	; 0x5f
    2416:	1a82      	subs	r2, r0, r2
    2418:	4094      	lsls	r4, r2
    241a:	4323      	orrs	r3, r4
    241c:	1e5c      	subs	r4, r3, #1
    241e:	41a3      	sbcs	r3, r4
    2420:	433b      	orrs	r3, r7
    2422:	2707      	movs	r7, #7
    2424:	401f      	ands	r7, r3
    2426:	2200      	movs	r2, #0
    2428:	b14f      	cbz	r7, 243e <__aeabi_dmul+0x4e6>
    242a:	220f      	movs	r2, #15
    242c:	2400      	movs	r4, #0
    242e:	401a      	ands	r2, r3
    2430:	0018      	movs	r0, r3
    2432:	2a04      	cmp	r2, #4
    2434:	d1d9      	bne.n	23ea <__aeabi_dmul+0x492>
    2436:	0003      	movs	r3, r0
    2438:	0767      	lsls	r7, r4, #29
    243a:	0264      	lsls	r4, r4, #9
    243c:	0b22      	lsrs	r2, r4, #12
    243e:	2501      	movs	r5, #1
    2440:	08db      	lsrs	r3, r3, #3
    2442:	431f      	orrs	r7, r3
    2444:	9b00      	ldr	r3, [sp, #0]
    2446:	2400      	movs	r4, #0
    2448:	401d      	ands	r5, r3
    244a:	e5f5      	b.n	2038 <__aeabi_dmul+0xe0>
    244c:	2400      	movs	r4, #0
    244e:	e7e4      	b.n	241a <__aeabi_dmul+0x4c2>
    2450:	2280      	movs	r2, #128	; 0x80
    2452:	2501      	movs	r5, #1
    2454:	0312      	lsls	r2, r2, #12
    2456:	4322      	orrs	r2, r4
    2458:	9900      	ldr	r1, [sp, #0]
    245a:	0312      	lsls	r2, r2, #12
    245c:	0b12      	lsrs	r2, r2, #12
    245e:	400d      	ands	r5, r1
    2460:	001f      	movs	r7, r3
    2462:	e66f      	b.n	2144 <__aeabi_dmul+0x1ec>
    2464:	feffffff 	.word	0xfeffffff

00002468 <__aeabi_i2d>:
    2468:	b570      	push	{r4, r5, r6, lr}
    246a:	2800      	cmp	r0, #0
    246c:	d038      	beq.n	24e0 <__aeabi_i2d+0x78>
    246e:	17c3      	asrs	r3, r0, #31
    2470:	18c4      	adds	r4, r0, r3
    2472:	405c      	eors	r4, r3
    2474:	0fc5      	lsrs	r5, r0, #31
    2476:	0020      	movs	r0, r4
    2478:	f000 f950 	bl	271c <__clzsi2>
    247c:	f240 431e 	movw	r3, #1054	; 0x41e
    2480:	f240 4233 	movw	r2, #1075	; 0x433
    2484:	1a1b      	subs	r3, r3, r0
    2486:	1ad2      	subs	r2, r2, r3
    2488:	2a1f      	cmp	r2, #31
    248a:	dd1d      	ble.n	24c8 <__aeabi_i2d+0x60>
    248c:	f240 4213 	movw	r2, #1043	; 0x413
    2490:	1ad2      	subs	r2, r2, r3
    2492:	4094      	lsls	r4, r2
    2494:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2498:	4013      	ands	r3, r2
    249a:	2200      	movs	r2, #0
    249c:	0324      	lsls	r4, r4, #12
    249e:	0b24      	lsrs	r4, r4, #12
    24a0:	2100      	movs	r1, #0
    24a2:	0010      	movs	r0, r2
    24a4:	0324      	lsls	r4, r4, #12
    24a6:	0d0a      	lsrs	r2, r1, #20
    24a8:	0b24      	lsrs	r4, r4, #12
    24aa:	0512      	lsls	r2, r2, #20
    24ac:	4322      	orrs	r2, r4
    24ae:	f64f 74ff 	movw	r4, #65535	; 0xffff
    24b2:	f2c8 040f 	movt	r4, #32783	; 0x800f
    24b6:	4022      	ands	r2, r4
    24b8:	051b      	lsls	r3, r3, #20
    24ba:	4313      	orrs	r3, r2
    24bc:	005b      	lsls	r3, r3, #1
    24be:	07ed      	lsls	r5, r5, #31
    24c0:	085b      	lsrs	r3, r3, #1
    24c2:	432b      	orrs	r3, r5
    24c4:	0019      	movs	r1, r3
    24c6:	bd70      	pop	{r4, r5, r6, pc}
    24c8:	0021      	movs	r1, r4
    24ca:	4091      	lsls	r1, r2
    24cc:	000a      	movs	r2, r1
    24ce:	210b      	movs	r1, #11
    24d0:	1a08      	subs	r0, r1, r0
    24d2:	40c4      	lsrs	r4, r0
    24d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
    24d8:	0324      	lsls	r4, r4, #12
    24da:	0b24      	lsrs	r4, r4, #12
    24dc:	400b      	ands	r3, r1
    24de:	e7df      	b.n	24a0 <__aeabi_i2d+0x38>
    24e0:	2500      	movs	r5, #0
    24e2:	2300      	movs	r3, #0
    24e4:	2400      	movs	r4, #0
    24e6:	2200      	movs	r2, #0
    24e8:	e7da      	b.n	24a0 <__aeabi_i2d+0x38>
    24ea:	46c0      	nop			; (mov r8, r8)

000024ec <__aeabi_f2d>:
    24ec:	0041      	lsls	r1, r0, #1
    24ee:	0e09      	lsrs	r1, r1, #24
    24f0:	1c4b      	adds	r3, r1, #1
    24f2:	0242      	lsls	r2, r0, #9
    24f4:	b2db      	uxtb	r3, r3
    24f6:	b570      	push	{r4, r5, r6, lr}
    24f8:	0a56      	lsrs	r6, r2, #9
    24fa:	0fc4      	lsrs	r4, r0, #31
    24fc:	2b01      	cmp	r3, #1
    24fe:	dd19      	ble.n	2534 <__aeabi_f2d+0x48>
    2500:	0b13      	lsrs	r3, r2, #12
    2502:	f240 3280 	movw	r2, #896	; 0x380
    2506:	0776      	lsls	r6, r6, #29
    2508:	188d      	adds	r5, r1, r2
    250a:	2100      	movs	r1, #0
    250c:	0d0a      	lsrs	r2, r1, #20
    250e:	0512      	lsls	r2, r2, #20
    2510:	431a      	orrs	r2, r3
    2512:	f240 73ff 	movw	r3, #2047	; 0x7ff
    2516:	402b      	ands	r3, r5
    2518:	f64f 75ff 	movw	r5, #65535	; 0xffff
    251c:	f2c8 050f 	movt	r5, #32783	; 0x800f
    2520:	402a      	ands	r2, r5
    2522:	051b      	lsls	r3, r3, #20
    2524:	4313      	orrs	r3, r2
    2526:	005b      	lsls	r3, r3, #1
    2528:	07e4      	lsls	r4, r4, #31
    252a:	085b      	lsrs	r3, r3, #1
    252c:	4323      	orrs	r3, r4
    252e:	0030      	movs	r0, r6
    2530:	0019      	movs	r1, r3
    2532:	bd70      	pop	{r4, r5, r6, pc}
    2534:	b9a9      	cbnz	r1, 2562 <__aeabi_f2d+0x76>
    2536:	b30e      	cbz	r6, 257c <__aeabi_f2d+0x90>
    2538:	0030      	movs	r0, r6
    253a:	f000 f8ef 	bl	271c <__clzsi2>
    253e:	280a      	cmp	r0, #10
    2540:	dc1f      	bgt.n	2582 <__aeabi_f2d+0x96>
    2542:	230b      	movs	r3, #11
    2544:	0032      	movs	r2, r6
    2546:	1a1b      	subs	r3, r3, r0
    2548:	40da      	lsrs	r2, r3
    254a:	0003      	movs	r3, r0
    254c:	3315      	adds	r3, #21
    254e:	409e      	lsls	r6, r3
    2550:	f240 3589 	movw	r5, #905	; 0x389
    2554:	f240 71ff 	movw	r1, #2047	; 0x7ff
    2558:	0312      	lsls	r2, r2, #12
    255a:	1a2d      	subs	r5, r5, r0
    255c:	0b13      	lsrs	r3, r2, #12
    255e:	400d      	ands	r5, r1
    2560:	e7d3      	b.n	250a <__aeabi_f2d+0x1e>
    2562:	b13e      	cbz	r6, 2574 <__aeabi_f2d+0x88>
    2564:	2380      	movs	r3, #128	; 0x80
    2566:	0b12      	lsrs	r2, r2, #12
    2568:	031b      	lsls	r3, r3, #12
    256a:	0776      	lsls	r6, r6, #29
    256c:	4313      	orrs	r3, r2
    256e:	f240 75ff 	movw	r5, #2047	; 0x7ff
    2572:	e7ca      	b.n	250a <__aeabi_f2d+0x1e>
    2574:	f240 75ff 	movw	r5, #2047	; 0x7ff
    2578:	2300      	movs	r3, #0
    257a:	e7c6      	b.n	250a <__aeabi_f2d+0x1e>
    257c:	2500      	movs	r5, #0
    257e:	2300      	movs	r3, #0
    2580:	e7c3      	b.n	250a <__aeabi_f2d+0x1e>
    2582:	0003      	movs	r3, r0
    2584:	0032      	movs	r2, r6
    2586:	3b0b      	subs	r3, #11
    2588:	409a      	lsls	r2, r3
    258a:	2600      	movs	r6, #0
    258c:	e7e0      	b.n	2550 <__aeabi_f2d+0x64>
    258e:	46c0      	nop			; (mov r8, r8)

00002590 <__aeabi_d2f>:
    2590:	b5f0      	push	{r4, r5, r6, r7, lr}
    2592:	f240 75ff 	movw	r5, #2047	; 0x7ff
    2596:	004c      	lsls	r4, r1, #1
    2598:	030b      	lsls	r3, r1, #12
    259a:	0d64      	lsrs	r4, r4, #21
    259c:	0f46      	lsrs	r6, r0, #29
    259e:	0a5b      	lsrs	r3, r3, #9
    25a0:	1c67      	adds	r7, r4, #1
    25a2:	4333      	orrs	r3, r6
    25a4:	0fc9      	lsrs	r1, r1, #31
    25a6:	00c6      	lsls	r6, r0, #3
    25a8:	403d      	ands	r5, r7
    25aa:	2d01      	cmp	r5, #1
    25ac:	dd29      	ble.n	2602 <__aeabi_d2f+0x72>
    25ae:	4a3b      	ldr	r2, [pc, #236]	; (269c <__aeabi_d2f+0x10c>)
    25b0:	18a5      	adds	r5, r4, r2
    25b2:	2dfe      	cmp	r5, #254	; 0xfe
    25b4:	dc1c      	bgt.n	25f0 <__aeabi_d2f+0x60>
    25b6:	2d00      	cmp	r5, #0
    25b8:	dd3e      	ble.n	2638 <__aeabi_d2f+0xa8>
    25ba:	0180      	lsls	r0, r0, #6
    25bc:	0002      	movs	r2, r0
    25be:	1e50      	subs	r0, r2, #1
    25c0:	4182      	sbcs	r2, r0
    25c2:	0f76      	lsrs	r6, r6, #29
    25c4:	4332      	orrs	r2, r6
    25c6:	00db      	lsls	r3, r3, #3
    25c8:	4313      	orrs	r3, r2
    25ca:	075a      	lsls	r2, r3, #29
    25cc:	d004      	beq.n	25d8 <__aeabi_d2f+0x48>
    25ce:	220f      	movs	r2, #15
    25d0:	401a      	ands	r2, r3
    25d2:	2a04      	cmp	r2, #4
    25d4:	d000      	beq.n	25d8 <__aeabi_d2f+0x48>
    25d6:	3304      	adds	r3, #4
    25d8:	2280      	movs	r2, #128	; 0x80
    25da:	04d2      	lsls	r2, r2, #19
    25dc:	401a      	ands	r2, r3
    25de:	2a00      	cmp	r2, #0
    25e0:	d059      	beq.n	2696 <__aeabi_d2f+0x106>
    25e2:	3501      	adds	r5, #1
    25e4:	2dff      	cmp	r5, #255	; 0xff
    25e6:	d003      	beq.n	25f0 <__aeabi_d2f+0x60>
    25e8:	019b      	lsls	r3, r3, #6
    25ea:	0a5b      	lsrs	r3, r3, #9
    25ec:	b2ec      	uxtb	r4, r5
    25ee:	e001      	b.n	25f4 <__aeabi_d2f+0x64>
    25f0:	24ff      	movs	r4, #255	; 0xff
    25f2:	2300      	movs	r3, #0
    25f4:	0258      	lsls	r0, r3, #9
    25f6:	05e4      	lsls	r4, r4, #23
    25f8:	0a40      	lsrs	r0, r0, #9
    25fa:	07c9      	lsls	r1, r1, #31
    25fc:	4320      	orrs	r0, r4
    25fe:	4308      	orrs	r0, r1
    2600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2602:	b144      	cbz	r4, 2616 <__aeabi_d2f+0x86>
    2604:	431e      	orrs	r6, r3
    2606:	2e00      	cmp	r6, #0
    2608:	d0f2      	beq.n	25f0 <__aeabi_d2f+0x60>
    260a:	2080      	movs	r0, #128	; 0x80
    260c:	00db      	lsls	r3, r3, #3
    260e:	0480      	lsls	r0, r0, #18
    2610:	4303      	orrs	r3, r0
    2612:	25ff      	movs	r5, #255	; 0xff
    2614:	e7d9      	b.n	25ca <__aeabi_d2f+0x3a>
    2616:	4333      	orrs	r3, r6
    2618:	b11b      	cbz	r3, 2622 <__aeabi_d2f+0x92>
    261a:	2305      	movs	r3, #5
    261c:	08db      	lsrs	r3, r3, #3
    261e:	2cff      	cmp	r4, #255	; 0xff
    2620:	d003      	beq.n	262a <__aeabi_d2f+0x9a>
    2622:	025b      	lsls	r3, r3, #9
    2624:	0a5b      	lsrs	r3, r3, #9
    2626:	b2e4      	uxtb	r4, r4
    2628:	e7e4      	b.n	25f4 <__aeabi_d2f+0x64>
    262a:	b393      	cbz	r3, 2692 <__aeabi_d2f+0x102>
    262c:	2080      	movs	r0, #128	; 0x80
    262e:	03c0      	lsls	r0, r0, #15
    2630:	4303      	orrs	r3, r0
    2632:	025b      	lsls	r3, r3, #9
    2634:	0a5b      	lsrs	r3, r3, #9
    2636:	e7dd      	b.n	25f4 <__aeabi_d2f+0x64>
    2638:	002a      	movs	r2, r5
    263a:	3217      	adds	r2, #23
    263c:	db14      	blt.n	2668 <__aeabi_d2f+0xd8>
    263e:	2280      	movs	r2, #128	; 0x80
    2640:	271e      	movs	r7, #30
    2642:	0412      	lsls	r2, r2, #16
    2644:	4313      	orrs	r3, r2
    2646:	1b7f      	subs	r7, r7, r5
    2648:	2f1f      	cmp	r7, #31
    264a:	dc0f      	bgt.n	266c <__aeabi_d2f+0xdc>
    264c:	4a14      	ldr	r2, [pc, #80]	; (26a0 <__aeabi_d2f+0x110>)
    264e:	4694      	mov	ip, r2
    2650:	4464      	add	r4, ip
    2652:	0032      	movs	r2, r6
    2654:	40a6      	lsls	r6, r4
    2656:	0035      	movs	r5, r6
    2658:	40a3      	lsls	r3, r4
    265a:	1e6e      	subs	r6, r5, #1
    265c:	41b5      	sbcs	r5, r6
    265e:	40fa      	lsrs	r2, r7
    2660:	432b      	orrs	r3, r5
    2662:	4313      	orrs	r3, r2
    2664:	2500      	movs	r5, #0
    2666:	e7b0      	b.n	25ca <__aeabi_d2f+0x3a>
    2668:	2400      	movs	r4, #0
    266a:	e7d6      	b.n	261a <__aeabi_d2f+0x8a>
    266c:	2202      	movs	r2, #2
    266e:	4252      	negs	r2, r2
    2670:	1b55      	subs	r5, r2, r5
    2672:	001a      	movs	r2, r3
    2674:	40ea      	lsrs	r2, r5
    2676:	2f20      	cmp	r7, #32
    2678:	d009      	beq.n	268e <__aeabi_d2f+0xfe>
    267a:	480a      	ldr	r0, [pc, #40]	; (26a4 <__aeabi_d2f+0x114>)
    267c:	4684      	mov	ip, r0
    267e:	4464      	add	r4, ip
    2680:	40a3      	lsls	r3, r4
    2682:	4333      	orrs	r3, r6
    2684:	1e5e      	subs	r6, r3, #1
    2686:	41b3      	sbcs	r3, r6
    2688:	2500      	movs	r5, #0
    268a:	4313      	orrs	r3, r2
    268c:	e79d      	b.n	25ca <__aeabi_d2f+0x3a>
    268e:	2300      	movs	r3, #0
    2690:	e7f7      	b.n	2682 <__aeabi_d2f+0xf2>
    2692:	2300      	movs	r3, #0
    2694:	e7ae      	b.n	25f4 <__aeabi_d2f+0x64>
    2696:	002c      	movs	r4, r5
    2698:	e7c0      	b.n	261c <__aeabi_d2f+0x8c>
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	fffffc80 	.word	0xfffffc80
    26a0:	fffffc82 	.word	0xfffffc82
    26a4:	fffffca2 	.word	0xfffffca2

000026a8 <__aeabi_cfrcmple>:
    26a8:	4684      	mov	ip, r0
    26aa:	1c08      	adds	r0, r1, #0
    26ac:	4661      	mov	r1, ip
    26ae:	e7ff      	b.n	26b0 <__aeabi_cfcmpeq>

000026b0 <__aeabi_cfcmpeq>:
    26b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    26b2:	f000 f8b1 	bl	2818 <__lesf2>
    26b6:	2800      	cmp	r0, #0
    26b8:	d401      	bmi.n	26be <__aeabi_cfcmpeq+0xe>
    26ba:	2100      	movs	r1, #0
    26bc:	42c8      	cmn	r0, r1
    26be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000026c0 <__aeabi_fcmpeq>:
    26c0:	b510      	push	{r4, lr}
    26c2:	f000 f849 	bl	2758 <__eqsf2>
    26c6:	4240      	negs	r0, r0
    26c8:	3001      	adds	r0, #1
    26ca:	bd10      	pop	{r4, pc}

000026cc <__aeabi_fcmplt>:
    26cc:	b510      	push	{r4, lr}
    26ce:	f000 f8a3 	bl	2818 <__lesf2>
    26d2:	2800      	cmp	r0, #0
    26d4:	db01      	blt.n	26da <__aeabi_fcmplt+0xe>
    26d6:	2000      	movs	r0, #0
    26d8:	bd10      	pop	{r4, pc}
    26da:	2001      	movs	r0, #1
    26dc:	bd10      	pop	{r4, pc}
    26de:	46c0      	nop			; (mov r8, r8)

000026e0 <__aeabi_fcmple>:
    26e0:	b510      	push	{r4, lr}
    26e2:	f000 f899 	bl	2818 <__lesf2>
    26e6:	2800      	cmp	r0, #0
    26e8:	dd01      	ble.n	26ee <__aeabi_fcmple+0xe>
    26ea:	2000      	movs	r0, #0
    26ec:	bd10      	pop	{r4, pc}
    26ee:	2001      	movs	r0, #1
    26f0:	bd10      	pop	{r4, pc}
    26f2:	46c0      	nop			; (mov r8, r8)

000026f4 <__aeabi_fcmpgt>:
    26f4:	b510      	push	{r4, lr}
    26f6:	f000 f855 	bl	27a4 <__gesf2>
    26fa:	2800      	cmp	r0, #0
    26fc:	dc01      	bgt.n	2702 <__aeabi_fcmpgt+0xe>
    26fe:	2000      	movs	r0, #0
    2700:	bd10      	pop	{r4, pc}
    2702:	2001      	movs	r0, #1
    2704:	bd10      	pop	{r4, pc}
    2706:	46c0      	nop			; (mov r8, r8)

00002708 <__aeabi_fcmpge>:
    2708:	b510      	push	{r4, lr}
    270a:	f000 f84b 	bl	27a4 <__gesf2>
    270e:	2800      	cmp	r0, #0
    2710:	da01      	bge.n	2716 <__aeabi_fcmpge+0xe>
    2712:	2000      	movs	r0, #0
    2714:	bd10      	pop	{r4, pc}
    2716:	2001      	movs	r0, #1
    2718:	bd10      	pop	{r4, pc}
    271a:	46c0      	nop			; (mov r8, r8)

0000271c <__clzsi2>:
    271c:	211c      	movs	r1, #28
    271e:	2301      	movs	r3, #1
    2720:	041b      	lsls	r3, r3, #16
    2722:	4298      	cmp	r0, r3
    2724:	d301      	bcc.n	272a <__clzsi2+0xe>
    2726:	0c00      	lsrs	r0, r0, #16
    2728:	3910      	subs	r1, #16
    272a:	0a1b      	lsrs	r3, r3, #8
    272c:	4298      	cmp	r0, r3
    272e:	d301      	bcc.n	2734 <__clzsi2+0x18>
    2730:	0a00      	lsrs	r0, r0, #8
    2732:	3908      	subs	r1, #8
    2734:	091b      	lsrs	r3, r3, #4
    2736:	4298      	cmp	r0, r3
    2738:	d301      	bcc.n	273e <__clzsi2+0x22>
    273a:	0900      	lsrs	r0, r0, #4
    273c:	3904      	subs	r1, #4
    273e:	a202      	add	r2, pc, #8	; (adr r2, 2748 <__clzsi2+0x2c>)
    2740:	5c10      	ldrb	r0, [r2, r0]
    2742:	1840      	adds	r0, r0, r1
    2744:	4770      	bx	lr
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	02020304 	.word	0x02020304
    274c:	01010101 	.word	0x01010101
	...

00002758 <__eqsf2>:
    2758:	b570      	push	{r4, r5, r6, lr}
    275a:	0042      	lsls	r2, r0, #1
    275c:	0245      	lsls	r5, r0, #9
    275e:	024e      	lsls	r6, r1, #9
    2760:	004c      	lsls	r4, r1, #1
    2762:	0fc3      	lsrs	r3, r0, #31
    2764:	0a6d      	lsrs	r5, r5, #9
    2766:	0e12      	lsrs	r2, r2, #24
    2768:	0a76      	lsrs	r6, r6, #9
    276a:	0e24      	lsrs	r4, r4, #24
    276c:	0fc9      	lsrs	r1, r1, #31
    276e:	2001      	movs	r0, #1
    2770:	2aff      	cmp	r2, #255	; 0xff
    2772:	d006      	beq.n	2782 <__eqsf2+0x2a>
    2774:	2cff      	cmp	r4, #255	; 0xff
    2776:	d003      	beq.n	2780 <__eqsf2+0x28>
    2778:	42a2      	cmp	r2, r4
    277a:	d101      	bne.n	2780 <__eqsf2+0x28>
    277c:	42b5      	cmp	r5, r6
    277e:	d006      	beq.n	278e <__eqsf2+0x36>
    2780:	bd70      	pop	{r4, r5, r6, pc}
    2782:	2d00      	cmp	r5, #0
    2784:	d1fc      	bne.n	2780 <__eqsf2+0x28>
    2786:	2cff      	cmp	r4, #255	; 0xff
    2788:	d1fa      	bne.n	2780 <__eqsf2+0x28>
    278a:	2e00      	cmp	r6, #0
    278c:	d1f8      	bne.n	2780 <__eqsf2+0x28>
    278e:	428b      	cmp	r3, r1
    2790:	d006      	beq.n	27a0 <__eqsf2+0x48>
    2792:	2001      	movs	r0, #1
    2794:	2a00      	cmp	r2, #0
    2796:	d1f3      	bne.n	2780 <__eqsf2+0x28>
    2798:	0028      	movs	r0, r5
    279a:	1e45      	subs	r5, r0, #1
    279c:	41a8      	sbcs	r0, r5
    279e:	e7ef      	b.n	2780 <__eqsf2+0x28>
    27a0:	2000      	movs	r0, #0
    27a2:	e7ed      	b.n	2780 <__eqsf2+0x28>

000027a4 <__gesf2>:
    27a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a6:	0042      	lsls	r2, r0, #1
    27a8:	0245      	lsls	r5, r0, #9
    27aa:	024c      	lsls	r4, r1, #9
    27ac:	0fc3      	lsrs	r3, r0, #31
    27ae:	0048      	lsls	r0, r1, #1
    27b0:	0a6d      	lsrs	r5, r5, #9
    27b2:	0e12      	lsrs	r2, r2, #24
    27b4:	0a64      	lsrs	r4, r4, #9
    27b6:	0e00      	lsrs	r0, r0, #24
    27b8:	0fc9      	lsrs	r1, r1, #31
    27ba:	2aff      	cmp	r2, #255	; 0xff
    27bc:	d01d      	beq.n	27fa <__gesf2+0x56>
    27be:	28ff      	cmp	r0, #255	; 0xff
    27c0:	d010      	beq.n	27e4 <__gesf2+0x40>
    27c2:	b93a      	cbnz	r2, 27d4 <__gesf2+0x30>
    27c4:	426e      	negs	r6, r5
    27c6:	416e      	adcs	r6, r5
    27c8:	b2f6      	uxtb	r6, r6
    27ca:	b980      	cbnz	r0, 27ee <__gesf2+0x4a>
    27cc:	b97c      	cbnz	r4, 27ee <__gesf2+0x4a>
    27ce:	2000      	movs	r0, #0
    27d0:	b13d      	cbz	r5, 27e2 <__gesf2+0x3e>
    27d2:	e003      	b.n	27dc <__gesf2+0x38>
    27d4:	b900      	cbnz	r0, 27d8 <__gesf2+0x34>
    27d6:	b10c      	cbz	r4, 27dc <__gesf2+0x38>
    27d8:	428b      	cmp	r3, r1
    27da:	d011      	beq.n	2800 <__gesf2+0x5c>
    27dc:	2101      	movs	r1, #1
    27de:	4258      	negs	r0, r3
    27e0:	4308      	orrs	r0, r1
    27e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27e4:	2c00      	cmp	r4, #0
    27e6:	d0ec      	beq.n	27c2 <__gesf2+0x1e>
    27e8:	2002      	movs	r0, #2
    27ea:	4240      	negs	r0, r0
    27ec:	e7f9      	b.n	27e2 <__gesf2+0x3e>
    27ee:	2e00      	cmp	r6, #0
    27f0:	d0f2      	beq.n	27d8 <__gesf2+0x34>
    27f2:	2001      	movs	r0, #1
    27f4:	3901      	subs	r1, #1
    27f6:	4308      	orrs	r0, r1
    27f8:	e7f3      	b.n	27e2 <__gesf2+0x3e>
    27fa:	2d00      	cmp	r5, #0
    27fc:	d0df      	beq.n	27be <__gesf2+0x1a>
    27fe:	e7f3      	b.n	27e8 <__gesf2+0x44>
    2800:	4282      	cmp	r2, r0
    2802:	dceb      	bgt.n	27dc <__gesf2+0x38>
    2804:	db04      	blt.n	2810 <__gesf2+0x6c>
    2806:	42a5      	cmp	r5, r4
    2808:	d8e8      	bhi.n	27dc <__gesf2+0x38>
    280a:	2000      	movs	r0, #0
    280c:	42a5      	cmp	r5, r4
    280e:	d2e8      	bcs.n	27e2 <__gesf2+0x3e>
    2810:	2101      	movs	r1, #1
    2812:	1e58      	subs	r0, r3, #1
    2814:	4308      	orrs	r0, r1
    2816:	e7e4      	b.n	27e2 <__gesf2+0x3e>

00002818 <__lesf2>:
    2818:	b5f0      	push	{r4, r5, r6, r7, lr}
    281a:	0042      	lsls	r2, r0, #1
    281c:	024d      	lsls	r5, r1, #9
    281e:	004c      	lsls	r4, r1, #1
    2820:	0246      	lsls	r6, r0, #9
    2822:	0a76      	lsrs	r6, r6, #9
    2824:	0e12      	lsrs	r2, r2, #24
    2826:	0fc3      	lsrs	r3, r0, #31
    2828:	0a6d      	lsrs	r5, r5, #9
    282a:	0e24      	lsrs	r4, r4, #24
    282c:	0fc9      	lsrs	r1, r1, #31
    282e:	2aff      	cmp	r2, #255	; 0xff
    2830:	d016      	beq.n	2860 <__lesf2+0x48>
    2832:	2cff      	cmp	r4, #255	; 0xff
    2834:	d010      	beq.n	2858 <__lesf2+0x40>
    2836:	b942      	cbnz	r2, 284a <__lesf2+0x32>
    2838:	4270      	negs	r0, r6
    283a:	4170      	adcs	r0, r6
    283c:	b2c0      	uxtb	r0, r0
    283e:	b19c      	cbz	r4, 2868 <__lesf2+0x50>
    2840:	b120      	cbz	r0, 284c <__lesf2+0x34>
    2842:	2001      	movs	r0, #1
    2844:	3901      	subs	r1, #1
    2846:	4308      	orrs	r0, r1
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    284a:	b19c      	cbz	r4, 2874 <__lesf2+0x5c>
    284c:	4299      	cmp	r1, r3
    284e:	d014      	beq.n	287a <__lesf2+0x62>
    2850:	2001      	movs	r0, #1
    2852:	425b      	negs	r3, r3
    2854:	4318      	orrs	r0, r3
    2856:	e7f7      	b.n	2848 <__lesf2+0x30>
    2858:	2002      	movs	r0, #2
    285a:	2d00      	cmp	r5, #0
    285c:	d1f4      	bne.n	2848 <__lesf2+0x30>
    285e:	e7ea      	b.n	2836 <__lesf2+0x1e>
    2860:	2002      	movs	r0, #2
    2862:	2e00      	cmp	r6, #0
    2864:	d1f0      	bne.n	2848 <__lesf2+0x30>
    2866:	e7e4      	b.n	2832 <__lesf2+0x1a>
    2868:	2d00      	cmp	r5, #0
    286a:	d1e9      	bne.n	2840 <__lesf2+0x28>
    286c:	2000      	movs	r0, #0
    286e:	2e00      	cmp	r6, #0
    2870:	d0ea      	beq.n	2848 <__lesf2+0x30>
    2872:	e7ed      	b.n	2850 <__lesf2+0x38>
    2874:	2d00      	cmp	r5, #0
    2876:	d1e9      	bne.n	284c <__lesf2+0x34>
    2878:	e7ea      	b.n	2850 <__lesf2+0x38>
    287a:	42a2      	cmp	r2, r4
    287c:	dc06      	bgt.n	288c <__lesf2+0x74>
    287e:	dbe0      	blt.n	2842 <__lesf2+0x2a>
    2880:	42ae      	cmp	r6, r5
    2882:	d803      	bhi.n	288c <__lesf2+0x74>
    2884:	2000      	movs	r0, #0
    2886:	42ae      	cmp	r6, r5
    2888:	d3db      	bcc.n	2842 <__lesf2+0x2a>
    288a:	e7dd      	b.n	2848 <__lesf2+0x30>
    288c:	2001      	movs	r0, #1
    288e:	4249      	negs	r1, r1
    2890:	4308      	orrs	r0, r1
    2892:	e7d9      	b.n	2848 <__lesf2+0x30>

00002894 <__libc_init_array>:
    2894:	b570      	push	{r4, r5, r6, lr}
    2896:	2500      	movs	r5, #0
    2898:	4b0e      	ldr	r3, [pc, #56]	; (28d4 <__libc_init_array+0x40>)
    289a:	4c0f      	ldr	r4, [pc, #60]	; (28d8 <__libc_init_array+0x44>)
    289c:	1ae4      	subs	r4, r4, r3
    289e:	10a4      	asrs	r4, r4, #2
    28a0:	42a5      	cmp	r5, r4
    28a2:	d109      	bne.n	28b8 <__libc_init_array+0x24>
    28a4:	2500      	movs	r5, #0
    28a6:	f000 f8b7 	bl	2a18 <_init>
    28aa:	4c0c      	ldr	r4, [pc, #48]	; (28dc <__libc_init_array+0x48>)
    28ac:	4b0c      	ldr	r3, [pc, #48]	; (28e0 <__libc_init_array+0x4c>)
    28ae:	1ae4      	subs	r4, r4, r3
    28b0:	10a4      	asrs	r4, r4, #2
    28b2:	42a5      	cmp	r5, r4
    28b4:	d107      	bne.n	28c6 <__libc_init_array+0x32>
    28b6:	bd70      	pop	{r4, r5, r6, pc}
    28b8:	4a06      	ldr	r2, [pc, #24]	; (28d4 <__libc_init_array+0x40>)
    28ba:	00ab      	lsls	r3, r5, #2
    28bc:	189b      	adds	r3, r3, r2
    28be:	681b      	ldr	r3, [r3, #0]
    28c0:	4798      	blx	r3
    28c2:	3501      	adds	r5, #1
    28c4:	e7ec      	b.n	28a0 <__libc_init_array+0xc>
    28c6:	4a06      	ldr	r2, [pc, #24]	; (28e0 <__libc_init_array+0x4c>)
    28c8:	00ab      	lsls	r3, r5, #2
    28ca:	189b      	adds	r3, r3, r2
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	4798      	blx	r3
    28d0:	3501      	adds	r5, #1
    28d2:	e7ee      	b.n	28b2 <__libc_init_array+0x1e>
    28d4:	00002a24 	.word	0x00002a24
    28d8:	00002a24 	.word	0x00002a24
    28dc:	00002a28 	.word	0x00002a28
    28e0:	00002a24 	.word	0x00002a24
    28e4:	682f2e2e 	.word	0x682f2e2e
    28e8:	732f6c61 	.word	0x732f6c61
    28ec:	682f6372 	.word	0x682f6372
    28f0:	695f6c61 	.word	0x695f6c61
    28f4:	6d5f6332 	.word	0x6d5f6332
    28f8:	6e79735f 	.word	0x6e79735f
    28fc:	00632e63 	.word	0x00632e63
    2900:	682f2e2e 	.word	0x682f2e2e
    2904:	732f6c61 	.word	0x732f6c61
    2908:	682f6372 	.word	0x682f6372
    290c:	695f6c61 	.word	0x695f6c61
    2910:	00632e6f 	.word	0x00632e6f
    2914:	42000400 	.word	0x42000400
    2918:	42000800 	.word	0x42000800
    291c:	42000c00 	.word	0x42000c00

00002920 <_i2cms>:
    2920:	00000000 00200014 00000100 00000f0e     ...... .........
    2930:	00d70000 003d0900 682f2e2e 732f6c70     ......=.../hpl/s
    2940:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    2950:	0000632e                                .c..

00002954 <at30tse75x_interface>:
    2954:	00001049 0000135c 000012ba 000012ba     I...\...........
    2964:	000012b8 0000134e 0000134e 00001344     ....N...N...D...
    2974:	000012b8 0000134e 00001344 0000134e     ....N...D...N...
    2984:	000012b8 00001354 00001354 00001354     ....T...T...T...
    2994:	000013f0 00001b18 00001b00 00001af8     ................
    29a4:	000019c4 00001af8 00001aa6 00001af8     ................
    29b4:	000019c4 00001b00 00001b00 00001aa6     ................
    29c4:	000019c4 000019ba 000019ba 000019ba     ................
    29d4:	00001d2a 00002168 0000201c 0000201c     *...h!... ... ..
    29e4:	00002018 0000214a 0000214a 0000213c     . ..J!..J!..<!..
    29f4:	00002018 0000214a 0000213c 0000214a     . ..J!..<!..J!..
    2a04:	00002018 00002152 00002152 00002152     . ..R!..R!..R!..
    2a14:	0000235c                                \#..

00002a18 <_init>:
    2a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a1e:	bc08      	pop	{r3}
    2a20:	469e      	mov	lr, r3
    2a22:	4770      	bx	lr

00002a24 <__init_array_start>:
    2a24:	00000391 	.word	0x00000391

00002a28 <_fini>:
    2a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a2e:	bc08      	pop	{r3}
    2a30:	469e      	mov	lr, r3
    2a32:	4770      	bx	lr

00002a34 <__fini_array_start>:
    2a34:	00000365 	.word	0x00000365

Disassembly of section .gnu.sgstubs:

00007c00 <trojan_s>:
    7c00:	e97f e97f 	sg
    7c04:	f7f8 bb20 	b.w	248 <__acle_se_trojan_s>

00007c08 <nsc_temperature_sensor_read>:
    7c08:	e97f e97f 	sg
    7c0c:	f7f8 bb01 	b.w	212 <__acle_se_nsc_temperature_sensor_read>

00007c10 <nsc_ext_irq_init>:
    7c10:	e97f e97f 	sg
    7c14:	f7f8 ba87 	b.w	126 <__acle_se_nsc_ext_irq_init>

00007c18 <nsc_periph_clock_init>:
    7c18:	e97f e97f 	sg
    7c1c:	f7f8 ba6a 	b.w	f4 <__acle_se_nsc_periph_clock_init>
