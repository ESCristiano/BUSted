
STM32L073_DMA_Covert_Channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004078  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  080042c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080042c8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c08c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6e  00000000  00000000  0002c124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002e098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002e900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a4c  00000000  00000000  0002f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b87a  00000000  00000000  00044adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f1b5  00000000  00000000  00050356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf50b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d8  00000000  00000000  000cf560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004120 	.word	0x08004120

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004120 	.word	0x08004120

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f82e 	bl	80002c4 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	000f      	movs	r7, r1
 800027c:	0001      	movs	r1, r0
 800027e:	002e      	movs	r6, r5
 8000280:	46c6      	mov	lr, r8
 8000282:	4684      	mov	ip, r0
 8000284:	0400      	lsls	r0, r0, #16
 8000286:	0c14      	lsrs	r4, r2, #16
 8000288:	0c00      	lsrs	r0, r0, #16
 800028a:	0c09      	lsrs	r1, r1, #16
 800028c:	4346      	muls	r6, r0
 800028e:	434d      	muls	r5, r1
 8000290:	4360      	muls	r0, r4
 8000292:	4361      	muls	r1, r4
 8000294:	1940      	adds	r0, r0, r5
 8000296:	0c34      	lsrs	r4, r6, #16
 8000298:	1824      	adds	r4, r4, r0
 800029a:	b500      	push	{lr}
 800029c:	42a5      	cmp	r5, r4
 800029e:	d903      	bls.n	80002a8 <__aeabi_lmul+0x34>
 80002a0:	2080      	movs	r0, #128	; 0x80
 80002a2:	0240      	lsls	r0, r0, #9
 80002a4:	4680      	mov	r8, r0
 80002a6:	4441      	add	r1, r8
 80002a8:	0c25      	lsrs	r5, r4, #16
 80002aa:	186d      	adds	r5, r5, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	4359      	muls	r1, r3
 80002b0:	437a      	muls	r2, r7
 80002b2:	0430      	lsls	r0, r6, #16
 80002b4:	1949      	adds	r1, r1, r5
 80002b6:	0424      	lsls	r4, r4, #16
 80002b8:	0c00      	lsrs	r0, r0, #16
 80002ba:	1820      	adds	r0, r4, r0
 80002bc:	1889      	adds	r1, r1, r2
 80002be:	bc80      	pop	{r7}
 80002c0:	46b8      	mov	r8, r7
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4657      	mov	r7, sl
 80002c8:	464e      	mov	r6, r9
 80002ca:	4645      	mov	r5, r8
 80002cc:	46de      	mov	lr, fp
 80002ce:	b5e0      	push	{r5, r6, r7, lr}
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	4692      	mov	sl, r2
 80002d6:	4699      	mov	r9, r3
 80002d8:	b083      	sub	sp, #12
 80002da:	428b      	cmp	r3, r1
 80002dc:	d830      	bhi.n	8000340 <__udivmoddi4+0x7c>
 80002de:	d02d      	beq.n	800033c <__udivmoddi4+0x78>
 80002e0:	4649      	mov	r1, r9
 80002e2:	4650      	mov	r0, sl
 80002e4:	f000 f8ba 	bl	800045c <__clzdi2>
 80002e8:	0029      	movs	r1, r5
 80002ea:	0006      	movs	r6, r0
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 f8b5 	bl	800045c <__clzdi2>
 80002f2:	1a33      	subs	r3, r6, r0
 80002f4:	4698      	mov	r8, r3
 80002f6:	3b20      	subs	r3, #32
 80002f8:	469b      	mov	fp, r3
 80002fa:	d433      	bmi.n	8000364 <__udivmoddi4+0xa0>
 80002fc:	465a      	mov	r2, fp
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	4642      	mov	r2, r8
 8000304:	001f      	movs	r7, r3
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d83a      	bhi.n	8000386 <__udivmoddi4+0xc2>
 8000310:	42af      	cmp	r7, r5
 8000312:	d100      	bne.n	8000316 <__udivmoddi4+0x52>
 8000314:	e078      	b.n	8000408 <__udivmoddi4+0x144>
 8000316:	465b      	mov	r3, fp
 8000318:	1ba4      	subs	r4, r4, r6
 800031a:	41bd      	sbcs	r5, r7
 800031c:	2b00      	cmp	r3, #0
 800031e:	da00      	bge.n	8000322 <__udivmoddi4+0x5e>
 8000320:	e075      	b.n	800040e <__udivmoddi4+0x14a>
 8000322:	2200      	movs	r2, #0
 8000324:	2300      	movs	r3, #0
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	465a      	mov	r2, fp
 800032e:	4093      	lsls	r3, r2
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	4642      	mov	r2, r8
 8000336:	4093      	lsls	r3, r2
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	e028      	b.n	800038e <__udivmoddi4+0xca>
 800033c:	4282      	cmp	r2, r0
 800033e:	d9cf      	bls.n	80002e0 <__udivmoddi4+0x1c>
 8000340:	2200      	movs	r2, #0
 8000342:	2300      	movs	r3, #0
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <__udivmoddi4+0x8e>
 800034e:	601c      	str	r4, [r3, #0]
 8000350:	605d      	str	r5, [r3, #4]
 8000352:	9800      	ldr	r0, [sp, #0]
 8000354:	9901      	ldr	r1, [sp, #4]
 8000356:	b003      	add	sp, #12
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	46bb      	mov	fp, r7
 800035c:	46b2      	mov	sl, r6
 800035e:	46a9      	mov	r9, r5
 8000360:	46a0      	mov	r8, r4
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	4642      	mov	r2, r8
 8000366:	2320      	movs	r3, #32
 8000368:	1a9b      	subs	r3, r3, r2
 800036a:	4652      	mov	r2, sl
 800036c:	40da      	lsrs	r2, r3
 800036e:	4641      	mov	r1, r8
 8000370:	0013      	movs	r3, r2
 8000372:	464a      	mov	r2, r9
 8000374:	408a      	lsls	r2, r1
 8000376:	0017      	movs	r7, r2
 8000378:	4642      	mov	r2, r8
 800037a:	431f      	orrs	r7, r3
 800037c:	4653      	mov	r3, sl
 800037e:	4093      	lsls	r3, r2
 8000380:	001e      	movs	r6, r3
 8000382:	42af      	cmp	r7, r5
 8000384:	d9c4      	bls.n	8000310 <__udivmoddi4+0x4c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4643      	mov	r3, r8
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0d9      	beq.n	8000348 <__udivmoddi4+0x84>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	0872      	lsrs	r2, r6, #1
 8000398:	431a      	orrs	r2, r3
 800039a:	4646      	mov	r6, r8
 800039c:	087b      	lsrs	r3, r7, #1
 800039e:	e00e      	b.n	80003be <__udivmoddi4+0xfa>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	d101      	bne.n	80003a8 <__udivmoddi4+0xe4>
 80003a4:	42a2      	cmp	r2, r4
 80003a6:	d80c      	bhi.n	80003c2 <__udivmoddi4+0xfe>
 80003a8:	1aa4      	subs	r4, r4, r2
 80003aa:	419d      	sbcs	r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	1924      	adds	r4, r4, r4
 80003b0:	416d      	adcs	r5, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	3e01      	subs	r6, #1
 80003b6:	1824      	adds	r4, r4, r0
 80003b8:	414d      	adcs	r5, r1
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d006      	beq.n	80003cc <__udivmoddi4+0x108>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d9ee      	bls.n	80003a0 <__udivmoddi4+0xdc>
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1924      	adds	r4, r4, r4
 80003c6:	416d      	adcs	r5, r5
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d1f8      	bne.n	80003be <__udivmoddi4+0xfa>
 80003cc:	9800      	ldr	r0, [sp, #0]
 80003ce:	9901      	ldr	r1, [sp, #4]
 80003d0:	465b      	mov	r3, fp
 80003d2:	1900      	adds	r0, r0, r4
 80003d4:	4169      	adcs	r1, r5
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	db24      	blt.n	8000424 <__udivmoddi4+0x160>
 80003da:	002b      	movs	r3, r5
 80003dc:	465a      	mov	r2, fp
 80003de:	4644      	mov	r4, r8
 80003e0:	40d3      	lsrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db2a      	blt.n	8000446 <__udivmoddi4+0x182>
 80003f0:	0026      	movs	r6, r4
 80003f2:	409e      	lsls	r6, r3
 80003f4:	0033      	movs	r3, r6
 80003f6:	0026      	movs	r6, r4
 80003f8:	4647      	mov	r7, r8
 80003fa:	40be      	lsls	r6, r7
 80003fc:	0032      	movs	r2, r6
 80003fe:	1a80      	subs	r0, r0, r2
 8000400:	4199      	sbcs	r1, r3
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x84>
 8000408:	42a3      	cmp	r3, r4
 800040a:	d8bc      	bhi.n	8000386 <__udivmoddi4+0xc2>
 800040c:	e783      	b.n	8000316 <__udivmoddi4+0x52>
 800040e:	4642      	mov	r2, r8
 8000410:	2320      	movs	r3, #32
 8000412:	2100      	movs	r1, #0
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	9100      	str	r1, [sp, #0]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	2201      	movs	r2, #1
 800041e:	40da      	lsrs	r2, r3
 8000420:	9201      	str	r2, [sp, #4]
 8000422:	e786      	b.n	8000332 <__udivmoddi4+0x6e>
 8000424:	4642      	mov	r2, r8
 8000426:	2320      	movs	r3, #32
 8000428:	1a9b      	subs	r3, r3, r2
 800042a:	002a      	movs	r2, r5
 800042c:	4646      	mov	r6, r8
 800042e:	409a      	lsls	r2, r3
 8000430:	0023      	movs	r3, r4
 8000432:	40f3      	lsrs	r3, r6
 8000434:	4644      	mov	r4, r8
 8000436:	4313      	orrs	r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	40e2      	lsrs	r2, r4
 800043c:	001c      	movs	r4, r3
 800043e:	465b      	mov	r3, fp
 8000440:	0015      	movs	r5, r2
 8000442:	2b00      	cmp	r3, #0
 8000444:	dad4      	bge.n	80003f0 <__udivmoddi4+0x12c>
 8000446:	4642      	mov	r2, r8
 8000448:	002f      	movs	r7, r5
 800044a:	2320      	movs	r3, #32
 800044c:	0026      	movs	r6, r4
 800044e:	4097      	lsls	r7, r2
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	40de      	lsrs	r6, r3
 8000454:	003b      	movs	r3, r7
 8000456:	4333      	orrs	r3, r6
 8000458:	e7cd      	b.n	80003f6 <__udivmoddi4+0x132>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__clzdi2>:
 800045c:	b510      	push	{r4, lr}
 800045e:	2900      	cmp	r1, #0
 8000460:	d103      	bne.n	800046a <__clzdi2+0xe>
 8000462:	f000 f807 	bl	8000474 <__clzsi2>
 8000466:	3020      	adds	r0, #32
 8000468:	e002      	b.n	8000470 <__clzdi2+0x14>
 800046a:	1c08      	adds	r0, r1, #0
 800046c:	f000 f802 	bl	8000474 <__clzsi2>
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__clzsi2>:
 8000474:	211c      	movs	r1, #28
 8000476:	2301      	movs	r3, #1
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0xe>
 800047e:	0c00      	lsrs	r0, r0, #16
 8000480:	3910      	subs	r1, #16
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	4298      	cmp	r0, r3
 8000486:	d301      	bcc.n	800048c <__clzsi2+0x18>
 8000488:	0a00      	lsrs	r0, r0, #8
 800048a:	3908      	subs	r1, #8
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	4298      	cmp	r0, r3
 8000490:	d301      	bcc.n	8000496 <__clzsi2+0x22>
 8000492:	0900      	lsrs	r0, r0, #4
 8000494:	3904      	subs	r1, #4
 8000496:	a202      	add	r2, pc, #8	; (adr r2, 80004a0 <__clzsi2+0x2c>)
 8000498:	5c10      	ldrb	r0, [r2, r0]
 800049a:	1840      	adds	r0, r0, r1
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	02020304 	.word	0x02020304
 80004a4:	01010101 	.word	0x01010101
	...

080004b0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b6:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_DMA_Init+0x84>)
 80004b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_DMA_Init+0x84>)
 80004bc:	2101      	movs	r1, #1
 80004be:	430a      	orrs	r2, r1
 80004c0:	631a      	str	r2, [r3, #48]	; 0x30
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <MX_DMA_Init+0x84>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_DMA_Init+0x88>)
 80004d0:	4a1a      	ldr	r2, [pc, #104]	; (800053c <MX_DMA_Init+0x8c>)
 80004d2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_DMA_Init+0x88>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_DMA_Init+0x88>)
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	01d2      	lsls	r2, r2, #7
 80004e0:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <MX_DMA_Init+0x88>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_DISABLE;
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_DMA_Init+0x88>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <MX_DMA_Init+0x88>)
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	0092      	lsls	r2, r2, #2
 80004f4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_DMA_Init+0x88>)
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	0112      	lsls	r2, r2, #4
 80004fc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_DMA_Init+0x88>)
 8000500:	2200      	movs	r2, #0
 8000502:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_DMA_Init+0x88>)
 8000506:	2200      	movs	r2, #0
 8000508:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_DMA_Init+0x88>)
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fd15 	bl	8000f3c <HAL_DMA_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_DMA_Init+0x6a>
  {
    Error_Handler();
 8000516:	f000 fa53 	bl	80009c0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	2009      	movs	r0, #9
 8000520:	f000 fcda 	bl	8000ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000524:	2009      	movs	r0, #9
 8000526:	f000 fcec 	bl	8000f02 <HAL_NVIC_EnableIRQ>

}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000
 8000538:	200000a0 	.word	0x200000a0
 800053c:	40020008 	.word	0x40020008

08000540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b089      	sub	sp, #36	; 0x24
 8000544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	240c      	movs	r4, #12
 8000548:	193b      	adds	r3, r7, r4
 800054a:	0018      	movs	r0, r3
 800054c:	2314      	movs	r3, #20
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f002 fe3f 	bl	80031d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800055a:	4b29      	ldr	r3, [pc, #164]	; (8000600 <MX_GPIO_Init+0xc0>)
 800055c:	2104      	movs	r1, #4
 800055e:	430a      	orrs	r2, r1
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000566:	2204      	movs	r2, #4
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	430a      	orrs	r2, r1
 8000578:	62da      	str	r2, [r3, #44]	; 0x2c
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <MX_GPIO_Init+0xc0>)
 800057c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_GPIO_Init+0xc0>)
 800058c:	2101      	movs	r1, #1
 800058e:	430a      	orrs	r2, r1
 8000590:	62da      	str	r2, [r3, #44]	; 0x2c
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_GPIO_Init+0xc0>)
 8000594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059e:	23a0      	movs	r3, #160	; 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fff8 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	0192      	lsls	r2, r2, #6
 80005b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2284      	movs	r2, #132	; 0x84
 80005b8:	0392      	lsls	r2, r2, #14
 80005ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <MX_GPIO_Init+0xc4>)
 80005c6:	0019      	movs	r1, r3
 80005c8:	0010      	movs	r0, r2
 80005ca:	f000 fe69 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ce:	0021      	movs	r1, r4
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2220      	movs	r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2201      	movs	r2, #1
 80005da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e8:	187a      	adds	r2, r7, r1
 80005ea:	23a0      	movs	r3, #160	; 0xa0
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fe55 	bl	80012a0 <HAL_GPIO_Init>

}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b009      	add	sp, #36	; 0x24
 80005fc:	bd90      	pop	{r4, r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40021000 	.word	0x40021000
 8000604:	50000800 	.word	0x50000800

08000608 <__io_putchar>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int __io_putchar(int ch)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000610:	2301      	movs	r3, #1
 8000612:	425b      	negs	r3, r3
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <__io_putchar+0x20>)
 8000618:	2201      	movs	r2, #1
 800061a:	f001 ff9d 	bl	8002558 <HAL_UART_Transmit>
	 return ch;
 800061e:	687b      	ldr	r3, [r7, #4]
}
 8000620:	0018      	movs	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000f0 	.word	0x200000f0

0800062c <__io_getchar>:

int __io_getchar(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <__io_getchar+0x3c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2208      	movs	r2, #8
 800063e:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	1df9      	adds	r1, r7, #7
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <__io_getchar+0x3c>)
 8000648:	2201      	movs	r2, #1
 800064a:	f002 f82d 	bl	80026a8 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY); //echo ch
 800064e:	2301      	movs	r3, #1
 8000650:	425b      	negs	r3, r3
 8000652:	1df9      	adds	r1, r7, #7
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <__io_getchar+0x3c>)
 8000656:	2201      	movs	r2, #1
 8000658:	f001 ff7e 	bl	8002558 <HAL_UART_Transmit>
	return ch;
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000f0 	.word	0x200000f0

0800066c <trojan>:
#define TRASNFER_SIZE 10000

//#define TROJAN_SECURE
#define CONTENTION

__attribute__((optimize(0))) void trojan(int input_symbol){
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  // Trying to balance this code in terms of time as much as possible  
  for(int i=0;i < MAX_SYMBOL; i++){
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	e070      	b.n	800075c <trojan+0xf0>
    if(i < input_symbol){
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	da00      	bge.n	8000684 <trojan+0x18>
      #ifdef CONTENTION
        SETUP_CONTENTION();
 8000682:	483b      	ldr	r0, [pc, #236]	; (8000770 <trojan+0x104>)
      #else
        SETUP_NO_CONTENTION();
      #endif
    }
    // With else it would be unbalanced in terms of LDRs
    if(i >= input_symbol){
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	db00      	blt.n	800068e <trojan+0x22>
    	SETUP_NO_CONTENTION();
 800068c:	4839      	ldr	r0, [pc, #228]	; (8000774 <trojan+0x108>)
    }
    HUND_LDRS();
 800068e:	6801      	ldr	r1, [r0, #0]
 8000690:	6801      	ldr	r1, [r0, #0]
 8000692:	6801      	ldr	r1, [r0, #0]
 8000694:	6801      	ldr	r1, [r0, #0]
 8000696:	6801      	ldr	r1, [r0, #0]
 8000698:	6801      	ldr	r1, [r0, #0]
 800069a:	6801      	ldr	r1, [r0, #0]
 800069c:	6801      	ldr	r1, [r0, #0]
 800069e:	6801      	ldr	r1, [r0, #0]
 80006a0:	6801      	ldr	r1, [r0, #0]
 80006a2:	6801      	ldr	r1, [r0, #0]
 80006a4:	6801      	ldr	r1, [r0, #0]
 80006a6:	6801      	ldr	r1, [r0, #0]
 80006a8:	6801      	ldr	r1, [r0, #0]
 80006aa:	6801      	ldr	r1, [r0, #0]
 80006ac:	6801      	ldr	r1, [r0, #0]
 80006ae:	6801      	ldr	r1, [r0, #0]
 80006b0:	6801      	ldr	r1, [r0, #0]
 80006b2:	6801      	ldr	r1, [r0, #0]
 80006b4:	6801      	ldr	r1, [r0, #0]
 80006b6:	6801      	ldr	r1, [r0, #0]
 80006b8:	6801      	ldr	r1, [r0, #0]
 80006ba:	6801      	ldr	r1, [r0, #0]
 80006bc:	6801      	ldr	r1, [r0, #0]
 80006be:	6801      	ldr	r1, [r0, #0]
 80006c0:	6801      	ldr	r1, [r0, #0]
 80006c2:	6801      	ldr	r1, [r0, #0]
 80006c4:	6801      	ldr	r1, [r0, #0]
 80006c6:	6801      	ldr	r1, [r0, #0]
 80006c8:	6801      	ldr	r1, [r0, #0]
 80006ca:	6801      	ldr	r1, [r0, #0]
 80006cc:	6801      	ldr	r1, [r0, #0]
 80006ce:	6801      	ldr	r1, [r0, #0]
 80006d0:	6801      	ldr	r1, [r0, #0]
 80006d2:	6801      	ldr	r1, [r0, #0]
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	6801      	ldr	r1, [r0, #0]
 80006d8:	6801      	ldr	r1, [r0, #0]
 80006da:	6801      	ldr	r1, [r0, #0]
 80006dc:	6801      	ldr	r1, [r0, #0]
 80006de:	6801      	ldr	r1, [r0, #0]
 80006e0:	6801      	ldr	r1, [r0, #0]
 80006e2:	6801      	ldr	r1, [r0, #0]
 80006e4:	6801      	ldr	r1, [r0, #0]
 80006e6:	6801      	ldr	r1, [r0, #0]
 80006e8:	6801      	ldr	r1, [r0, #0]
 80006ea:	6801      	ldr	r1, [r0, #0]
 80006ec:	6801      	ldr	r1, [r0, #0]
 80006ee:	6801      	ldr	r1, [r0, #0]
 80006f0:	6801      	ldr	r1, [r0, #0]
 80006f2:	6801      	ldr	r1, [r0, #0]
 80006f4:	6801      	ldr	r1, [r0, #0]
 80006f6:	6801      	ldr	r1, [r0, #0]
 80006f8:	6801      	ldr	r1, [r0, #0]
 80006fa:	6801      	ldr	r1, [r0, #0]
 80006fc:	6801      	ldr	r1, [r0, #0]
 80006fe:	6801      	ldr	r1, [r0, #0]
 8000700:	6801      	ldr	r1, [r0, #0]
 8000702:	6801      	ldr	r1, [r0, #0]
 8000704:	6801      	ldr	r1, [r0, #0]
 8000706:	6801      	ldr	r1, [r0, #0]
 8000708:	6801      	ldr	r1, [r0, #0]
 800070a:	6801      	ldr	r1, [r0, #0]
 800070c:	6801      	ldr	r1, [r0, #0]
 800070e:	6801      	ldr	r1, [r0, #0]
 8000710:	6801      	ldr	r1, [r0, #0]
 8000712:	6801      	ldr	r1, [r0, #0]
 8000714:	6801      	ldr	r1, [r0, #0]
 8000716:	6801      	ldr	r1, [r0, #0]
 8000718:	6801      	ldr	r1, [r0, #0]
 800071a:	6801      	ldr	r1, [r0, #0]
 800071c:	6801      	ldr	r1, [r0, #0]
 800071e:	6801      	ldr	r1, [r0, #0]
 8000720:	6801      	ldr	r1, [r0, #0]
 8000722:	6801      	ldr	r1, [r0, #0]
 8000724:	6801      	ldr	r1, [r0, #0]
 8000726:	6801      	ldr	r1, [r0, #0]
 8000728:	6801      	ldr	r1, [r0, #0]
 800072a:	6801      	ldr	r1, [r0, #0]
 800072c:	6801      	ldr	r1, [r0, #0]
 800072e:	6801      	ldr	r1, [r0, #0]
 8000730:	6801      	ldr	r1, [r0, #0]
 8000732:	6801      	ldr	r1, [r0, #0]
 8000734:	6801      	ldr	r1, [r0, #0]
 8000736:	6801      	ldr	r1, [r0, #0]
 8000738:	6801      	ldr	r1, [r0, #0]
 800073a:	6801      	ldr	r1, [r0, #0]
 800073c:	6801      	ldr	r1, [r0, #0]
 800073e:	6801      	ldr	r1, [r0, #0]
 8000740:	6801      	ldr	r1, [r0, #0]
 8000742:	6801      	ldr	r1, [r0, #0]
 8000744:	6801      	ldr	r1, [r0, #0]
 8000746:	6801      	ldr	r1, [r0, #0]
 8000748:	6801      	ldr	r1, [r0, #0]
 800074a:	6801      	ldr	r1, [r0, #0]
 800074c:	6801      	ldr	r1, [r0, #0]
 800074e:	6801      	ldr	r1, [r0, #0]
 8000750:	6801      	ldr	r1, [r0, #0]
 8000752:	6801      	ldr	r1, [r0, #0]
 8000754:	6801      	ldr	r1, [r0, #0]
  for(int i=0;i < MAX_SYMBOL; i++){
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2bff      	cmp	r3, #255	; 0xff
 8000760:	dc00      	bgt.n	8000764 <trojan+0xf8>
 8000762:	e78a      	b.n	800067a <trojan+0xe>
  }
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}
 800076e:	0000      	.short	0x0000
 8000770:	20000000 	.word	0x20000000
 8000774:	50000000 	.word	0x50000000

08000778 <config_DMA_M2M>:

uint32_t src;
uint32_t dst;

void config_DMA_M2M(int size){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
// Make this vars global. The stack will be destroyed.
  // static int src, dst;
  SysTick->CTRL = 0x0; //Clean SysTick Default Configs
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <config_DMA_M2M+0x28>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = (uint32_t)(0xFFFFFF - 1); //max counter value
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <config_DMA_M2M+0x28>)
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <config_DMA_M2M+0x2c>)
 800078a:	605a      	str	r2, [r3, #4]
  //need to comment __HAL_DMA_ENABLE in function HAL_DMA_Start()
  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)&src,
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <config_DMA_M2M+0x30>)
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <config_DMA_M2M+0x34>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <config_DMA_M2M+0x38>)
 8000794:	f000 fc4a 	bl	800102c <HAL_DMA_Start_IT>
                    (uint32_t)&dst, size);
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	e000e010 	.word	0xe000e010
 80007a4:	00fffffe 	.word	0x00fffffe
 80007a8:	200000ec 	.word	0x200000ec
 80007ac:	200000e8 	.word	0x200000e8
 80007b0:	200000a0 	.word	0x200000a0

080007b4 <covert_channel>:

int input_symbol = 0, sample = 0;

__attribute__((optimize(0))) void covert_channel(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  int *ptr_cnt = &SysTick->VAL; // (24 bits)
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <covert_channel+0x40>)
 80007bc:	607b      	str	r3, [r7, #4]
  int *ptr_ctr = &SysTick->CTRL; // (24 bits)
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <covert_channel+0x44>)
 80007c0:	603b      	str	r3, [r7, #0]
  // trigger chain of interrupts (DMA transfers)
  config_DMA_M2M(TRASNFER_SIZE);
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <covert_channel+0x48>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ffd7 	bl	8000778 <config_DMA_M2M>
  *ptr_cnt = 0; // reset the val  counter
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
  *ptr_ctr = 0x05; // starts the systick
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2205      	movs	r2, #5
 80007d4:	601a      	str	r2, [r3, #0]
  //start DMA transaction
  //need to comment this line in function HAL_DMA_Start()
  __HAL_DMA_ENABLE(&hdma_memtomem_dma1_channel1);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <covert_channel+0x4c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <covert_channel+0x4c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2101      	movs	r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
  #ifdef TROJAN_SECURE
    trojan_s(input_symbol);
  #else
    trojan(input_symbol);
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <covert_channel+0x50>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff ff3e 	bl	800066c <trojan>
  #endif
  while(1);
 80007f0:	e7fe      	b.n	80007f0 <covert_channel+0x3c>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	e000e018 	.word	0xe000e018
 80007f8:	e000e010 	.word	0xe000e010
 80007fc:	00002710 	.word	0x00002710
 8000800:	200000a0 	.word	0x200000a0
 8000804:	2000008c 	.word	0x2000008c

08000808 <DMA1_Channel1_IRQHandler>:
/* 
* The channel is measured in the DMA ISR to avoid accessing the SRAM,which would 
* introduce a lot of noise in the covert-channel. (Remove the need of a flag
* shared between ISR and code, that would generate a lot of SRAM accesses)
*/
__attribute__((optimize(0))) void DMA1_Channel1_IRQHandler(){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  // int *ptr_cnt = 0x40000000+0x24; // TIM2 (16 bits)
  int *ptr_cnt = &SysTick->VAL; // (24 bits)
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <DMA1_Channel1_IRQHandler+0x94>)
 8000810:	607b      	str	r3, [r7, #4]
  int *ptr_ctr = &SysTick->CTRL; // (24 bits)
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <DMA1_Channel1_IRQHandler+0x98>)
 8000814:	603b      	str	r3, [r7, #0]
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <DMA1_Channel1_IRQHandler+0x9c>)
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fc65 	bl	80010e8 <HAL_DMA_IRQHandler>
  printf("(%d, %d)\r\n", input_symbol, (0xFFFFFF - 1) - *ptr_cnt);
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <DMA1_Channel1_IRQHandler+0xa0>)
 8000820:	6819      	ldr	r1, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a21      	ldr	r2, [pc, #132]	; (80008ac <DMA1_Channel1_IRQHandler+0xa4>)
 8000828:	1ad2      	subs	r2, r2, r3
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <DMA1_Channel1_IRQHandler+0xa8>)
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fcd9 	bl	80031e4 <iprintf>
  sample++;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <DMA1_Channel1_IRQHandler+0xac>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <DMA1_Channel1_IRQHandler+0xac>)
 800083a:	601a      	str	r2, [r3, #0]
  // N_SAMPLES per input symbol
  if(sample >= N_SAMPLES){
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <DMA1_Channel1_IRQHandler+0xac>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b63      	cmp	r3, #99	; 0x63
 8000842:	dd10      	ble.n	8000866 <DMA1_Channel1_IRQHandler+0x5e>
    if(input_symbol < MAX_SYMBOL-1){
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <DMA1_Channel1_IRQHandler+0xa0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2bfe      	cmp	r3, #254	; 0xfe
 800084a:	dc08      	bgt.n	800085e <DMA1_Channel1_IRQHandler+0x56>
      input_symbol++;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <DMA1_Channel1_IRQHandler+0xa0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <DMA1_Channel1_IRQHandler+0xa0>)
 8000854:	601a      	str	r2, [r3, #0]
      sample = 0;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <DMA1_Channel1_IRQHandler+0xac>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e003      	b.n	8000866 <DMA1_Channel1_IRQHandler+0x5e>
    }
    else {
      input_symbol = 0;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <DMA1_Channel1_IRQHandler+0xa0>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
     // printf("END\r\n");
      return;
 8000864:	e017      	b.n	8000896 <DMA1_Channel1_IRQHandler+0x8e>
    }
  }
  config_DMA_M2M(TRASNFER_SIZE);
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <DMA1_Channel1_IRQHandler+0xb0>)
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff85 	bl	8000778 <config_DMA_M2M>
  *ptr_cnt = 0; // reset the val  counter
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
  *ptr_ctr = 0x05; // starts the systick
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	2205      	movs	r2, #5
 8000878:	601a      	str	r2, [r3, #0]
  //start DMA transaction
  //need to comment this line in function HAL_DMA_Start()
  __HAL_DMA_ENABLE(&hdma_memtomem_dma1_channel1);
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <DMA1_Channel1_IRQHandler+0x9c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <DMA1_Channel1_IRQHandler+0x9c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	601a      	str	r2, [r3, #0]
  #ifdef TROJAN_SECURE
    trojan_s(input_symbol);
  #else
    trojan(input_symbol);
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <DMA1_Channel1_IRQHandler+0xa0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff feec 	bl	800066c <trojan>
  #endif
  return;
 8000894:	46c0      	nop			; (mov r8, r8)
  
}
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}
 800089c:	e000e018 	.word	0xe000e018
 80008a0:	e000e010 	.word	0xe000e010
 80008a4:	200000a0 	.word	0x200000a0
 80008a8:	2000008c 	.word	0x2000008c
 80008ac:	00fffffe 	.word	0x00fffffe
 80008b0:	08004138 	.word	0x08004138
 80008b4:	20000090 	.word	0x20000090
 80008b8:	00002710 	.word	0x00002710

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f000 f9ee 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f80a 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f7ff fe3a 	bl	8000540 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008cc:	f000 f94a 	bl	8000b64 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80008d0:	f7ff fdee 	bl	80004b0 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
//  configure_mpu();
  covert_channel();
 80008d4:	f7ff ff6e 	bl	80007b4 <covert_channel>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <main+0x1c>
	...

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b09f      	sub	sp, #124	; 0x7c
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	2440      	movs	r4, #64	; 0x40
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2338      	movs	r3, #56	; 0x38
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f002 fc71 	bl	80031d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f2:	232c      	movs	r3, #44	; 0x2c
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	0018      	movs	r0, r3
 80008f8:	2314      	movs	r3, #20
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f002 fc69 	bl	80031d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	0018      	movs	r0, r3
 8000906:	2328      	movs	r3, #40	; 0x28
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f002 fc62 	bl	80031d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <SystemClock_Config+0xdc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a29      	ldr	r2, [pc, #164]	; (80009bc <SystemClock_Config+0xe0>)
 8000916:	401a      	ands	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <SystemClock_Config+0xdc>)
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	0109      	lsls	r1, r1, #4
 800091e:	430a      	orrs	r2, r1
 8000920:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000922:	0021      	movs	r1, r4
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	22a0      	movs	r2, #160	; 0xa0
 800092e:	02d2      	lsls	r2, r2, #11
 8000930:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2202      	movs	r2, #2
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	0252      	lsls	r2, r2, #9
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	22c0      	movs	r2, #192	; 0xc0
 8000944:	0312      	lsls	r2, r2, #12
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	03d2      	lsls	r2, r2, #15
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	187b      	adds	r3, r7, r1
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fe40 	bl	80015d8 <HAL_RCC_OscConfig>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800095c:	f000 f830 	bl	80009c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	212c      	movs	r1, #44	; 0x2c
 8000962:	187b      	adds	r3, r7, r1
 8000964:	220f      	movs	r2, #15
 8000966:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2203      	movs	r2, #3
 800096c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2101      	movs	r1, #1
 8000984:	0018      	movs	r0, r3
 8000986:	f001 f9fb 	bl	8001d80 <HAL_RCC_ClockConfig>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800098e:	f000 f817 	bl	80009c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2202      	movs	r2, #2
 8000996:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fc11 	bl	80021c8 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009aa:	f000 f809 	bl	80009c0 <Error_Handler>
  }
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b01f      	add	sp, #124	; 0x7c
 80009b4:	bd90      	pop	{r4, r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	40007000 	.word	0x40007000
 80009bc:	ffffe7ff 	.word	0xffffe7ff

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <HAL_MspInit+0x24>)
 80009d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x24>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	430a      	orrs	r2, r1
 80009da:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <HAL_MspInit+0x24>)
 80009de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_MspInit+0x24>)
 80009e2:	2180      	movs	r1, #128	; 0x80
 80009e4:	0549      	lsls	r1, r1, #21
 80009e6:	430a      	orrs	r2, r1
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f996 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e00a      	b.n	8000a4a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a34:	f7ff fdfa 	bl	800062c <__io_getchar>
 8000a38:	0001      	movs	r1, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	60ba      	str	r2, [r7, #8]
 8000a40:	b2ca      	uxtb	r2, r1
 8000a42:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3301      	adds	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	dbf0      	blt.n	8000a34 <_read+0x12>
	}

return len;
 8000a52:	687b      	ldr	r3, [r7, #4]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b006      	add	sp, #24
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e009      	b.n	8000a82 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	60ba      	str	r2, [r7, #8]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fdc6 	bl	8000608 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbf1      	blt.n	8000a6e <_write+0x12>
	}
	return len;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b006      	add	sp, #24
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_close>:

int _close(int file)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	425b      	negs	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	0192      	lsls	r2, r2, #6
 8000ab8:	605a      	str	r2, [r3, #4]
	return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_isatty>:

int _isatty(int file)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	return 1;
 8000acc:	2301      	movs	r3, #1
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b004      	add	sp, #16
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f002 fb30 	bl	8003180 <__errno>
 8000b20:	0003      	movs	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	425b      	negs	r3, r3
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	18d2      	adds	r2, r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b006      	add	sp, #24
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20005000 	.word	0x20005000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20000094 	.word	0x20000094
 8000b54:	20000188 	.word	0x20000188

08000b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_USART2_UART_Init+0x5c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b70:	22e1      	movs	r2, #225	; 0xe1
 8000b72:	0252      	lsls	r2, r2, #9
 8000b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <MX_USART2_UART_Init+0x58>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 fc81 	bl	80024b0 <HAL_UART_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f7ff ff05 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200000f0 	.word	0x200000f0
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	240c      	movs	r4, #12
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f002 fafc 	bl	80031d4 <memset>
  if(uartHandle->Instance==USART2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <HAL_UART_MspInit+0x80>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d129      	bne.n	8000c3a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_UART_MspInit+0x84>)
 8000be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0x84>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0289      	lsls	r1, r1, #10
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_UART_MspInit+0x84>)
 8000bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_UART_MspInit+0x84>)
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0x84>)
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	2201      	movs	r2, #1
 8000c06:	4013      	ands	r3, r2
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c0c:	0021      	movs	r1, r4
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	220c      	movs	r2, #12
 8000c12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2202      	movs	r2, #2
 8000c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2203      	movs	r2, #3
 8000c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2204      	movs	r2, #4
 8000c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	187a      	adds	r2, r7, r1
 8000c2e:	23a0      	movs	r3, #160	; 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fb33 	bl	80012a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b009      	add	sp, #36	; 0x24
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40021000 	.word	0x40021000

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c76:	f7ff ff6f 	bl	8000b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f002 fa87 	bl	800318c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fe1d 	bl	80008bc <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
   ldr   r0, =_estack
 8000c84:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c90:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 8000c94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c98:	20000188 	.word	0x20000188

08000c9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_COMP_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x3c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_Init+0x3c>)
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 f811 	bl	8000ce0 <HAL_InitTick>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e001      	b.n	8000cce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cca:	f7ff fe7f 	bl	80009cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_InitTick+0x5c>)
 8000cea:	681c      	ldr	r4, [r3, #0]
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_InitTick+0x60>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	23fa      	movs	r3, #250	; 0xfa
 8000cf4:	0098      	lsls	r0, r3, #2
 8000cf6:	f7ff fa11 	bl	800011c <__udivsi3>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	0020      	movs	r0, r4
 8000d00:	f7ff fa0c 	bl	800011c <__udivsi3>
 8000d04:	0003      	movs	r3, r0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 f90b 	bl	8000f22 <HAL_SYSTICK_Config>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e00f      	b.n	8000d34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d80b      	bhi.n	8000d32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	425b      	negs	r3, r3
 8000d20:	2200      	movs	r2, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f8d8 	bl	8000ed8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_InitTick+0x64>)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b003      	add	sp, #12
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x1c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	001a      	movs	r2, r3
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x20>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	18d2      	adds	r2, r2, r3
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_IncTick+0x20>)
 8000d5a:	601a      	str	r2, [r3, #0]
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000174 	.word	0x20000174

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b02      	ldr	r3, [pc, #8]	; (8000d7c <HAL_GetTick+0x10>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000174 	.word	0x20000174

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0002      	movs	r2, r0
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b7f      	cmp	r3, #127	; 0x7f
 8000d92:	d809      	bhi.n	8000da8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	001a      	movs	r2, r3
 8000d9a:	231f      	movs	r3, #31
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_EnableIRQ+0x30>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	4091      	lsls	r1, r2
 8000da4:	000a      	movs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
  }
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	0002      	movs	r2, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc8:	d828      	bhi.n	8000e1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dca:	4a2f      	ldr	r2, [pc, #188]	; (8000e88 <__NVIC_SetPriority+0xd4>)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	33c0      	adds	r3, #192	; 0xc0
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	589b      	ldr	r3, [r3, r2]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	; 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	481f      	ldr	r0, [pc, #124]	; (8000e88 <__NVIC_SetPriority+0xd4>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	430a      	orrs	r2, r1
 8000e14:	33c0      	adds	r3, #192	; 0xc0
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e1a:	e031      	b.n	8000e80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	0019      	movs	r1, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	400b      	ands	r3, r1
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3306      	adds	r3, #6
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	18d3      	adds	r3, r2, r3
 8000e32:	3304      	adds	r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1dfa      	adds	r2, r7, #7
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	400a      	ands	r2, r1
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	21ff      	movs	r1, #255	; 0xff
 8000e44:	4091      	lsls	r1, r2
 8000e46:	000a      	movs	r2, r1
 8000e48:	43d2      	mvns	r2, r2
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	22ff      	movs	r2, #255	; 0xff
 8000e54:	401a      	ands	r2, r3
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	4003      	ands	r3, r0
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <__NVIC_SetPriority+0xd8>)
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	4023      	ands	r3, r4
 8000e70:	3b08      	subs	r3, #8
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	430a      	orrs	r2, r1
 8000e76:	3306      	adds	r3, #6
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	18c3      	adds	r3, r0, r3
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b003      	add	sp, #12
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	1e5a      	subs	r2, r3, #1
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	045b      	lsls	r3, r3, #17
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d301      	bcc.n	8000ea8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e010      	b.n	8000eca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <SysTick_Config+0x44>)
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	3a01      	subs	r2, #1
 8000eae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff ff7c 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x44>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x44>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	1c02      	adds	r2, r0, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	0002      	movs	r2, r0
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff33 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ffaf 	bl	8000e90 <SysTick_Config>
 8000f32:	0003      	movs	r3, r0
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e061      	b.n	8001012 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a32      	ldr	r2, [pc, #200]	; (800101c <HAL_DMA_Init+0xe0>)
 8000f54:	4694      	mov	ip, r2
 8000f56:	4463      	add	r3, ip
 8000f58:	2114      	movs	r1, #20
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff f8de 	bl	800011c <__udivsi3>
 8000f60:	0003      	movs	r3, r0
 8000f62:	009a      	lsls	r2, r3, #2
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <HAL_DMA_Init+0xe4>)
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2225      	movs	r2, #37	; 0x25
 8000f72:	2102      	movs	r1, #2
 8000f74:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4a28      	ldr	r2, [pc, #160]	; (8001024 <HAL_DMA_Init+0xe8>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	01db      	lsls	r3, r3, #7
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d018      	beq.n	8000ffa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_DMA_Init+0xec>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	211c      	movs	r1, #28
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	4099      	lsls	r1, r3
 8000fd8:	000b      	movs	r3, r1
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_DMA_Init+0xec>)
 8000fde:	400a      	ands	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_DMA_Init+0xec>)
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	201c      	movs	r0, #28
 8000ff0:	4003      	ands	r3, r0
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_DMA_Init+0xec>)
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2225      	movs	r2, #37	; 0x25
 8001004:	2101      	movs	r1, #1
 8001006:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2224      	movs	r2, #36	; 0x24
 800100c:	2100      	movs	r1, #0
 800100e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	0018      	movs	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	bffdfff8 	.word	0xbffdfff8
 8001020:	40020000 	.word	0x40020000
 8001024:	ffff800f 	.word	0xffff800f
 8001028:	400200a8 	.word	0x400200a8

0800102c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800103a:	2317      	movs	r3, #23
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2224      	movs	r2, #36	; 0x24
 8001046:	5c9b      	ldrb	r3, [r3, r2]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_DMA_Start_IT+0x24>
 800104c:	2302      	movs	r3, #2
 800104e:	e047      	b.n	80010e0 <HAL_DMA_Start_IT+0xb4>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	2101      	movs	r1, #1
 8001056:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2225      	movs	r2, #37	; 0x25
 800105c:	5c9b      	ldrb	r3, [r3, r2]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d132      	bne.n	80010ca <HAL_DMA_Start_IT+0x9e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2225      	movs	r2, #37	; 0x25
 8001068:	2102      	movs	r1, #2
 800106a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f8db 	bl	8001244 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	2b00      	cmp	r3, #0
 8001094:	d008      	beq.n	80010a8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	210e      	movs	r1, #14
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e018      	b.n	80010da <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2104      	movs	r1, #4
 80010b4:	438a      	bics	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	210a      	movs	r1, #10
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e007      	b.n	80010da <HAL_DMA_Start_IT+0xae>
    // __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2224      	movs	r2, #36	; 0x24
 80010ce:	2100      	movs	r1, #0
 80010d0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010d2:	2317      	movs	r3, #23
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80010da:	2317      	movs	r3, #23
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	781b      	ldrb	r3, [r3, #0]
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b006      	add	sp, #24
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001104:	221c      	movs	r2, #28
 8001106:	4013      	ands	r3, r2
 8001108:	2204      	movs	r2, #4
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	d026      	beq.n	8001162 <HAL_DMA_IRQHandler+0x7a>
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2204      	movs	r2, #4
 8001118:	4013      	ands	r3, r2
 800111a:	d022      	beq.n	8001162 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2220      	movs	r2, #32
 8001124:	4013      	ands	r3, r2
 8001126:	d107      	bne.n	8001138 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2104      	movs	r1, #4
 8001134:	438a      	bics	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	221c      	movs	r2, #28
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	2104      	movs	r1, #4
 8001146:	4091      	lsls	r1, r2
 8001148:	000a      	movs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	2b00      	cmp	r3, #0
 8001152:	d100      	bne.n	8001156 <HAL_DMA_IRQHandler+0x6e>
 8001154:	e071      	b.n	800123a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	0010      	movs	r0, r2
 800115e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001160:	e06b      	b.n	800123a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	221c      	movs	r2, #28
 8001168:	4013      	ands	r3, r2
 800116a:	2202      	movs	r2, #2
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	d02d      	beq.n	80011d2 <HAL_DMA_IRQHandler+0xea>
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d029      	beq.n	80011d2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2220      	movs	r2, #32
 8001186:	4013      	ands	r3, r2
 8001188:	d10b      	bne.n	80011a2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	210a      	movs	r1, #10
 8001196:	438a      	bics	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2225      	movs	r2, #37	; 0x25
 800119e:	2101      	movs	r1, #1
 80011a0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	221c      	movs	r2, #28
 80011a8:	401a      	ands	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	2102      	movs	r1, #2
 80011b0:	4091      	lsls	r1, r2
 80011b2:	000a      	movs	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2224      	movs	r2, #36	; 0x24
 80011ba:	2100      	movs	r1, #0
 80011bc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d039      	beq.n	800123a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	0010      	movs	r0, r2
 80011ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011d0:	e033      	b.n	800123a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	221c      	movs	r2, #28
 80011d8:	4013      	ands	r3, r2
 80011da:	2208      	movs	r2, #8
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	d02a      	beq.n	800123c <HAL_DMA_IRQHandler+0x154>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2208      	movs	r2, #8
 80011ea:	4013      	ands	r3, r2
 80011ec:	d026      	beq.n	800123c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	210e      	movs	r1, #14
 80011fa:	438a      	bics	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	221c      	movs	r2, #28
 8001204:	401a      	ands	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2101      	movs	r1, #1
 800120c:	4091      	lsls	r1, r2
 800120e:	000a      	movs	r2, r1
 8001210:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2225      	movs	r2, #37	; 0x25
 800121c:	2101      	movs	r1, #1
 800121e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	0010      	movs	r0, r2
 8001238:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46c0      	nop			; (mov r8, r8)
}
 800123e:	46bd      	mov	sp, r7
 8001240:	b004      	add	sp, #16
 8001242:	bd80      	pop	{r7, pc}

08001244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	221c      	movs	r2, #28
 8001258:	401a      	ands	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	2101      	movs	r1, #1
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d108      	bne.n	8001288 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001286:	e007      	b.n	8001298 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	60da      	str	r2, [r3, #12]
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b004      	add	sp, #16
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012b6:	e155      	b.n	8001564 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4091      	lsls	r1, r2
 80012c2:	000a      	movs	r2, r1
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d100      	bne.n	80012d0 <HAL_GPIO_Init+0x30>
 80012ce:	e146      	b.n	800155e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2203      	movs	r2, #3
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d005      	beq.n	80012e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	409a      	lsls	r2, r3
 800130a:	0013      	movs	r3, r2
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	43da      	mvns	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	2201      	movs	r2, #1
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2203      	movs	r2, #3
 8001350:	4013      	ands	r3, r2
 8001352:	2b03      	cmp	r3, #3
 8001354:	d017      	beq.n	8001386 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	43da      	mvns	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	4013      	ands	r3, r2
 800138e:	2b02      	cmp	r3, #2
 8001390:	d123      	bne.n	80013da <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	58d3      	ldr	r3, [r2, r3]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2207      	movs	r2, #7
 80013a4:	4013      	ands	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2107      	movs	r1, #7
 80013be:	400b      	ands	r3, r1
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	6939      	ldr	r1, [r7, #16]
 80013d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2203      	movs	r2, #3
 80013f8:	401a      	ands	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	23c0      	movs	r3, #192	; 0xc0
 8001414:	029b      	lsls	r3, r3, #10
 8001416:	4013      	ands	r3, r2
 8001418:	d100      	bne.n	800141c <HAL_GPIO_Init+0x17c>
 800141a:	e0a0      	b.n	800155e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <HAL_GPIO_Init+0x2dc>)
 800141e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <HAL_GPIO_Init+0x2dc>)
 8001422:	2101      	movs	r1, #1
 8001424:	430a      	orrs	r2, r1
 8001426:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001428:	4a55      	ldr	r2, [pc, #340]	; (8001580 <HAL_GPIO_Init+0x2e0>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	589b      	ldr	r3, [r3, r2]
 8001434:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2203      	movs	r2, #3
 800143a:	4013      	ands	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	409a      	lsls	r2, r3
 8001442:	0013      	movs	r3, r2
 8001444:	43da      	mvns	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	05db      	lsls	r3, r3, #23
 8001452:	429a      	cmp	r2, r3
 8001454:	d01f      	beq.n	8001496 <HAL_GPIO_Init+0x1f6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4a      	ldr	r2, [pc, #296]	; (8001584 <HAL_GPIO_Init+0x2e4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x1f2>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a49      	ldr	r2, [pc, #292]	; (8001588 <HAL_GPIO_Init+0x2e8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x1ee>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2ec>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x1ea>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a47      	ldr	r2, [pc, #284]	; (8001590 <HAL_GPIO_Init+0x2f0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x1e6>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a46      	ldr	r2, [pc, #280]	; (8001594 <HAL_GPIO_Init+0x2f4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x1e2>
 800147e:	2305      	movs	r3, #5
 8001480:	e00a      	b.n	8001498 <HAL_GPIO_Init+0x1f8>
 8001482:	2306      	movs	r3, #6
 8001484:	e008      	b.n	8001498 <HAL_GPIO_Init+0x1f8>
 8001486:	2304      	movs	r3, #4
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x1f8>
 800148a:	2303      	movs	r3, #3
 800148c:	e004      	b.n	8001498 <HAL_GPIO_Init+0x1f8>
 800148e:	2302      	movs	r3, #2
 8001490:	e002      	b.n	8001498 <HAL_GPIO_Init+0x1f8>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x1f8>
 8001496:	2300      	movs	r3, #0
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	2103      	movs	r1, #3
 800149c:	400a      	ands	r2, r1
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	4093      	lsls	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a8:	4935      	ldr	r1, [pc, #212]	; (8001580 <HAL_GPIO_Init+0x2e0>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43da      	mvns	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4013      	ands	r3, r2
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43da      	mvns	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	029b      	lsls	r3, r3, #10
 80014f8:	4013      	ands	r3, r2
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43da      	mvns	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	035b      	lsls	r3, r3, #13
 8001522:	4013      	ands	r3, r2
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	039b      	lsls	r3, r3, #14
 800154c:	4013      	ands	r3, r2
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_GPIO_Init+0x2f8>)
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	40da      	lsrs	r2, r3
 800156c:	1e13      	subs	r3, r2, #0
 800156e:	d000      	beq.n	8001572 <HAL_GPIO_Init+0x2d2>
 8001570:	e6a2      	b.n	80012b8 <HAL_GPIO_Init+0x18>
  }
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b006      	add	sp, #24
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	50000400 	.word	0x50000400
 8001588:	50000800 	.word	0x50000800
 800158c:	50000c00 	.word	0x50000c00
 8001590:	50001000 	.word	0x50001000
 8001594:	50001c00 	.word	0x50001c00
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	0008      	movs	r0, r1
 80015a6:	0011      	movs	r1, r2
 80015a8:	1cbb      	adds	r3, r7, #2
 80015aa:	1c02      	adds	r2, r0, #0
 80015ac:	801a      	strh	r2, [r3, #0]
 80015ae:	1c7b      	adds	r3, r7, #1
 80015b0:	1c0a      	adds	r2, r1, #0
 80015b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b4:	1c7b      	adds	r3, r7, #1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d004      	beq.n	80015c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015bc:	1cbb      	adds	r3, r7, #2
 80015be:	881a      	ldrh	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80015c4:	e003      	b.n	80015ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f000 fbbf 	bl	8001d6a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ec:	4bc9      	ldr	r3, [pc, #804]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	220c      	movs	r2, #12
 80015f2:	4013      	ands	r3, r2
 80015f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f6:	4bc7      	ldr	r3, [pc, #796]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	4013      	ands	r3, r2
 800160a:	d100      	bne.n	800160e <HAL_RCC_OscConfig+0x36>
 800160c:	e07e      	b.n	800170c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	2b08      	cmp	r3, #8
 8001612:	d007      	beq.n	8001624 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d112      	bne.n	8001640 <HAL_RCC_OscConfig+0x68>
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	429a      	cmp	r2, r3
 8001622:	d10d      	bne.n	8001640 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	4bbb      	ldr	r3, [pc, #748]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	029b      	lsls	r3, r3, #10
 800162c:	4013      	ands	r3, r2
 800162e:	d100      	bne.n	8001632 <HAL_RCC_OscConfig+0x5a>
 8001630:	e06b      	b.n	800170a <HAL_RCC_OscConfig+0x132>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d167      	bne.n	800170a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	f000 fb95 	bl	8001d6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	429a      	cmp	r2, r3
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0x84>
 800164c:	4bb1      	ldr	r3, [pc, #708]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4bb0      	ldr	r3, [pc, #704]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0249      	lsls	r1, r1, #9
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e027      	b.n	80016ac <HAL_RCC_OscConfig+0xd4>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	23a0      	movs	r3, #160	; 0xa0
 8001662:	02db      	lsls	r3, r3, #11
 8001664:	429a      	cmp	r2, r3
 8001666:	d10e      	bne.n	8001686 <HAL_RCC_OscConfig+0xae>
 8001668:	4baa      	ldr	r3, [pc, #680]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4ba9      	ldr	r3, [pc, #676]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	02c9      	lsls	r1, r1, #11
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	4ba7      	ldr	r3, [pc, #668]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4ba6      	ldr	r3, [pc, #664]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	0249      	lsls	r1, r1, #9
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e012      	b.n	80016ac <HAL_RCC_OscConfig+0xd4>
 8001686:	4ba3      	ldr	r3, [pc, #652]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4ba2      	ldr	r3, [pc, #648]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800168c:	49a2      	ldr	r1, [pc, #648]	; (8001918 <HAL_RCC_OscConfig+0x340>)
 800168e:	400a      	ands	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	4ba0      	ldr	r3, [pc, #640]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4b9c      	ldr	r3, [pc, #624]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b9b      	ldr	r3, [pc, #620]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80016a6:	499d      	ldr	r1, [pc, #628]	; (800191c <HAL_RCC_OscConfig+0x344>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d015      	beq.n	80016e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb5a 	bl	8000d6c <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016bc:	e009      	b.n	80016d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016be:	f7ff fb55 	bl	8000d6c <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	; 0x64
 80016ca:	d902      	bls.n	80016d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f000 fb4c 	bl	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016d2:	4b90      	ldr	r3, [pc, #576]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	029b      	lsls	r3, r3, #10
 80016da:	4013      	ands	r3, r2
 80016dc:	d0ef      	beq.n	80016be <HAL_RCC_OscConfig+0xe6>
 80016de:	e015      	b.n	800170c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb44 	bl	8000d6c <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ea:	f7ff fb3f 	bl	8000d6c <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b64      	cmp	r3, #100	; 0x64
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e336      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016fc:	4b85      	ldr	r3, [pc, #532]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	029b      	lsls	r3, r3, #10
 8001704:	4013      	ands	r3, r2
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x112>
 8001708:	e000      	b.n	800170c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d100      	bne.n	8001718 <HAL_RCC_OscConfig+0x140>
 8001716:	e099      	b.n	800184c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	2220      	movs	r2, #32
 8001722:	4013      	ands	r3, r2
 8001724:	d009      	beq.n	800173a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001726:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800172c:	2120      	movs	r1, #32
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	2220      	movs	r2, #32
 8001736:	4393      	bics	r3, r2
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d13e      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1ec>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d13b      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800174c:	4b71      	ldr	r3, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2204      	movs	r2, #4
 8001752:	4013      	ands	r3, r2
 8001754:	d004      	beq.n	8001760 <HAL_RCC_OscConfig+0x188>
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e304      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a6e      	ldr	r2, [pc, #440]	; (8001920 <HAL_RCC_OscConfig+0x348>)
 8001766:	4013      	ands	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	021a      	lsls	r2, r3, #8
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2209      	movs	r2, #9
 800177c:	4393      	bics	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	4b64      	ldr	r3, [pc, #400]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001788:	f000 fc42 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 800178c:	0001      	movs	r1, r0
 800178e:	4b61      	ldr	r3, [pc, #388]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	220f      	movs	r2, #15
 8001796:	4013      	ands	r3, r2
 8001798:	4a62      	ldr	r2, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x34c>)
 800179a:	5cd3      	ldrb	r3, [r2, r3]
 800179c:	000a      	movs	r2, r1
 800179e:	40da      	lsrs	r2, r3
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <HAL_RCC_OscConfig+0x350>)
 80017a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017a4:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_RCC_OscConfig+0x354>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2513      	movs	r5, #19
 80017aa:	197c      	adds	r4, r7, r5
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff fa97 	bl	8000ce0 <HAL_InitTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017b6:	197b      	adds	r3, r7, r5
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d046      	beq.n	800184c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80017be:	197b      	adds	r3, r7, r5
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	e2d2      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d027      	beq.n	800181a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017ca:	4b52      	ldr	r3, [pc, #328]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2209      	movs	r2, #9
 80017d0:	4393      	bics	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	4b4f      	ldr	r3, [pc, #316]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fac6 	bl	8000d6c <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fac1 	bl	8000d6c <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e2b8      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f8:	4b46      	ldr	r3, [pc, #280]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2204      	movs	r2, #4
 80017fe:	4013      	ands	r3, r2
 8001800:	d0f1      	beq.n	80017e6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_RCC_OscConfig+0x348>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	021a      	lsls	r2, r3, #8
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	e018      	b.n	800184c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001820:	2101      	movs	r1, #1
 8001822:	438a      	bics	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff faa1 	bl	8000d6c <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fa9c 	bl	8000d6c <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e293      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2204      	movs	r2, #4
 8001848:	4013      	ands	r3, r2
 800184a:	d1f1      	bne.n	8001830 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2210      	movs	r2, #16
 8001852:	4013      	ands	r3, r2
 8001854:	d100      	bne.n	8001858 <HAL_RCC_OscConfig+0x280>
 8001856:	e0a2      	b.n	800199e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d140      	bne.n	80018e0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x29e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e279      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <HAL_RCC_OscConfig+0x358>)
 800187c:	4013      	ands	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 8001886:	430a      	orrs	r2, r1
 8001888:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	0a19      	lsrs	r1, r3, #8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	061a      	lsls	r2, r3, #24
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	0b5b      	lsrs	r3, r3, #13
 80018a4:	3301      	adds	r3, #1
 80018a6:	2280      	movs	r2, #128	; 0x80
 80018a8:	0212      	lsls	r2, r2, #8
 80018aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	210f      	movs	r1, #15
 80018b4:	400b      	ands	r3, r1
 80018b6:	491b      	ldr	r1, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x34c>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_RCC_OscConfig+0x350>)
 80018be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_RCC_OscConfig+0x354>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2513      	movs	r5, #19
 80018c6:	197c      	adds	r4, r7, r5
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fa09 	bl	8000ce0 <HAL_InitTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018d2:	197b      	adds	r3, r7, r5
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d061      	beq.n	800199e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80018da:	197b      	adds	r3, r7, r5
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	e244      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d040      	beq.n	800196a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x33c>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0049      	lsls	r1, r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff fa39 	bl	8000d6c <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018fe:	e019      	b.n	8001934 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001900:	f7ff fa34 	bl	8000d6c <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d912      	bls.n	8001934 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e22b      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40021000 	.word	0x40021000
 8001918:	fffeffff 	.word	0xfffeffff
 800191c:	fffbffff 	.word	0xfffbffff
 8001920:	ffffe0ff 	.word	0xffffe0ff
 8001924:	08004144 	.word	0x08004144
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004
 8001930:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001934:	4bca      	ldr	r3, [pc, #808]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d0df      	beq.n	8001900 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001940:	4bc7      	ldr	r3, [pc, #796]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4ac7      	ldr	r2, [pc, #796]	; (8001c64 <HAL_RCC_OscConfig+0x68c>)
 8001946:	4013      	ands	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194e:	4bc4      	ldr	r3, [pc, #784]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001950:	430a      	orrs	r2, r1
 8001952:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001954:	4bc2      	ldr	r3, [pc, #776]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	0a19      	lsrs	r1, r3, #8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	061a      	lsls	r2, r3, #24
 8001962:	4bbf      	ldr	r3, [pc, #764]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	e019      	b.n	800199e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800196a:	4bbd      	ldr	r3, [pc, #756]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4bbc      	ldr	r3, [pc, #752]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001970:	49bd      	ldr	r1, [pc, #756]	; (8001c68 <HAL_RCC_OscConfig+0x690>)
 8001972:	400a      	ands	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff f9f9 	bl	8000d6c <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001980:	f7ff f9f4 	bl	8000d6c <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1eb      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001992:	4bb3      	ldr	r3, [pc, #716]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2208      	movs	r2, #8
 80019a4:	4013      	ands	r3, r2
 80019a6:	d036      	beq.n	8001a16 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d019      	beq.n	80019e4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b0:	4bab      	ldr	r3, [pc, #684]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 80019b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019b4:	4baa      	ldr	r3, [pc, #680]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	430a      	orrs	r2, r1
 80019ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff f9d6 	bl	8000d6c <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff f9d1 	bl	8000d6c <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e1c8      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d8:	4ba1      	ldr	r3, [pc, #644]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 80019da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019dc:	2202      	movs	r2, #2
 80019de:	4013      	ands	r3, r2
 80019e0:	d0f1      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3ee>
 80019e2:	e018      	b.n	8001a16 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e4:	4b9e      	ldr	r3, [pc, #632]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 80019e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019e8:	4b9d      	ldr	r3, [pc, #628]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	438a      	bics	r2, r1
 80019ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff f9bc 	bl	8000d6c <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fa:	f7ff f9b7 	bl	8000d6c <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1ae      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0c:	4b94      	ldr	r3, [pc, #592]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d1f1      	bne.n	80019fa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d100      	bne.n	8001a22 <HAL_RCC_OscConfig+0x44a>
 8001a20:	e0ae      	b.n	8001b80 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a22:	2023      	movs	r0, #35	; 0x23
 8001a24:	183b      	adds	r3, r7, r0
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	055b      	lsls	r3, r3, #21
 8001a32:	4013      	ands	r3, r2
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b8a      	ldr	r3, [pc, #552]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a3a:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	0549      	lsls	r1, r1, #21
 8001a40:	430a      	orrs	r2, r1
 8001a42:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a44:	183b      	adds	r3, r7, r0
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4a:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_OscConfig+0x694>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	d11a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a56:	4b85      	ldr	r3, [pc, #532]	; (8001c6c <HAL_RCC_OscConfig+0x694>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b84      	ldr	r3, [pc, #528]	; (8001c6c <HAL_RCC_OscConfig+0x694>)
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0049      	lsls	r1, r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a64:	f7ff f982 	bl	8000d6c <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6e:	f7ff f97d 	bl	8000d6c <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e174      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	4b7a      	ldr	r3, [pc, #488]	; (8001c6c <HAL_RCC_OscConfig+0x694>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4d0>
 8001a98:	4b71      	ldr	r3, [pc, #452]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a9c:	4b70      	ldr	r3, [pc, #448]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	0049      	lsls	r1, r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	651a      	str	r2, [r3, #80]	; 0x50
 8001aa6:	e031      	b.n	8001b0c <HAL_RCC_OscConfig+0x534>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x4f2>
 8001ab0:	4b6b      	ldr	r3, [pc, #428]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001ab6:	496c      	ldr	r1, [pc, #432]	; (8001c68 <HAL_RCC_OscConfig+0x690>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	651a      	str	r2, [r3, #80]	; 0x50
 8001abc:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac0:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001ac2:	496b      	ldr	r1, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x698>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ac8:	e020      	b.n	8001b0c <HAL_RCC_OscConfig+0x534>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	23a0      	movs	r3, #160	; 0xa0
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d10e      	bne.n	8001af4 <HAL_RCC_OscConfig+0x51c>
 8001ad6:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ada:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	00c9      	lsls	r1, r1, #3
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ae4:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001ae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae8:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0049      	lsls	r1, r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	651a      	str	r2, [r3, #80]	; 0x50
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0x534>
 8001af4:	4b5a      	ldr	r3, [pc, #360]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001af6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001afa:	495b      	ldr	r1, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x690>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	651a      	str	r2, [r3, #80]	; 0x50
 8001b00:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001b02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001b06:	495a      	ldr	r1, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x698>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d015      	beq.n	8001b40 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff f92a 	bl	8000d6c <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff f925 	bl	8000d6c <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_RCC_OscConfig+0x69c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e11b      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d0ef      	beq.n	8001b1e <HAL_RCC_OscConfig+0x546>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b40:	f7ff f914 	bl	8000d6c <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b48:	e009      	b.n	8001b5e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff f90f 	bl	8000d6c <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	4a47      	ldr	r2, [pc, #284]	; (8001c74 <HAL_RCC_OscConfig+0x69c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e105      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b5e:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1ef      	bne.n	8001b4a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b6a:	2323      	movs	r3, #35	; 0x23
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b74:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001b7a:	493f      	ldr	r1, [pc, #252]	; (8001c78 <HAL_RCC_OscConfig+0x6a0>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2220      	movs	r2, #32
 8001b86:	4013      	ands	r3, r2
 8001b88:	d049      	beq.n	8001c1e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d026      	beq.n	8001be0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_RCC_OscConfig+0x6a4>)
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <HAL_RCC_OscConfig+0x6a4>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0189      	lsls	r1, r1, #6
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f8d8 	bl	8000d6c <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc2:	f7ff f8d3 	bl	8000d6c <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ca      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f1      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x5ea>
 8001bde:	e01e      	b.n	8001c1e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	438a      	bics	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_RCC_OscConfig+0x6a4>)
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_RCC_OscConfig+0x6a4>)
 8001bf2:	4923      	ldr	r1, [pc, #140]	; (8001c80 <HAL_RCC_OscConfig+0x6a8>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f8b8 	bl	8000d6c <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c02:	f7ff f8b3 	bl	8000d6c <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0aa      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1f1      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d100      	bne.n	8001c28 <HAL_RCC_OscConfig+0x650>
 8001c26:	e09f      	b.n	8001d68 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x658>
 8001c2e:	e078      	b.n	8001d22 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d159      	bne.n	8001cec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_RCC_OscConfig+0x688>)
 8001c3e:	4911      	ldr	r1, [pc, #68]	; (8001c84 <HAL_RCC_OscConfig+0x6ac>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff f892 	bl	8000d6c <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c4c:	e01c      	b.n	8001c88 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff f88d 	bl	8000d6c <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d915      	bls.n	8001c88 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e084      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
 8001c60:	40021000 	.word	0x40021000
 8001c64:	ffff1fff 	.word	0xffff1fff
 8001c68:	fffffeff 	.word	0xfffffeff
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	fffffbff 	.word	0xfffffbff
 8001c74:	00001388 	.word	0x00001388
 8001c78:	efffffff 	.word	0xefffffff
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	ffffdfff 	.word	0xffffdfff
 8001c84:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c88:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	049b      	lsls	r3, r3, #18
 8001c90:	4013      	ands	r3, r2
 8001c92:	d1dc      	bne.n	8001c4e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c94:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a37      	ldr	r2, [pc, #220]	; (8001d78 <HAL_RCC_OscConfig+0x7a0>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cac:	431a      	orrs	r2, r3
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	0449      	lsls	r1, r1, #17
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f853 	bl	8000d6c <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff f84e 	bl	8000d6c <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e045      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cde:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	049b      	lsls	r3, r3, #18
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x6f4>
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001cf2:	4922      	ldr	r1, [pc, #136]	; (8001d7c <HAL_RCC_OscConfig+0x7a4>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f838 	bl	8000d6c <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff f833 	bl	8000d6c <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e02a      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	049b      	lsls	r3, r3, #18
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x72a>
 8001d20:	e022      	b.n	8001d68 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e01d      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_RCC_OscConfig+0x79c>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	025b      	lsls	r3, r3, #9
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d10f      	bne.n	8001d64 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	23f0      	movs	r3, #240	; 0xf0
 8001d48:	039b      	lsls	r3, r3, #14
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	23c0      	movs	r3, #192	; 0xc0
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b00a      	add	sp, #40	; 0x28
 8001d70:	bdb0      	pop	{r4, r5, r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	40021000 	.word	0x40021000
 8001d78:	ff02ffff 	.word	0xff02ffff
 8001d7c:	feffffff 	.word	0xfeffffff

08001d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e128      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b96      	ldr	r3, [pc, #600]	; (8001ff0 <HAL_RCC_ClockConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d91e      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b93      	ldr	r3, [pc, #588]	; (8001ff0 <HAL_RCC_ClockConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4393      	bics	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	4b90      	ldr	r3, [pc, #576]	; (8001ff0 <HAL_RCC_ClockConfig+0x270>)
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001db4:	f7fe ffda 	bl	8000d6c <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbc:	e009      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbe:	f7fe ffd5 	bl	8000d6c <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	4a8a      	ldr	r2, [pc, #552]	; (8001ff4 <HAL_RCC_ClockConfig+0x274>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e109      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b87      	ldr	r3, [pc, #540]	; (8001ff0 <HAL_RCC_ClockConfig+0x270>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4013      	ands	r3, r2
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d1ee      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dea:	4b83      	ldr	r3, [pc, #524]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	22f0      	movs	r2, #240	; 0xf0
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	d100      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x8a>
 8001e08:	e089      	b.n	8001f1e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e12:	4b79      	ldr	r3, [pc, #484]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d120      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0e1      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	049b      	lsls	r3, r3, #18
 8001e32:	4013      	ands	r3, r2
 8001e34:	d114      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0d5      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2204      	movs	r2, #4
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d109      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0ca      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e50:	4b69      	ldr	r3, [pc, #420]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0c2      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e60:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2203      	movs	r2, #3
 8001e66:	4393      	bics	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7fe ff7a 	bl	8000d6c <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d111      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e86:	f7fe ff71 	bl	8000d6c <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_RCC_ClockConfig+0x274>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0a5      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e9a:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d1ef      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x106>
 8001ea6:	e03a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d111      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb0:	e009      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb2:	f7fe ff5b 	bl	8000d6c <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	; (8001ff4 <HAL_RCC_ClockConfig+0x274>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e08f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	220c      	movs	r2, #12
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d1ef      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x132>
 8001ed2:	e024      	b.n	8001f1e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d11b      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001edc:	e009      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ede:	f7fe ff45 	bl	8000d6c <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	4a42      	ldr	r2, [pc, #264]	; (8001ff4 <HAL_RCC_ClockConfig+0x274>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e079      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d1ef      	bne.n	8001ede <HAL_RCC_ClockConfig+0x15e>
 8001efe:	e00e      	b.n	8001f1e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7fe ff34 	bl	8000d6c <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ff4 <HAL_RCC_ClockConfig+0x274>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e068      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	220c      	movs	r2, #12
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1e:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_RCC_ClockConfig+0x270>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4013      	ands	r3, r2
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d21e      	bcs.n	8001f6a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2c:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <HAL_RCC_ClockConfig+0x270>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4393      	bics	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_RCC_ClockConfig+0x270>)
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f3e:	f7fe ff15 	bl	8000d6c <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	e009      	b.n	8001f5c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7fe ff10 	bl	8000d6c <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <HAL_RCC_ClockConfig+0x274>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e044      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCC_ClockConfig+0x270>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d1ee      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	4013      	ands	r3, r2
 8001f72:	d009      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <HAL_RCC_ClockConfig+0x27c>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_RCC_ClockConfig+0x280>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00da      	lsls	r2, r3, #3
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fa8:	f000 f832 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fac:	0001      	movs	r1, r0
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_ClockConfig+0x278>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_RCC_ClockConfig+0x284>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	40da      	lsrs	r2, r3
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_RCC_ClockConfig+0x288>)
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_RCC_ClockConfig+0x28c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	250b      	movs	r5, #11
 8001fca:	197c      	adds	r4, r7, r5
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7fe fe87 	bl	8000ce0 <HAL_InitTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001fd6:	197b      	adds	r3, r7, r5
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001fde:	197b      	adds	r3, r7, r5
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bdb0      	pop	{r4, r5, r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	00001388 	.word	0x00001388
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	fffff8ff 	.word	0xfffff8ff
 8002000:	ffffc7ff 	.word	0xffffc7ff
 8002004:	08004144 	.word	0x08004144
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b08e      	sub	sp, #56	; 0x38
 8002014:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_RCC_GetSysClockFreq+0x138>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800201c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201e:	230c      	movs	r3, #12
 8002020:	4013      	ands	r3, r2
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d014      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x40>
 8002026:	d900      	bls.n	800202a <HAL_RCC_GetSysClockFreq+0x1a>
 8002028:	e07b      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x112>
 800202a:	2b04      	cmp	r3, #4
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x24>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d00b      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x3a>
 8002032:	e076      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002034:	4b44      	ldr	r3, [pc, #272]	; (8002148 <HAL_RCC_GetSysClockFreq+0x138>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2210      	movs	r2, #16
 800203a:	4013      	ands	r3, r2
 800203c:	d002      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002042:	e07c      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002044:	4b42      	ldr	r3, [pc, #264]	; (8002150 <HAL_RCC_GetSysClockFreq+0x140>)
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002048:	e079      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800204a:	4b42      	ldr	r3, [pc, #264]	; (8002154 <HAL_RCC_GetSysClockFreq+0x144>)
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800204e:	e076      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	0c9a      	lsrs	r2, r3, #18
 8002054:	230f      	movs	r3, #15
 8002056:	401a      	ands	r2, r3
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_GetSysClockFreq+0x148>)
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	0d9a      	lsrs	r2, r3, #22
 8002062:	2303      	movs	r3, #3
 8002064:	4013      	ands	r3, r2
 8002066:	3301      	adds	r3, #1
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800206a:	4b37      	ldr	r3, [pc, #220]	; (8002148 <HAL_RCC_GetSysClockFreq+0x138>)
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	025b      	lsls	r3, r3, #9
 8002072:	4013      	ands	r3, r2
 8002074:	d01a      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	4a35      	ldr	r2, [pc, #212]	; (8002154 <HAL_RCC_GetSysClockFreq+0x144>)
 8002080:	2300      	movs	r3, #0
 8002082:	69b8      	ldr	r0, [r7, #24]
 8002084:	69f9      	ldr	r1, [r7, #28]
 8002086:	f7fe f8f5 	bl	8000274 <__aeabi_lmul>
 800208a:	0002      	movs	r2, r0
 800208c:	000b      	movs	r3, r1
 800208e:	0010      	movs	r0, r2
 8002090:	0019      	movs	r1, r3
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f7fe f8c9 	bl	8000234 <__aeabi_uldivmod>
 80020a2:	0002      	movs	r2, r0
 80020a4:	000b      	movs	r3, r1
 80020a6:	0013      	movs	r3, r2
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
 80020aa:	e037      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020ac:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_GetSysClockFreq+0x138>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2210      	movs	r2, #16
 80020b2:	4013      	ands	r3, r2
 80020b4:	d01a      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80020b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4a23      	ldr	r2, [pc, #140]	; (800214c <HAL_RCC_GetSysClockFreq+0x13c>)
 80020c0:	2300      	movs	r3, #0
 80020c2:	68b8      	ldr	r0, [r7, #8]
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	f7fe f8d5 	bl	8000274 <__aeabi_lmul>
 80020ca:	0002      	movs	r2, r0
 80020cc:	000b      	movs	r3, r1
 80020ce:	0010      	movs	r0, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f7fe f8a9 	bl	8000234 <__aeabi_uldivmod>
 80020e2:	0002      	movs	r2, r0
 80020e4:	000b      	movs	r3, r1
 80020e6:	0013      	movs	r3, r2
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
 80020ea:	e017      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	0018      	movs	r0, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	0019      	movs	r1, r3
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_RCC_GetSysClockFreq+0x140>)
 80020f6:	2300      	movs	r3, #0
 80020f8:	f7fe f8bc 	bl	8000274 <__aeabi_lmul>
 80020fc:	0002      	movs	r2, r0
 80020fe:	000b      	movs	r3, r1
 8002100:	0010      	movs	r0, r2
 8002102:	0019      	movs	r1, r3
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	001c      	movs	r4, r3
 8002108:	2300      	movs	r3, #0
 800210a:	001d      	movs	r5, r3
 800210c:	0022      	movs	r2, r4
 800210e:	002b      	movs	r3, r5
 8002110:	f7fe f890 	bl	8000234 <__aeabi_uldivmod>
 8002114:	0002      	movs	r2, r0
 8002116:	000b      	movs	r3, r1
 8002118:	0013      	movs	r3, r2
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002120:	e00d      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_GetSysClockFreq+0x138>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	0b5b      	lsrs	r3, r3, #13
 8002128:	2207      	movs	r2, #7
 800212a:	4013      	ands	r3, r2
 800212c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	3301      	adds	r3, #1
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	0212      	lsls	r2, r2, #8
 8002136:	409a      	lsls	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800213c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b00e      	add	sp, #56	; 0x38
 8002146:	bdb0      	pop	{r4, r5, r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	003d0900 	.word	0x003d0900
 8002150:	00f42400 	.word	0x00f42400
 8002154:	007a1200 	.word	0x007a1200
 8002158:	0800415c 	.word	0x0800415c

0800215c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b02      	ldr	r3, [pc, #8]	; (800216c <HAL_RCC_GetHCLKFreq+0x10>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002174:	f7ff fff2 	bl	800215c <HAL_RCC_GetHCLKFreq>
 8002178:	0001      	movs	r1, r0
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	2207      	movs	r2, #7
 8002182:	4013      	ands	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	40d9      	lsrs	r1, r3
 800218a:	000b      	movs	r3, r1
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	40021000 	.word	0x40021000
 8002198:	08004154 	.word	0x08004154

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a0:	f7ff ffdc 	bl	800215c <HAL_RCC_GetHCLKFreq>
 80021a4:	0001      	movs	r1, r0
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	2207      	movs	r2, #7
 80021ae:	4013      	ands	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	40d9      	lsrs	r1, r3
 80021b6:	000b      	movs	r3, r1
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08004154 	.word	0x08004154

080021c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80021d0:	2317      	movs	r3, #23
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2220      	movs	r2, #32
 80021de:	4013      	ands	r3, r2
 80021e0:	d106      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4013      	ands	r3, r2
 80021ec:	d100      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80021ee:	e0d9      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f0:	4ba4      	ldr	r3, [pc, #656]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	055b      	lsls	r3, r3, #21
 80021f8:	4013      	ands	r3, r2
 80021fa:	d10a      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fc:	4ba1      	ldr	r3, [pc, #644]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002200:	4ba0      	ldr	r3, [pc, #640]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	0549      	lsls	r1, r1, #21
 8002206:	430a      	orrs	r2, r1
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800220a:	2317      	movs	r3, #23
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b9d      	ldr	r3, [pc, #628]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4013      	ands	r3, r2
 800221c:	d11a      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221e:	4b9a      	ldr	r3, [pc, #616]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b99      	ldr	r3, [pc, #612]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	0049      	lsls	r1, r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222c:	f7fe fd9e 	bl	8000d6c <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	e008      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7fe fd99 	bl	8000d6c <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	; 0x64
 8002242:	d901      	bls.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e118      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	4b8f      	ldr	r3, [pc, #572]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d0f0      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002254:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	23c0      	movs	r3, #192	; 0xc0
 800225a:	039b      	lsls	r3, r3, #14
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	23c0      	movs	r3, #192	; 0xc0
 8002266:	039b      	lsls	r3, r3, #14
 8002268:	4013      	ands	r3, r2
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	23c0      	movs	r3, #192	; 0xc0
 8002276:	039b      	lsls	r3, r3, #14
 8002278:	4013      	ands	r3, r2
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d013      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	23c0      	movs	r3, #192	; 0xc0
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	401a      	ands	r2, r3
 800228a:	23c0      	movs	r3, #192	; 0xc0
 800228c:	029b      	lsls	r3, r3, #10
 800228e:	429a      	cmp	r2, r3
 8002290:	d10a      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002292:	4b7c      	ldr	r3, [pc, #496]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	029b      	lsls	r3, r3, #10
 800229a:	401a      	ands	r2, r3
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	029b      	lsls	r3, r3, #10
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d101      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0e8      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80022a8:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ac:	23c0      	movs	r3, #192	; 0xc0
 80022ae:	029b      	lsls	r3, r3, #10
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d049      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	23c0      	movs	r3, #192	; 0xc0
 80022c0:	029b      	lsls	r3, r3, #10
 80022c2:	4013      	ands	r3, r2
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d004      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2220      	movs	r2, #32
 80022d0:	4013      	ands	r3, r2
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	23c0      	movs	r3, #192	; 0xc0
 80022da:	029b      	lsls	r3, r3, #10
 80022dc:	4013      	ands	r3, r2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d034      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4013      	ands	r3, r2
 80022ee:	d02e      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80022f0:	4b64      	ldr	r3, [pc, #400]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f4:	4a65      	ldr	r2, [pc, #404]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022fa:	4b62      	ldr	r3, [pc, #392]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fe:	4b61      	ldr	r3, [pc, #388]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	0309      	lsls	r1, r1, #12
 8002304:	430a      	orrs	r2, r1
 8002306:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002308:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800230a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230c:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800230e:	4960      	ldr	r1, [pc, #384]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002310:	400a      	ands	r2, r1
 8002312:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002314:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d014      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe fd22 	bl	8000d6c <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800232c:	e009      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe fd1d 	bl	8000d6c <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	4a56      	ldr	r2, [pc, #344]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e09b      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002342:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d0ef      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	23c0      	movs	r3, #192	; 0xc0
 8002354:	029b      	lsls	r3, r3, #10
 8002356:	401a      	ands	r2, r3
 8002358:	23c0      	movs	r3, #192	; 0xc0
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	429a      	cmp	r2, r3
 800235e:	d10c      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002360:	4b48      	ldr	r3, [pc, #288]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	23c0      	movs	r3, #192	; 0xc0
 8002370:	039b      	lsls	r3, r3, #14
 8002372:	401a      	ands	r2, r3
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800237c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	23c0      	movs	r3, #192	; 0xc0
 8002384:	029b      	lsls	r3, r3, #10
 8002386:	401a      	ands	r2, r3
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800238a:	430a      	orrs	r2, r1
 800238c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800238e:	2317      	movs	r3, #23
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800239a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239c:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800239e:	493f      	ldr	r1, [pc, #252]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	d009      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	2203      	movs	r2, #3
 80023b4:	4393      	bics	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023cc:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d0:	220c      	movs	r2, #12
 80023d2:	4393      	bics	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2204      	movs	r2, #4
 80023e6:	4013      	ands	r3, r2
 80023e8:	d009      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4a2c      	ldr	r2, [pc, #176]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2208      	movs	r2, #8
 8002404:	4013      	ands	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800240a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240c:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002418:	430a      	orrs	r2, r1
 800241a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4013      	ands	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002438:	430a      	orrs	r2, r1
 800243a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	4013      	ands	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002456:	430a      	orrs	r2, r1
 8002458:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	4013      	ands	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	4a10      	ldr	r2, [pc, #64]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1a      	ldr	r2, [r3, #32]
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002474:	430a      	orrs	r2, r1
 8002476:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b006      	add	sp, #24
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
 800248c:	fffcffff 	.word	0xfffcffff
 8002490:	fff7ffff 	.word	0xfff7ffff
 8002494:	00001388 	.word	0x00001388
 8002498:	ffcfffff 	.word	0xffcfffff
 800249c:	efffffff 	.word	0xefffffff
 80024a0:	fffff3ff 	.word	0xfffff3ff
 80024a4:	ffffcfff 	.word	0xffffcfff
 80024a8:	fbffffff 	.word	0xfbffffff
 80024ac:	fff3ffff 	.word	0xfff3ffff

080024b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e044      	b.n	800254c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2274      	movs	r2, #116	; 0x74
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fe fb75 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2224      	movs	r2, #36	; 0x24
 80024de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2101      	movs	r1, #1
 80024ec:	438a      	bics	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 f9c6 	bl	8002884 <UART_SetConfig>
 80024f8:	0003      	movs	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e024      	b.n	800254c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 fc77 	bl	8002e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	490d      	ldr	r1, [pc, #52]	; (8002554 <HAL_UART_Init+0xa4>)
 800251e:	400a      	ands	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	212a      	movs	r1, #42	; 0x2a
 800252e:	438a      	bics	r2, r1
 8002530:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fd0f 	bl	8002f68 <UART_CheckIdleState>
 800254a:	0003      	movs	r3, r0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}
 8002554:	ffffb7ff 	.word	0xffffb7ff

08002558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	1dbb      	adds	r3, r7, #6
 8002566:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800256c:	2b20      	cmp	r3, #32
 800256e:	d000      	beq.n	8002572 <HAL_UART_Transmit+0x1a>
 8002570:	e095      	b.n	800269e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_UART_Transmit+0x28>
 8002578:	1dbb      	adds	r3, r7, #6
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e08d      	b.n	80026a0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	015b      	lsls	r3, r3, #5
 800258c:	429a      	cmp	r2, r3
 800258e:	d109      	bne.n	80025a4 <HAL_UART_Transmit+0x4c>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2201      	movs	r2, #1
 800259c:	4013      	ands	r3, r2
 800259e:	d001      	beq.n	80025a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e07d      	b.n	80026a0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2274      	movs	r2, #116	; 0x74
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Transmit+0x5a>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e076      	b.n	80026a0 <HAL_UART_Transmit+0x148>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2274      	movs	r2, #116	; 0x74
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	2100      	movs	r1, #0
 80025c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2221      	movs	r2, #33	; 0x21
 80025c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025c8:	f7fe fbd0 	bl	8000d6c <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1dba      	adds	r2, r7, #6
 80025d4:	2150      	movs	r1, #80	; 0x50
 80025d6:	8812      	ldrh	r2, [r2, #0]
 80025d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1dba      	adds	r2, r7, #6
 80025de:	2152      	movs	r1, #82	; 0x52
 80025e0:	8812      	ldrh	r2, [r2, #0]
 80025e2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d108      	bne.n	8002602 <HAL_UART_Transmit+0xaa>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e003      	b.n	800260a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2274      	movs	r2, #116	; 0x74
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002612:	e02c      	b.n	800266e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	0013      	movs	r3, r2
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	f000 fce9 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002626:	1e03      	subs	r3, r0, #0
 8002628:	d001      	beq.n	800262e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e038      	b.n	80026a0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10b      	bne.n	800264c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	001a      	movs	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	05d2      	lsls	r2, r2, #23
 8002640:	0dd2      	lsrs	r2, r2, #23
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	3302      	adds	r3, #2
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	e007      	b.n	800265c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3301      	adds	r3, #1
 800265a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2252      	movs	r2, #82	; 0x52
 8002660:	5a9b      	ldrh	r3, [r3, r2]
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b299      	uxth	r1, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2252      	movs	r2, #82	; 0x52
 800266c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2252      	movs	r2, #82	; 0x52
 8002672:	5a9b      	ldrh	r3, [r3, r2]
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1cc      	bne.n	8002614 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	0013      	movs	r3, r2
 8002684:	2200      	movs	r2, #0
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	f000 fcb6 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e005      	b.n	80026a0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b008      	add	sp, #32
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	1dbb      	adds	r3, r7, #6
 80026b6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d000      	beq.n	80026c2 <HAL_UART_Receive+0x1a>
 80026c0:	e0d9      	b.n	8002876 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_UART_Receive+0x28>
 80026c8:	1dbb      	adds	r3, r7, #6
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d1      	b.n	8002878 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	015b      	lsls	r3, r3, #5
 80026dc:	429a      	cmp	r2, r3
 80026de:	d109      	bne.n	80026f4 <HAL_UART_Receive+0x4c>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0c1      	b.n	8002878 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2274      	movs	r2, #116	; 0x74
 80026f8:	5c9b      	ldrb	r3, [r3, r2]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Receive+0x5a>
 80026fe:	2302      	movs	r3, #2
 8002700:	e0ba      	b.n	8002878 <HAL_UART_Receive+0x1d0>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2274      	movs	r2, #116	; 0x74
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	2100      	movs	r1, #0
 8002710:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2222      	movs	r2, #34	; 0x22
 8002716:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800271e:	f7fe fb25 	bl	8000d6c <HAL_GetTick>
 8002722:	0003      	movs	r3, r0
 8002724:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1dba      	adds	r2, r7, #6
 800272a:	2158      	movs	r1, #88	; 0x58
 800272c:	8812      	ldrh	r2, [r2, #0]
 800272e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1dba      	adds	r2, r7, #6
 8002734:	215a      	movs	r1, #90	; 0x5a
 8002736:	8812      	ldrh	r2, [r2, #0]
 8002738:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	429a      	cmp	r2, r3
 8002744:	d10d      	bne.n	8002762 <HAL_UART_Receive+0xba>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <HAL_UART_Receive+0xb0>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	225c      	movs	r2, #92	; 0x5c
 8002752:	494b      	ldr	r1, [pc, #300]	; (8002880 <HAL_UART_Receive+0x1d8>)
 8002754:	5299      	strh	r1, [r3, r2]
 8002756:	e02e      	b.n	80027b6 <HAL_UART_Receive+0x10e>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	225c      	movs	r2, #92	; 0x5c
 800275c:	21ff      	movs	r1, #255	; 0xff
 800275e:	5299      	strh	r1, [r3, r2]
 8002760:	e029      	b.n	80027b6 <HAL_UART_Receive+0x10e>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <HAL_UART_Receive+0xde>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <HAL_UART_Receive+0xd4>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	225c      	movs	r2, #92	; 0x5c
 8002776:	21ff      	movs	r1, #255	; 0xff
 8002778:	5299      	strh	r1, [r3, r2]
 800277a:	e01c      	b.n	80027b6 <HAL_UART_Receive+0x10e>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	225c      	movs	r2, #92	; 0x5c
 8002780:	217f      	movs	r1, #127	; 0x7f
 8002782:	5299      	strh	r1, [r3, r2]
 8002784:	e017      	b.n	80027b6 <HAL_UART_Receive+0x10e>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	429a      	cmp	r2, r3
 8002790:	d10d      	bne.n	80027ae <HAL_UART_Receive+0x106>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_UART_Receive+0xfc>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	225c      	movs	r2, #92	; 0x5c
 800279e:	217f      	movs	r1, #127	; 0x7f
 80027a0:	5299      	strh	r1, [r3, r2]
 80027a2:	e008      	b.n	80027b6 <HAL_UART_Receive+0x10e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	225c      	movs	r2, #92	; 0x5c
 80027a8:	213f      	movs	r1, #63	; 0x3f
 80027aa:	5299      	strh	r1, [r3, r2]
 80027ac:	e003      	b.n	80027b6 <HAL_UART_Receive+0x10e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	225c      	movs	r2, #92	; 0x5c
 80027b2:	2100      	movs	r1, #0
 80027b4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80027b6:	2312      	movs	r3, #18
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	215c      	movs	r1, #92	; 0x5c
 80027be:	5a52      	ldrh	r2, [r2, r1]
 80027c0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	015b      	lsls	r3, r3, #5
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d108      	bne.n	80027e0 <HAL_UART_Receive+0x138>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e003      	b.n	80027e8 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2274      	movs	r2, #116	; 0x74
 80027ec:	2100      	movs	r1, #0
 80027ee:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80027f0:	e036      	b.n	8002860 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	0013      	movs	r3, r2
 80027fc:	2200      	movs	r2, #0
 80027fe:	2120      	movs	r1, #32
 8002800:	f000 fbfa 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e035      	b.n	8002878 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10e      	bne.n	8002830 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	b29b      	uxth	r3, r3
 800281a:	2212      	movs	r2, #18
 800281c:	18ba      	adds	r2, r7, r2
 800281e:	8812      	ldrh	r2, [r2, #0]
 8002820:	4013      	ands	r3, r2
 8002822:	b29a      	uxth	r2, r3
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	3302      	adds	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e00e      	b.n	800284e <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2212      	movs	r2, #18
 800283a:	18ba      	adds	r2, r7, r2
 800283c:	8812      	ldrh	r2, [r2, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4013      	ands	r3, r2
 8002842:	b2da      	uxtb	r2, r3
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	3301      	adds	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	225a      	movs	r2, #90	; 0x5a
 8002852:	5a9b      	ldrh	r3, [r3, r2]
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b299      	uxth	r1, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	225a      	movs	r2, #90	; 0x5a
 800285e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	225a      	movs	r2, #90	; 0x5a
 8002864:	5a9b      	ldrh	r3, [r3, r2]
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1c2      	bne.n	80027f2 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
  }
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b008      	add	sp, #32
 800287e:	bd80      	pop	{r7, pc}
 8002880:	000001ff 	.word	0x000001ff

08002884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800288c:	231a      	movs	r3, #26
 800288e:	2218      	movs	r2, #24
 8002890:	4694      	mov	ip, r2
 8002892:	44bc      	add	ip, r7
 8002894:	4463      	add	r3, ip
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4ab0      	ldr	r2, [pc, #704]	; (8002b7c <UART_SetConfig+0x2f8>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4aac      	ldr	r2, [pc, #688]	; (8002b80 <UART_SetConfig+0x2fc>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4aa6      	ldr	r2, [pc, #664]	; (8002b84 <UART_SetConfig+0x300>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f6:	4313      	orrs	r3, r2
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4aa1      	ldr	r2, [pc, #644]	; (8002b88 <UART_SetConfig+0x304>)
 8002902:	4013      	ands	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a9d      	ldr	r2, [pc, #628]	; (8002b8c <UART_SetConfig+0x308>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d136      	bne.n	8002988 <UART_SetConfig+0x104>
 800291a:	4b9d      	ldr	r3, [pc, #628]	; (8002b90 <UART_SetConfig+0x30c>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	2203      	movs	r2, #3
 8002920:	4013      	ands	r3, r2
 8002922:	2b03      	cmp	r3, #3
 8002924:	d020      	beq.n	8002968 <UART_SetConfig+0xe4>
 8002926:	d827      	bhi.n	8002978 <UART_SetConfig+0xf4>
 8002928:	2b02      	cmp	r3, #2
 800292a:	d00d      	beq.n	8002948 <UART_SetConfig+0xc4>
 800292c:	d824      	bhi.n	8002978 <UART_SetConfig+0xf4>
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <UART_SetConfig+0xb4>
 8002932:	2b01      	cmp	r3, #1
 8002934:	d010      	beq.n	8002958 <UART_SetConfig+0xd4>
 8002936:	e01f      	b.n	8002978 <UART_SetConfig+0xf4>
 8002938:	231b      	movs	r3, #27
 800293a:	2218      	movs	r2, #24
 800293c:	4694      	mov	ip, r2
 800293e:	44bc      	add	ip, r7
 8002940:	4463      	add	r3, ip
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
 8002946:	e0c5      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002948:	231b      	movs	r3, #27
 800294a:	2218      	movs	r2, #24
 800294c:	4694      	mov	ip, r2
 800294e:	44bc      	add	ip, r7
 8002950:	4463      	add	r3, ip
 8002952:	2202      	movs	r2, #2
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e0bd      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002958:	231b      	movs	r3, #27
 800295a:	2218      	movs	r2, #24
 800295c:	4694      	mov	ip, r2
 800295e:	44bc      	add	ip, r7
 8002960:	4463      	add	r3, ip
 8002962:	2204      	movs	r2, #4
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e0b5      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002968:	231b      	movs	r3, #27
 800296a:	2218      	movs	r2, #24
 800296c:	4694      	mov	ip, r2
 800296e:	44bc      	add	ip, r7
 8002970:	4463      	add	r3, ip
 8002972:	2208      	movs	r2, #8
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e0ad      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002978:	231b      	movs	r3, #27
 800297a:	2218      	movs	r2, #24
 800297c:	4694      	mov	ip, r2
 800297e:	44bc      	add	ip, r7
 8002980:	4463      	add	r3, ip
 8002982:	2210      	movs	r2, #16
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e0a5      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a81      	ldr	r2, [pc, #516]	; (8002b94 <UART_SetConfig+0x310>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d136      	bne.n	8002a00 <UART_SetConfig+0x17c>
 8002992:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <UART_SetConfig+0x30c>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	220c      	movs	r2, #12
 8002998:	4013      	ands	r3, r2
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d020      	beq.n	80029e0 <UART_SetConfig+0x15c>
 800299e:	d827      	bhi.n	80029f0 <UART_SetConfig+0x16c>
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d00d      	beq.n	80029c0 <UART_SetConfig+0x13c>
 80029a4:	d824      	bhi.n	80029f0 <UART_SetConfig+0x16c>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <UART_SetConfig+0x12c>
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d010      	beq.n	80029d0 <UART_SetConfig+0x14c>
 80029ae:	e01f      	b.n	80029f0 <UART_SetConfig+0x16c>
 80029b0:	231b      	movs	r3, #27
 80029b2:	2218      	movs	r2, #24
 80029b4:	4694      	mov	ip, r2
 80029b6:	44bc      	add	ip, r7
 80029b8:	4463      	add	r3, ip
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e089      	b.n	8002ad4 <UART_SetConfig+0x250>
 80029c0:	231b      	movs	r3, #27
 80029c2:	2218      	movs	r2, #24
 80029c4:	4694      	mov	ip, r2
 80029c6:	44bc      	add	ip, r7
 80029c8:	4463      	add	r3, ip
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e081      	b.n	8002ad4 <UART_SetConfig+0x250>
 80029d0:	231b      	movs	r3, #27
 80029d2:	2218      	movs	r2, #24
 80029d4:	4694      	mov	ip, r2
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	2204      	movs	r2, #4
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e079      	b.n	8002ad4 <UART_SetConfig+0x250>
 80029e0:	231b      	movs	r3, #27
 80029e2:	2218      	movs	r2, #24
 80029e4:	4694      	mov	ip, r2
 80029e6:	44bc      	add	ip, r7
 80029e8:	4463      	add	r3, ip
 80029ea:	2208      	movs	r2, #8
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e071      	b.n	8002ad4 <UART_SetConfig+0x250>
 80029f0:	231b      	movs	r3, #27
 80029f2:	2218      	movs	r2, #24
 80029f4:	4694      	mov	ip, r2
 80029f6:	44bc      	add	ip, r7
 80029f8:	4463      	add	r3, ip
 80029fa:	2210      	movs	r2, #16
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e069      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a64      	ldr	r2, [pc, #400]	; (8002b98 <UART_SetConfig+0x314>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d107      	bne.n	8002a1a <UART_SetConfig+0x196>
 8002a0a:	231b      	movs	r3, #27
 8002a0c:	2218      	movs	r2, #24
 8002a0e:	4694      	mov	ip, r2
 8002a10:	44bc      	add	ip, r7
 8002a12:	4463      	add	r3, ip
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e05c      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5f      	ldr	r2, [pc, #380]	; (8002b9c <UART_SetConfig+0x318>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d107      	bne.n	8002a34 <UART_SetConfig+0x1b0>
 8002a24:	231b      	movs	r3, #27
 8002a26:	2218      	movs	r2, #24
 8002a28:	4694      	mov	ip, r2
 8002a2a:	44bc      	add	ip, r7
 8002a2c:	4463      	add	r3, ip
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e04f      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a52      	ldr	r2, [pc, #328]	; (8002b84 <UART_SetConfig+0x300>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d143      	bne.n	8002ac6 <UART_SetConfig+0x242>
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <UART_SetConfig+0x30c>)
 8002a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a42:	23c0      	movs	r3, #192	; 0xc0
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	4013      	ands	r3, r2
 8002a48:	22c0      	movs	r2, #192	; 0xc0
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d02a      	beq.n	8002aa6 <UART_SetConfig+0x222>
 8002a50:	22c0      	movs	r2, #192	; 0xc0
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d82e      	bhi.n	8002ab6 <UART_SetConfig+0x232>
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d012      	beq.n	8002a86 <UART_SetConfig+0x202>
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d826      	bhi.n	8002ab6 <UART_SetConfig+0x232>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <UART_SetConfig+0x1f2>
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	00d2      	lsls	r2, r2, #3
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d010      	beq.n	8002a96 <UART_SetConfig+0x212>
 8002a74:	e01f      	b.n	8002ab6 <UART_SetConfig+0x232>
 8002a76:	231b      	movs	r3, #27
 8002a78:	2218      	movs	r2, #24
 8002a7a:	4694      	mov	ip, r2
 8002a7c:	44bc      	add	ip, r7
 8002a7e:	4463      	add	r3, ip
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e026      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002a86:	231b      	movs	r3, #27
 8002a88:	2218      	movs	r2, #24
 8002a8a:	4694      	mov	ip, r2
 8002a8c:	44bc      	add	ip, r7
 8002a8e:	4463      	add	r3, ip
 8002a90:	2202      	movs	r2, #2
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e01e      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002a96:	231b      	movs	r3, #27
 8002a98:	2218      	movs	r2, #24
 8002a9a:	4694      	mov	ip, r2
 8002a9c:	44bc      	add	ip, r7
 8002a9e:	4463      	add	r3, ip
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e016      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002aa6:	231b      	movs	r3, #27
 8002aa8:	2218      	movs	r2, #24
 8002aaa:	4694      	mov	ip, r2
 8002aac:	44bc      	add	ip, r7
 8002aae:	4463      	add	r3, ip
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e00e      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002ab6:	231b      	movs	r3, #27
 8002ab8:	2218      	movs	r2, #24
 8002aba:	4694      	mov	ip, r2
 8002abc:	44bc      	add	ip, r7
 8002abe:	4463      	add	r3, ip
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e006      	b.n	8002ad4 <UART_SetConfig+0x250>
 8002ac6:	231b      	movs	r3, #27
 8002ac8:	2218      	movs	r2, #24
 8002aca:	4694      	mov	ip, r2
 8002acc:	44bc      	add	ip, r7
 8002ace:	4463      	add	r3, ip
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <UART_SetConfig+0x300>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d000      	beq.n	8002ae0 <UART_SetConfig+0x25c>
 8002ade:	e09e      	b.n	8002c1e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ae0:	231b      	movs	r3, #27
 8002ae2:	2218      	movs	r2, #24
 8002ae4:	4694      	mov	ip, r2
 8002ae6:	44bc      	add	ip, r7
 8002ae8:	4463      	add	r3, ip
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d01d      	beq.n	8002b2c <UART_SetConfig+0x2a8>
 8002af0:	dc20      	bgt.n	8002b34 <UART_SetConfig+0x2b0>
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d015      	beq.n	8002b22 <UART_SetConfig+0x29e>
 8002af6:	dc1d      	bgt.n	8002b34 <UART_SetConfig+0x2b0>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <UART_SetConfig+0x27e>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d005      	beq.n	8002b0c <UART_SetConfig+0x288>
 8002b00:	e018      	b.n	8002b34 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b02:	f7ff fb35 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002b06:	0003      	movs	r3, r0
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b0a:	e01d      	b.n	8002b48 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b0c:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <UART_SetConfig+0x30c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2210      	movs	r2, #16
 8002b12:	4013      	ands	r3, r2
 8002b14:	d002      	beq.n	8002b1c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <UART_SetConfig+0x31c>)
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b1a:	e015      	b.n	8002b48 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <UART_SetConfig+0x320>)
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b20:	e012      	b.n	8002b48 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b22:	f7ff fa75 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8002b26:	0003      	movs	r3, r0
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b2a:	e00d      	b.n	8002b48 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b32:	e009      	b.n	8002b48 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b38:	231a      	movs	r3, #26
 8002b3a:	2218      	movs	r2, #24
 8002b3c:	4694      	mov	ip, r2
 8002b3e:	44bc      	add	ip, r7
 8002b40:	4463      	add	r3, ip
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
        break;
 8002b46:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d100      	bne.n	8002b50 <UART_SetConfig+0x2cc>
 8002b4e:	e13c      	b.n	8002dca <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	0013      	movs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	189b      	adds	r3, r3, r2
 8002b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d305      	bcc.n	8002b6c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d91d      	bls.n	8002ba8 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002b6c:	231a      	movs	r3, #26
 8002b6e:	2218      	movs	r2, #24
 8002b70:	4694      	mov	ip, r2
 8002b72:	44bc      	add	ip, r7
 8002b74:	4463      	add	r3, ip
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e126      	b.n	8002dca <UART_SetConfig+0x546>
 8002b7c:	efff69f3 	.word	0xefff69f3
 8002b80:	ffffcfff 	.word	0xffffcfff
 8002b84:	40004800 	.word	0x40004800
 8002b88:	fffff4ff 	.word	0xfffff4ff
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40004400 	.word	0x40004400
 8002b98:	40004c00 	.word	0x40004c00
 8002b9c:	40005000 	.word	0x40005000
 8002ba0:	003d0900 	.word	0x003d0900
 8002ba4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	6939      	ldr	r1, [r7, #16]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	000b      	movs	r3, r1
 8002bb6:	0e1b      	lsrs	r3, r3, #24
 8002bb8:	0010      	movs	r0, r2
 8002bba:	0205      	lsls	r5, r0, #8
 8002bbc:	431d      	orrs	r5, r3
 8002bbe:	000b      	movs	r3, r1
 8002bc0:	021c      	lsls	r4, r3, #8
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68b8      	ldr	r0, [r7, #8]
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	1900      	adds	r0, r0, r4
 8002bd4:	4169      	adcs	r1, r5
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f7fd fb26 	bl	8000234 <__aeabi_uldivmod>
 8002be8:	0002      	movs	r2, r0
 8002bea:	000b      	movs	r3, r1
 8002bec:	0013      	movs	r3, r2
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf2:	23c0      	movs	r3, #192	; 0xc0
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d309      	bcc.n	8002c0e <UART_SetConfig+0x38a>
 8002bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	035b      	lsls	r3, r3, #13
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d204      	bcs.n	8002c0e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	e0dd      	b.n	8002dca <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002c0e:	231a      	movs	r3, #26
 8002c10:	2218      	movs	r2, #24
 8002c12:	4694      	mov	ip, r2
 8002c14:	44bc      	add	ip, r7
 8002c16:	4463      	add	r3, ip
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e0d5      	b.n	8002dca <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d000      	beq.n	8002c2c <UART_SetConfig+0x3a8>
 8002c2a:	e074      	b.n	8002d16 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002c2c:	231b      	movs	r3, #27
 8002c2e:	2218      	movs	r2, #24
 8002c30:	4694      	mov	ip, r2
 8002c32:	44bc      	add	ip, r7
 8002c34:	4463      	add	r3, ip
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d822      	bhi.n	8002c82 <UART_SetConfig+0x3fe>
 8002c3c:	009a      	lsls	r2, r3, #2
 8002c3e:	4b6b      	ldr	r3, [pc, #428]	; (8002dec <UART_SetConfig+0x568>)
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c46:	f7ff fa93 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c4e:	e022      	b.n	8002c96 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c50:	f7ff faa4 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8002c54:	0003      	movs	r3, r0
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c58:	e01d      	b.n	8002c96 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c5a:	4b65      	ldr	r3, [pc, #404]	; (8002df0 <UART_SetConfig+0x56c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	4013      	ands	r3, r2
 8002c62:	d002      	beq.n	8002c6a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c64:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <UART_SetConfig+0x570>)
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c68:	e015      	b.n	8002c96 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <UART_SetConfig+0x574>)
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c6e:	e012      	b.n	8002c96 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c70:	f7ff f9ce 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8002c74:	0003      	movs	r3, r0
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c78:	e00d      	b.n	8002c96 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c80:	e009      	b.n	8002c96 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c86:	231a      	movs	r3, #26
 8002c88:	2218      	movs	r2, #24
 8002c8a:	4694      	mov	ip, r2
 8002c8c:	44bc      	add	ip, r7
 8002c8e:	4463      	add	r3, ip
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
        break;
 8002c94:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d100      	bne.n	8002c9e <UART_SetConfig+0x41a>
 8002c9c:	e095      	b.n	8002dca <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	005a      	lsls	r2, r3, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	18d2      	adds	r2, r2, r3
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0019      	movs	r1, r3
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	f7fd fa33 	bl	800011c <__udivsi3>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	d921      	bls.n	8002d06 <UART_SetConfig+0x482>
 8002cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	025b      	lsls	r3, r3, #9
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d21c      	bcs.n	8002d06 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	200e      	movs	r0, #14
 8002cd2:	2418      	movs	r4, #24
 8002cd4:	193b      	adds	r3, r7, r4
 8002cd6:	181b      	adds	r3, r3, r0
 8002cd8:	210f      	movs	r1, #15
 8002cda:	438a      	bics	r2, r1
 8002cdc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b299      	uxth	r1, r3
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	181b      	adds	r3, r3, r0
 8002cee:	193a      	adds	r2, r7, r4
 8002cf0:	1812      	adds	r2, r2, r0
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	193a      	adds	r2, r7, r4
 8002cfe:	1812      	adds	r2, r2, r0
 8002d00:	8812      	ldrh	r2, [r2, #0]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	e061      	b.n	8002dca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d06:	231a      	movs	r3, #26
 8002d08:	2218      	movs	r2, #24
 8002d0a:	4694      	mov	ip, r2
 8002d0c:	44bc      	add	ip, r7
 8002d0e:	4463      	add	r3, ip
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e059      	b.n	8002dca <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d16:	231b      	movs	r3, #27
 8002d18:	2218      	movs	r2, #24
 8002d1a:	4694      	mov	ip, r2
 8002d1c:	44bc      	add	ip, r7
 8002d1e:	4463      	add	r3, ip
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d822      	bhi.n	8002d6c <UART_SetConfig+0x4e8>
 8002d26:	009a      	lsls	r2, r3, #2
 8002d28:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <UART_SetConfig+0x578>)
 8002d2a:	18d3      	adds	r3, r2, r3
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d30:	f7ff fa1e 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8002d34:	0003      	movs	r3, r0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d38:	e022      	b.n	8002d80 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d3a:	f7ff fa2f 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d42:	e01d      	b.n	8002d80 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <UART_SetConfig+0x56c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d002      	beq.n	8002d54 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d4e:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <UART_SetConfig+0x570>)
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d52:	e015      	b.n	8002d80 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002d54:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <UART_SetConfig+0x574>)
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d58:	e012      	b.n	8002d80 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5a:	f7ff f959 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d62:	e00d      	b.n	8002d80 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d6a:	e009      	b.n	8002d80 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d70:	231a      	movs	r3, #26
 8002d72:	2218      	movs	r2, #24
 8002d74:	4694      	mov	ip, r2
 8002d76:	44bc      	add	ip, r7
 8002d78:	4463      	add	r3, ip
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
        break;
 8002d7e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d021      	beq.n	8002dca <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	085a      	lsrs	r2, r3, #1
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	18d2      	adds	r2, r2, r3
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0019      	movs	r1, r3
 8002d96:	0010      	movs	r0, r2
 8002d98:	f7fd f9c0 	bl	800011c <__udivsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	2b0f      	cmp	r3, #15
 8002da6:	d909      	bls.n	8002dbc <UART_SetConfig+0x538>
 8002da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	025b      	lsls	r3, r3, #9
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d204      	bcs.n	8002dbc <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	e006      	b.n	8002dca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002dbc:	231a      	movs	r3, #26
 8002dbe:	2218      	movs	r2, #24
 8002dc0:	4694      	mov	ip, r2
 8002dc2:	44bc      	add	ip, r7
 8002dc4:	4463      	add	r3, ip
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002dd6:	231a      	movs	r3, #26
 8002dd8:	2218      	movs	r2, #24
 8002dda:	4694      	mov	ip, r2
 8002ddc:	44bc      	add	ip, r7
 8002dde:	4463      	add	r3, ip
 8002de0:	781b      	ldrb	r3, [r3, #0]
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b00e      	add	sp, #56	; 0x38
 8002de8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	08004168 	.word	0x08004168
 8002df0:	40021000 	.word	0x40021000
 8002df4:	003d0900 	.word	0x003d0900
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	0800418c 	.word	0x0800418c

08002e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a4a      	ldr	r2, [pc, #296]	; (8002f44 <UART_AdvFeatureConfig+0x144>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	d00b      	beq.n	8002e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a43      	ldr	r2, [pc, #268]	; (8002f48 <UART_AdvFeatureConfig+0x148>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	0019      	movs	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	2204      	movs	r2, #4
 8002e52:	4013      	ands	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <UART_AdvFeatureConfig+0x14c>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	2208      	movs	r2, #8
 8002e74:	4013      	ands	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a34      	ldr	r2, [pc, #208]	; (8002f50 <UART_AdvFeatureConfig+0x150>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2210      	movs	r2, #16
 8002e96:	4013      	ands	r3, r2
 8002e98:	d00b      	beq.n	8002eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <UART_AdvFeatureConfig+0x154>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d00b      	beq.n	8002ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <UART_AdvFeatureConfig+0x158>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2240      	movs	r2, #64	; 0x40
 8002eda:	4013      	ands	r3, r2
 8002edc:	d01d      	beq.n	8002f1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <UART_AdvFeatureConfig+0x15c>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	035b      	lsls	r3, r3, #13
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d10b      	bne.n	8002f1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <UART_AdvFeatureConfig+0x160>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	4013      	ands	r3, r2
 8002f22:	d00b      	beq.n	8002f3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <UART_AdvFeatureConfig+0x164>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	0019      	movs	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]
  }
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b002      	add	sp, #8
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	fffdffff 	.word	0xfffdffff
 8002f48:	fffeffff 	.word	0xfffeffff
 8002f4c:	fffbffff 	.word	0xfffbffff
 8002f50:	ffff7fff 	.word	0xffff7fff
 8002f54:	ffffefff 	.word	0xffffefff
 8002f58:	ffffdfff 	.word	0xffffdfff
 8002f5c:	ffefffff 	.word	0xffefffff
 8002f60:	ff9fffff 	.word	0xff9fffff
 8002f64:	fff7ffff 	.word	0xfff7ffff

08002f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	2100      	movs	r1, #0
 8002f76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f78:	f7fd fef8 	bl	8000d6c <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2208      	movs	r2, #8
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d10c      	bne.n	8002fa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	0391      	lsls	r1, r2, #14
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <UART_CheckIdleState+0x8c>)
 8002f98:	9200      	str	r2, [sp, #0]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f000 f82c 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d001      	beq.n	8002fa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e021      	b.n	8002fec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d10c      	bne.n	8002fd0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	03d1      	lsls	r1, r2, #15
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <UART_CheckIdleState+0x8c>)
 8002fc0:	9200      	str	r2, [sp, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f000 f818 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002fc8:	1e03      	subs	r3, r0, #0
 8002fca:	d001      	beq.n	8002fd0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00d      	b.n	8002fec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2274      	movs	r2, #116	; 0x74
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b004      	add	sp, #16
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	01ffffff 	.word	0x01ffffff

08002ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b094      	sub	sp, #80	; 0x50
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	1dfb      	adds	r3, r7, #7
 8003006:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003008:	e0a3      	b.n	8003152 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300c:	3301      	adds	r3, #1
 800300e:	d100      	bne.n	8003012 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003010:	e09f      	b.n	8003152 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003012:	f7fd feab 	bl	8000d6c <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800301e:	429a      	cmp	r2, r3
 8003020:	d302      	bcc.n	8003028 <UART_WaitOnFlagUntilTimeout+0x30>
 8003022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003024:	2b00      	cmp	r3, #0
 8003026:	d13d      	bne.n	80030a4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003028:	f3ef 8310 	mrs	r3, PRIMASK
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
 8003032:	2301      	movs	r3, #1
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	494c      	ldr	r1, [pc, #304]	; (800317c <UART_WaitOnFlagUntilTimeout+0x184>)
 800304a:	400a      	ands	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305a:	f3ef 8310 	mrs	r3, PRIMASK
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003062:	643b      	str	r3, [r7, #64]	; 0x40
 8003064:	2301      	movs	r3, #1
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	f383 8810 	msr	PRIMASK, r3
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	438a      	bics	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2274      	movs	r2, #116	; 0x74
 800309c:	2100      	movs	r1, #0
 800309e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e067      	b.n	8003174 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2204      	movs	r2, #4
 80030ac:	4013      	ands	r3, r2
 80030ae:	d050      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	401a      	ands	r2, r3
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d146      	bne.n	8003152 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ce:	f3ef 8310 	mrs	r3, PRIMASK
 80030d2:	613b      	str	r3, [r7, #16]
  return(result);
 80030d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d8:	2301      	movs	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4923      	ldr	r1, [pc, #140]	; (800317c <UART_WaitOnFlagUntilTimeout+0x184>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003100:	f3ef 8310 	mrs	r3, PRIMASK
 8003104:	61fb      	str	r3, [r7, #28]
  return(result);
 8003106:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003108:	64bb      	str	r3, [r7, #72]	; 0x48
 800310a:	2301      	movs	r3, #1
 800310c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f383 8810 	msr	PRIMASK, r3
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	438a      	bics	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f383 8810 	msr	PRIMASK, r3
}
 8003130:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	2120      	movs	r1, #32
 8003144:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2274      	movs	r2, #116	; 0x74
 800314a:	2100      	movs	r1, #0
 800314c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e010      	b.n	8003174 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	425a      	negs	r2, r3
 8003162:	4153      	adcs	r3, r2
 8003164:	b2db      	uxtb	r3, r3
 8003166:	001a      	movs	r2, r3
 8003168:	1dfb      	adds	r3, r7, #7
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d100      	bne.n	8003172 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003170:	e74b      	b.n	800300a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	0018      	movs	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	b014      	add	sp, #80	; 0x50
 800317a:	bd80      	pop	{r7, pc}
 800317c:	fffffe5f 	.word	0xfffffe5f

08003180 <__errno>:
 8003180:	4b01      	ldr	r3, [pc, #4]	; (8003188 <__errno+0x8>)
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	4770      	bx	lr
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	2000000c 	.word	0x2000000c

0800318c <__libc_init_array>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	2600      	movs	r6, #0
 8003190:	4d0c      	ldr	r5, [pc, #48]	; (80031c4 <__libc_init_array+0x38>)
 8003192:	4c0d      	ldr	r4, [pc, #52]	; (80031c8 <__libc_init_array+0x3c>)
 8003194:	1b64      	subs	r4, r4, r5
 8003196:	10a4      	asrs	r4, r4, #2
 8003198:	42a6      	cmp	r6, r4
 800319a:	d109      	bne.n	80031b0 <__libc_init_array+0x24>
 800319c:	2600      	movs	r6, #0
 800319e:	f000 ffbf 	bl	8004120 <_init>
 80031a2:	4d0a      	ldr	r5, [pc, #40]	; (80031cc <__libc_init_array+0x40>)
 80031a4:	4c0a      	ldr	r4, [pc, #40]	; (80031d0 <__libc_init_array+0x44>)
 80031a6:	1b64      	subs	r4, r4, r5
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	42a6      	cmp	r6, r4
 80031ac:	d105      	bne.n	80031ba <__libc_init_array+0x2e>
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	00b3      	lsls	r3, r6, #2
 80031b2:	58eb      	ldr	r3, [r5, r3]
 80031b4:	4798      	blx	r3
 80031b6:	3601      	adds	r6, #1
 80031b8:	e7ee      	b.n	8003198 <__libc_init_array+0xc>
 80031ba:	00b3      	lsls	r3, r6, #2
 80031bc:	58eb      	ldr	r3, [r5, r3]
 80031be:	4798      	blx	r3
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7f2      	b.n	80031aa <__libc_init_array+0x1e>
 80031c4:	08004250 	.word	0x08004250
 80031c8:	08004250 	.word	0x08004250
 80031cc:	08004250 	.word	0x08004250
 80031d0:	08004254 	.word	0x08004254

080031d4 <memset>:
 80031d4:	0003      	movs	r3, r0
 80031d6:	1882      	adds	r2, r0, r2
 80031d8:	4293      	cmp	r3, r2
 80031da:	d100      	bne.n	80031de <memset+0xa>
 80031dc:	4770      	bx	lr
 80031de:	7019      	strb	r1, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	e7f9      	b.n	80031d8 <memset+0x4>

080031e4 <iprintf>:
 80031e4:	b40f      	push	{r0, r1, r2, r3}
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <iprintf+0x30>)
 80031e8:	b513      	push	{r0, r1, r4, lr}
 80031ea:	681c      	ldr	r4, [r3, #0]
 80031ec:	2c00      	cmp	r4, #0
 80031ee:	d005      	beq.n	80031fc <iprintf+0x18>
 80031f0:	69a3      	ldr	r3, [r4, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <iprintf+0x18>
 80031f6:	0020      	movs	r0, r4
 80031f8:	f000 f870 	bl	80032dc <__sinit>
 80031fc:	ab05      	add	r3, sp, #20
 80031fe:	0020      	movs	r0, r4
 8003200:	9a04      	ldr	r2, [sp, #16]
 8003202:	68a1      	ldr	r1, [r4, #8]
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	f000 f993 	bl	8003530 <_vfiprintf_r>
 800320a:	bc16      	pop	{r1, r2, r4}
 800320c:	bc08      	pop	{r3}
 800320e:	b004      	add	sp, #16
 8003210:	4718      	bx	r3
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	2000000c 	.word	0x2000000c

08003218 <std>:
 8003218:	2300      	movs	r3, #0
 800321a:	b510      	push	{r4, lr}
 800321c:	0004      	movs	r4, r0
 800321e:	6003      	str	r3, [r0, #0]
 8003220:	6043      	str	r3, [r0, #4]
 8003222:	6083      	str	r3, [r0, #8]
 8003224:	8181      	strh	r1, [r0, #12]
 8003226:	6643      	str	r3, [r0, #100]	; 0x64
 8003228:	0019      	movs	r1, r3
 800322a:	81c2      	strh	r2, [r0, #14]
 800322c:	6103      	str	r3, [r0, #16]
 800322e:	6143      	str	r3, [r0, #20]
 8003230:	6183      	str	r3, [r0, #24]
 8003232:	2208      	movs	r2, #8
 8003234:	305c      	adds	r0, #92	; 0x5c
 8003236:	f7ff ffcd 	bl	80031d4 <memset>
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <std+0x38>)
 800323c:	6263      	str	r3, [r4, #36]	; 0x24
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <std+0x3c>)
 8003240:	6224      	str	r4, [r4, #32]
 8003242:	62a3      	str	r3, [r4, #40]	; 0x28
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <std+0x40>)
 8003246:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <std+0x44>)
 800324a:	6323      	str	r3, [r4, #48]	; 0x30
 800324c:	bd10      	pop	{r4, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	08003acd 	.word	0x08003acd
 8003254:	08003af5 	.word	0x08003af5
 8003258:	08003b2d 	.word	0x08003b2d
 800325c:	08003b59 	.word	0x08003b59

08003260 <_cleanup_r>:
 8003260:	b510      	push	{r4, lr}
 8003262:	4902      	ldr	r1, [pc, #8]	; (800326c <_cleanup_r+0xc>)
 8003264:	f000 f8ba 	bl	80033dc <_fwalk_reent>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	08003e65 	.word	0x08003e65

08003270 <__sfmoreglue>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	2568      	movs	r5, #104	; 0x68
 8003274:	1e4a      	subs	r2, r1, #1
 8003276:	4355      	muls	r5, r2
 8003278:	000e      	movs	r6, r1
 800327a:	0029      	movs	r1, r5
 800327c:	3174      	adds	r1, #116	; 0x74
 800327e:	f000 f8d1 	bl	8003424 <_malloc_r>
 8003282:	1e04      	subs	r4, r0, #0
 8003284:	d008      	beq.n	8003298 <__sfmoreglue+0x28>
 8003286:	2100      	movs	r1, #0
 8003288:	002a      	movs	r2, r5
 800328a:	6001      	str	r1, [r0, #0]
 800328c:	6046      	str	r6, [r0, #4]
 800328e:	300c      	adds	r0, #12
 8003290:	60a0      	str	r0, [r4, #8]
 8003292:	3268      	adds	r2, #104	; 0x68
 8003294:	f7ff ff9e 	bl	80031d4 <memset>
 8003298:	0020      	movs	r0, r4
 800329a:	bd70      	pop	{r4, r5, r6, pc}

0800329c <__sfp_lock_acquire>:
 800329c:	b510      	push	{r4, lr}
 800329e:	4802      	ldr	r0, [pc, #8]	; (80032a8 <__sfp_lock_acquire+0xc>)
 80032a0:	f000 f8bd 	bl	800341e <__retarget_lock_acquire_recursive>
 80032a4:	bd10      	pop	{r4, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	20000180 	.word	0x20000180

080032ac <__sfp_lock_release>:
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4802      	ldr	r0, [pc, #8]	; (80032b8 <__sfp_lock_release+0xc>)
 80032b0:	f000 f8b6 	bl	8003420 <__retarget_lock_release_recursive>
 80032b4:	bd10      	pop	{r4, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	20000180 	.word	0x20000180

080032bc <__sinit_lock_acquire>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	4802      	ldr	r0, [pc, #8]	; (80032c8 <__sinit_lock_acquire+0xc>)
 80032c0:	f000 f8ad 	bl	800341e <__retarget_lock_acquire_recursive>
 80032c4:	bd10      	pop	{r4, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	2000017b 	.word	0x2000017b

080032cc <__sinit_lock_release>:
 80032cc:	b510      	push	{r4, lr}
 80032ce:	4802      	ldr	r0, [pc, #8]	; (80032d8 <__sinit_lock_release+0xc>)
 80032d0:	f000 f8a6 	bl	8003420 <__retarget_lock_release_recursive>
 80032d4:	bd10      	pop	{r4, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	2000017b 	.word	0x2000017b

080032dc <__sinit>:
 80032dc:	b513      	push	{r0, r1, r4, lr}
 80032de:	0004      	movs	r4, r0
 80032e0:	f7ff ffec 	bl	80032bc <__sinit_lock_acquire>
 80032e4:	69a3      	ldr	r3, [r4, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <__sinit+0x14>
 80032ea:	f7ff ffef 	bl	80032cc <__sinit_lock_release>
 80032ee:	bd13      	pop	{r0, r1, r4, pc}
 80032f0:	64a3      	str	r3, [r4, #72]	; 0x48
 80032f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80032f4:	6523      	str	r3, [r4, #80]	; 0x50
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <__sinit+0x68>)
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <__sinit+0x6c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	42a3      	cmp	r3, r4
 8003302:	d101      	bne.n	8003308 <__sinit+0x2c>
 8003304:	2301      	movs	r3, #1
 8003306:	61a3      	str	r3, [r4, #24]
 8003308:	0020      	movs	r0, r4
 800330a:	f000 f81f 	bl	800334c <__sfp>
 800330e:	6060      	str	r0, [r4, #4]
 8003310:	0020      	movs	r0, r4
 8003312:	f000 f81b 	bl	800334c <__sfp>
 8003316:	60a0      	str	r0, [r4, #8]
 8003318:	0020      	movs	r0, r4
 800331a:	f000 f817 	bl	800334c <__sfp>
 800331e:	2200      	movs	r2, #0
 8003320:	2104      	movs	r1, #4
 8003322:	60e0      	str	r0, [r4, #12]
 8003324:	6860      	ldr	r0, [r4, #4]
 8003326:	f7ff ff77 	bl	8003218 <std>
 800332a:	2201      	movs	r2, #1
 800332c:	2109      	movs	r1, #9
 800332e:	68a0      	ldr	r0, [r4, #8]
 8003330:	f7ff ff72 	bl	8003218 <std>
 8003334:	2202      	movs	r2, #2
 8003336:	2112      	movs	r1, #18
 8003338:	68e0      	ldr	r0, [r4, #12]
 800333a:	f7ff ff6d 	bl	8003218 <std>
 800333e:	2301      	movs	r3, #1
 8003340:	61a3      	str	r3, [r4, #24]
 8003342:	e7d2      	b.n	80032ea <__sinit+0xe>
 8003344:	080041b0 	.word	0x080041b0
 8003348:	08003261 	.word	0x08003261

0800334c <__sfp>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	0007      	movs	r7, r0
 8003350:	f7ff ffa4 	bl	800329c <__sfp_lock_acquire>
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <__sfp+0x88>)
 8003356:	681e      	ldr	r6, [r3, #0]
 8003358:	69b3      	ldr	r3, [r6, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <__sfp+0x18>
 800335e:	0030      	movs	r0, r6
 8003360:	f7ff ffbc 	bl	80032dc <__sinit>
 8003364:	3648      	adds	r6, #72	; 0x48
 8003366:	68b4      	ldr	r4, [r6, #8]
 8003368:	6873      	ldr	r3, [r6, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	d504      	bpl.n	8003378 <__sfp+0x2c>
 800336e:	6833      	ldr	r3, [r6, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d022      	beq.n	80033ba <__sfp+0x6e>
 8003374:	6836      	ldr	r6, [r6, #0]
 8003376:	e7f6      	b.n	8003366 <__sfp+0x1a>
 8003378:	220c      	movs	r2, #12
 800337a:	5ea5      	ldrsh	r5, [r4, r2]
 800337c:	2d00      	cmp	r5, #0
 800337e:	d11a      	bne.n	80033b6 <__sfp+0x6a>
 8003380:	0020      	movs	r0, r4
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <__sfp+0x8c>)
 8003384:	3058      	adds	r0, #88	; 0x58
 8003386:	60e3      	str	r3, [r4, #12]
 8003388:	6665      	str	r5, [r4, #100]	; 0x64
 800338a:	f000 f847 	bl	800341c <__retarget_lock_init_recursive>
 800338e:	f7ff ff8d 	bl	80032ac <__sfp_lock_release>
 8003392:	0020      	movs	r0, r4
 8003394:	2208      	movs	r2, #8
 8003396:	0029      	movs	r1, r5
 8003398:	6025      	str	r5, [r4, #0]
 800339a:	60a5      	str	r5, [r4, #8]
 800339c:	6065      	str	r5, [r4, #4]
 800339e:	6125      	str	r5, [r4, #16]
 80033a0:	6165      	str	r5, [r4, #20]
 80033a2:	61a5      	str	r5, [r4, #24]
 80033a4:	305c      	adds	r0, #92	; 0x5c
 80033a6:	f7ff ff15 	bl	80031d4 <memset>
 80033aa:	6365      	str	r5, [r4, #52]	; 0x34
 80033ac:	63a5      	str	r5, [r4, #56]	; 0x38
 80033ae:	64a5      	str	r5, [r4, #72]	; 0x48
 80033b0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80033b2:	0020      	movs	r0, r4
 80033b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b6:	3468      	adds	r4, #104	; 0x68
 80033b8:	e7d7      	b.n	800336a <__sfp+0x1e>
 80033ba:	2104      	movs	r1, #4
 80033bc:	0038      	movs	r0, r7
 80033be:	f7ff ff57 	bl	8003270 <__sfmoreglue>
 80033c2:	1e04      	subs	r4, r0, #0
 80033c4:	6030      	str	r0, [r6, #0]
 80033c6:	d1d5      	bne.n	8003374 <__sfp+0x28>
 80033c8:	f7ff ff70 	bl	80032ac <__sfp_lock_release>
 80033cc:	230c      	movs	r3, #12
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	e7ef      	b.n	80033b2 <__sfp+0x66>
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	080041b0 	.word	0x080041b0
 80033d8:	ffff0001 	.word	0xffff0001

080033dc <_fwalk_reent>:
 80033dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033de:	0004      	movs	r4, r0
 80033e0:	0006      	movs	r6, r0
 80033e2:	2700      	movs	r7, #0
 80033e4:	9101      	str	r1, [sp, #4]
 80033e6:	3448      	adds	r4, #72	; 0x48
 80033e8:	6863      	ldr	r3, [r4, #4]
 80033ea:	68a5      	ldr	r5, [r4, #8]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	9b00      	ldr	r3, [sp, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	d504      	bpl.n	8003400 <_fwalk_reent+0x24>
 80033f6:	6824      	ldr	r4, [r4, #0]
 80033f8:	2c00      	cmp	r4, #0
 80033fa:	d1f5      	bne.n	80033e8 <_fwalk_reent+0xc>
 80033fc:	0038      	movs	r0, r7
 80033fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003400:	89ab      	ldrh	r3, [r5, #12]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d908      	bls.n	8003418 <_fwalk_reent+0x3c>
 8003406:	220e      	movs	r2, #14
 8003408:	5eab      	ldrsh	r3, [r5, r2]
 800340a:	3301      	adds	r3, #1
 800340c:	d004      	beq.n	8003418 <_fwalk_reent+0x3c>
 800340e:	0029      	movs	r1, r5
 8003410:	0030      	movs	r0, r6
 8003412:	9b01      	ldr	r3, [sp, #4]
 8003414:	4798      	blx	r3
 8003416:	4307      	orrs	r7, r0
 8003418:	3568      	adds	r5, #104	; 0x68
 800341a:	e7e8      	b.n	80033ee <_fwalk_reent+0x12>

0800341c <__retarget_lock_init_recursive>:
 800341c:	4770      	bx	lr

0800341e <__retarget_lock_acquire_recursive>:
 800341e:	4770      	bx	lr

08003420 <__retarget_lock_release_recursive>:
 8003420:	4770      	bx	lr
	...

08003424 <_malloc_r>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	2303      	movs	r3, #3
 8003428:	1ccd      	adds	r5, r1, #3
 800342a:	439d      	bics	r5, r3
 800342c:	3508      	adds	r5, #8
 800342e:	0006      	movs	r6, r0
 8003430:	2d0c      	cmp	r5, #12
 8003432:	d21f      	bcs.n	8003474 <_malloc_r+0x50>
 8003434:	250c      	movs	r5, #12
 8003436:	42a9      	cmp	r1, r5
 8003438:	d81e      	bhi.n	8003478 <_malloc_r+0x54>
 800343a:	0030      	movs	r0, r6
 800343c:	f000 fdde 	bl	8003ffc <__malloc_lock>
 8003440:	4925      	ldr	r1, [pc, #148]	; (80034d8 <_malloc_r+0xb4>)
 8003442:	680a      	ldr	r2, [r1, #0]
 8003444:	0014      	movs	r4, r2
 8003446:	2c00      	cmp	r4, #0
 8003448:	d11a      	bne.n	8003480 <_malloc_r+0x5c>
 800344a:	4f24      	ldr	r7, [pc, #144]	; (80034dc <_malloc_r+0xb8>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <_malloc_r+0x38>
 8003452:	0021      	movs	r1, r4
 8003454:	0030      	movs	r0, r6
 8003456:	f000 fb27 	bl	8003aa8 <_sbrk_r>
 800345a:	6038      	str	r0, [r7, #0]
 800345c:	0029      	movs	r1, r5
 800345e:	0030      	movs	r0, r6
 8003460:	f000 fb22 	bl	8003aa8 <_sbrk_r>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d12b      	bne.n	80034c0 <_malloc_r+0x9c>
 8003468:	230c      	movs	r3, #12
 800346a:	0030      	movs	r0, r6
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	f000 fdcd 	bl	800400c <__malloc_unlock>
 8003472:	e003      	b.n	800347c <_malloc_r+0x58>
 8003474:	2d00      	cmp	r5, #0
 8003476:	dade      	bge.n	8003436 <_malloc_r+0x12>
 8003478:	230c      	movs	r3, #12
 800347a:	6033      	str	r3, [r6, #0]
 800347c:	2000      	movs	r0, #0
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	1b5b      	subs	r3, r3, r5
 8003484:	d419      	bmi.n	80034ba <_malloc_r+0x96>
 8003486:	2b0b      	cmp	r3, #11
 8003488:	d903      	bls.n	8003492 <_malloc_r+0x6e>
 800348a:	6023      	str	r3, [r4, #0]
 800348c:	18e4      	adds	r4, r4, r3
 800348e:	6025      	str	r5, [r4, #0]
 8003490:	e003      	b.n	800349a <_malloc_r+0x76>
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	42a2      	cmp	r2, r4
 8003496:	d10e      	bne.n	80034b6 <_malloc_r+0x92>
 8003498:	600b      	str	r3, [r1, #0]
 800349a:	0030      	movs	r0, r6
 800349c:	f000 fdb6 	bl	800400c <__malloc_unlock>
 80034a0:	0020      	movs	r0, r4
 80034a2:	2207      	movs	r2, #7
 80034a4:	300b      	adds	r0, #11
 80034a6:	1d23      	adds	r3, r4, #4
 80034a8:	4390      	bics	r0, r2
 80034aa:	1ac2      	subs	r2, r0, r3
 80034ac:	4298      	cmp	r0, r3
 80034ae:	d0e6      	beq.n	800347e <_malloc_r+0x5a>
 80034b0:	1a1b      	subs	r3, r3, r0
 80034b2:	50a3      	str	r3, [r4, r2]
 80034b4:	e7e3      	b.n	800347e <_malloc_r+0x5a>
 80034b6:	6053      	str	r3, [r2, #4]
 80034b8:	e7ef      	b.n	800349a <_malloc_r+0x76>
 80034ba:	0022      	movs	r2, r4
 80034bc:	6864      	ldr	r4, [r4, #4]
 80034be:	e7c2      	b.n	8003446 <_malloc_r+0x22>
 80034c0:	2303      	movs	r3, #3
 80034c2:	1cc4      	adds	r4, r0, #3
 80034c4:	439c      	bics	r4, r3
 80034c6:	42a0      	cmp	r0, r4
 80034c8:	d0e1      	beq.n	800348e <_malloc_r+0x6a>
 80034ca:	1a21      	subs	r1, r4, r0
 80034cc:	0030      	movs	r0, r6
 80034ce:	f000 faeb 	bl	8003aa8 <_sbrk_r>
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	d1db      	bne.n	800348e <_malloc_r+0x6a>
 80034d6:	e7c7      	b.n	8003468 <_malloc_r+0x44>
 80034d8:	20000098 	.word	0x20000098
 80034dc:	2000009c 	.word	0x2000009c

080034e0 <__sfputc_r>:
 80034e0:	6893      	ldr	r3, [r2, #8]
 80034e2:	b510      	push	{r4, lr}
 80034e4:	3b01      	subs	r3, #1
 80034e6:	6093      	str	r3, [r2, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	da04      	bge.n	80034f6 <__sfputc_r+0x16>
 80034ec:	6994      	ldr	r4, [r2, #24]
 80034ee:	42a3      	cmp	r3, r4
 80034f0:	db07      	blt.n	8003502 <__sfputc_r+0x22>
 80034f2:	290a      	cmp	r1, #10
 80034f4:	d005      	beq.n	8003502 <__sfputc_r+0x22>
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	1c58      	adds	r0, r3, #1
 80034fa:	6010      	str	r0, [r2, #0]
 80034fc:	7019      	strb	r1, [r3, #0]
 80034fe:	0008      	movs	r0, r1
 8003500:	bd10      	pop	{r4, pc}
 8003502:	f000 fb2f 	bl	8003b64 <__swbuf_r>
 8003506:	0001      	movs	r1, r0
 8003508:	e7f9      	b.n	80034fe <__sfputc_r+0x1e>

0800350a <__sfputs_r>:
 800350a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350c:	0006      	movs	r6, r0
 800350e:	000f      	movs	r7, r1
 8003510:	0014      	movs	r4, r2
 8003512:	18d5      	adds	r5, r2, r3
 8003514:	42ac      	cmp	r4, r5
 8003516:	d101      	bne.n	800351c <__sfputs_r+0x12>
 8003518:	2000      	movs	r0, #0
 800351a:	e007      	b.n	800352c <__sfputs_r+0x22>
 800351c:	7821      	ldrb	r1, [r4, #0]
 800351e:	003a      	movs	r2, r7
 8003520:	0030      	movs	r0, r6
 8003522:	f7ff ffdd 	bl	80034e0 <__sfputc_r>
 8003526:	3401      	adds	r4, #1
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d1f3      	bne.n	8003514 <__sfputs_r+0xa>
 800352c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003530 <_vfiprintf_r>:
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	b0a1      	sub	sp, #132	; 0x84
 8003534:	0006      	movs	r6, r0
 8003536:	000c      	movs	r4, r1
 8003538:	001f      	movs	r7, r3
 800353a:	9203      	str	r2, [sp, #12]
 800353c:	2800      	cmp	r0, #0
 800353e:	d004      	beq.n	800354a <_vfiprintf_r+0x1a>
 8003540:	6983      	ldr	r3, [r0, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <_vfiprintf_r+0x1a>
 8003546:	f7ff fec9 	bl	80032dc <__sinit>
 800354a:	4b8e      	ldr	r3, [pc, #568]	; (8003784 <_vfiprintf_r+0x254>)
 800354c:	429c      	cmp	r4, r3
 800354e:	d11c      	bne.n	800358a <_vfiprintf_r+0x5a>
 8003550:	6874      	ldr	r4, [r6, #4]
 8003552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003554:	07db      	lsls	r3, r3, #31
 8003556:	d405      	bmi.n	8003564 <_vfiprintf_r+0x34>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	059b      	lsls	r3, r3, #22
 800355c:	d402      	bmi.n	8003564 <_vfiprintf_r+0x34>
 800355e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003560:	f7ff ff5d 	bl	800341e <__retarget_lock_acquire_recursive>
 8003564:	89a3      	ldrh	r3, [r4, #12]
 8003566:	071b      	lsls	r3, r3, #28
 8003568:	d502      	bpl.n	8003570 <_vfiprintf_r+0x40>
 800356a:	6923      	ldr	r3, [r4, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11d      	bne.n	80035ac <_vfiprintf_r+0x7c>
 8003570:	0021      	movs	r1, r4
 8003572:	0030      	movs	r0, r6
 8003574:	f000 fb60 	bl	8003c38 <__swsetup_r>
 8003578:	2800      	cmp	r0, #0
 800357a:	d017      	beq.n	80035ac <_vfiprintf_r+0x7c>
 800357c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800357e:	07db      	lsls	r3, r3, #31
 8003580:	d50d      	bpl.n	800359e <_vfiprintf_r+0x6e>
 8003582:	2001      	movs	r0, #1
 8003584:	4240      	negs	r0, r0
 8003586:	b021      	add	sp, #132	; 0x84
 8003588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358a:	4b7f      	ldr	r3, [pc, #508]	; (8003788 <_vfiprintf_r+0x258>)
 800358c:	429c      	cmp	r4, r3
 800358e:	d101      	bne.n	8003594 <_vfiprintf_r+0x64>
 8003590:	68b4      	ldr	r4, [r6, #8]
 8003592:	e7de      	b.n	8003552 <_vfiprintf_r+0x22>
 8003594:	4b7d      	ldr	r3, [pc, #500]	; (800378c <_vfiprintf_r+0x25c>)
 8003596:	429c      	cmp	r4, r3
 8003598:	d1db      	bne.n	8003552 <_vfiprintf_r+0x22>
 800359a:	68f4      	ldr	r4, [r6, #12]
 800359c:	e7d9      	b.n	8003552 <_vfiprintf_r+0x22>
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	059b      	lsls	r3, r3, #22
 80035a2:	d4ee      	bmi.n	8003582 <_vfiprintf_r+0x52>
 80035a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035a6:	f7ff ff3b 	bl	8003420 <__retarget_lock_release_recursive>
 80035aa:	e7ea      	b.n	8003582 <_vfiprintf_r+0x52>
 80035ac:	2300      	movs	r3, #0
 80035ae:	ad08      	add	r5, sp, #32
 80035b0:	616b      	str	r3, [r5, #20]
 80035b2:	3320      	adds	r3, #32
 80035b4:	766b      	strb	r3, [r5, #25]
 80035b6:	3310      	adds	r3, #16
 80035b8:	76ab      	strb	r3, [r5, #26]
 80035ba:	9707      	str	r7, [sp, #28]
 80035bc:	9f03      	ldr	r7, [sp, #12]
 80035be:	783b      	ldrb	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <_vfiprintf_r+0x98>
 80035c4:	2b25      	cmp	r3, #37	; 0x25
 80035c6:	d14e      	bne.n	8003666 <_vfiprintf_r+0x136>
 80035c8:	9b03      	ldr	r3, [sp, #12]
 80035ca:	1afb      	subs	r3, r7, r3
 80035cc:	9305      	str	r3, [sp, #20]
 80035ce:	9b03      	ldr	r3, [sp, #12]
 80035d0:	429f      	cmp	r7, r3
 80035d2:	d00d      	beq.n	80035f0 <_vfiprintf_r+0xc0>
 80035d4:	9b05      	ldr	r3, [sp, #20]
 80035d6:	0021      	movs	r1, r4
 80035d8:	0030      	movs	r0, r6
 80035da:	9a03      	ldr	r2, [sp, #12]
 80035dc:	f7ff ff95 	bl	800350a <__sfputs_r>
 80035e0:	1c43      	adds	r3, r0, #1
 80035e2:	d100      	bne.n	80035e6 <_vfiprintf_r+0xb6>
 80035e4:	e0b5      	b.n	8003752 <_vfiprintf_r+0x222>
 80035e6:	696a      	ldr	r2, [r5, #20]
 80035e8:	9b05      	ldr	r3, [sp, #20]
 80035ea:	4694      	mov	ip, r2
 80035ec:	4463      	add	r3, ip
 80035ee:	616b      	str	r3, [r5, #20]
 80035f0:	783b      	ldrb	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d100      	bne.n	80035f8 <_vfiprintf_r+0xc8>
 80035f6:	e0ac      	b.n	8003752 <_vfiprintf_r+0x222>
 80035f8:	2201      	movs	r2, #1
 80035fa:	1c7b      	adds	r3, r7, #1
 80035fc:	9303      	str	r3, [sp, #12]
 80035fe:	2300      	movs	r3, #0
 8003600:	4252      	negs	r2, r2
 8003602:	606a      	str	r2, [r5, #4]
 8003604:	a904      	add	r1, sp, #16
 8003606:	3254      	adds	r2, #84	; 0x54
 8003608:	1852      	adds	r2, r2, r1
 800360a:	602b      	str	r3, [r5, #0]
 800360c:	60eb      	str	r3, [r5, #12]
 800360e:	60ab      	str	r3, [r5, #8]
 8003610:	7013      	strb	r3, [r2, #0]
 8003612:	65ab      	str	r3, [r5, #88]	; 0x58
 8003614:	9b03      	ldr	r3, [sp, #12]
 8003616:	2205      	movs	r2, #5
 8003618:	7819      	ldrb	r1, [r3, #0]
 800361a:	485d      	ldr	r0, [pc, #372]	; (8003790 <_vfiprintf_r+0x260>)
 800361c:	f000 fce2 	bl	8003fe4 <memchr>
 8003620:	9b03      	ldr	r3, [sp, #12]
 8003622:	1c5f      	adds	r7, r3, #1
 8003624:	2800      	cmp	r0, #0
 8003626:	d120      	bne.n	800366a <_vfiprintf_r+0x13a>
 8003628:	682a      	ldr	r2, [r5, #0]
 800362a:	06d3      	lsls	r3, r2, #27
 800362c:	d504      	bpl.n	8003638 <_vfiprintf_r+0x108>
 800362e:	2353      	movs	r3, #83	; 0x53
 8003630:	a904      	add	r1, sp, #16
 8003632:	185b      	adds	r3, r3, r1
 8003634:	2120      	movs	r1, #32
 8003636:	7019      	strb	r1, [r3, #0]
 8003638:	0713      	lsls	r3, r2, #28
 800363a:	d504      	bpl.n	8003646 <_vfiprintf_r+0x116>
 800363c:	2353      	movs	r3, #83	; 0x53
 800363e:	a904      	add	r1, sp, #16
 8003640:	185b      	adds	r3, r3, r1
 8003642:	212b      	movs	r1, #43	; 0x2b
 8003644:	7019      	strb	r1, [r3, #0]
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b2a      	cmp	r3, #42	; 0x2a
 800364c:	d016      	beq.n	800367c <_vfiprintf_r+0x14c>
 800364e:	2100      	movs	r1, #0
 8003650:	68eb      	ldr	r3, [r5, #12]
 8003652:	9f03      	ldr	r7, [sp, #12]
 8003654:	783a      	ldrb	r2, [r7, #0]
 8003656:	1c78      	adds	r0, r7, #1
 8003658:	3a30      	subs	r2, #48	; 0x30
 800365a:	4684      	mov	ip, r0
 800365c:	2a09      	cmp	r2, #9
 800365e:	d94f      	bls.n	8003700 <_vfiprintf_r+0x1d0>
 8003660:	2900      	cmp	r1, #0
 8003662:	d111      	bne.n	8003688 <_vfiprintf_r+0x158>
 8003664:	e017      	b.n	8003696 <_vfiprintf_r+0x166>
 8003666:	3701      	adds	r7, #1
 8003668:	e7a9      	b.n	80035be <_vfiprintf_r+0x8e>
 800366a:	4b49      	ldr	r3, [pc, #292]	; (8003790 <_vfiprintf_r+0x260>)
 800366c:	682a      	ldr	r2, [r5, #0]
 800366e:	1ac0      	subs	r0, r0, r3
 8003670:	2301      	movs	r3, #1
 8003672:	4083      	lsls	r3, r0
 8003674:	4313      	orrs	r3, r2
 8003676:	602b      	str	r3, [r5, #0]
 8003678:	9703      	str	r7, [sp, #12]
 800367a:	e7cb      	b.n	8003614 <_vfiprintf_r+0xe4>
 800367c:	9b07      	ldr	r3, [sp, #28]
 800367e:	1d19      	adds	r1, r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	9107      	str	r1, [sp, #28]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db01      	blt.n	800368c <_vfiprintf_r+0x15c>
 8003688:	930b      	str	r3, [sp, #44]	; 0x2c
 800368a:	e004      	b.n	8003696 <_vfiprintf_r+0x166>
 800368c:	425b      	negs	r3, r3
 800368e:	60eb      	str	r3, [r5, #12]
 8003690:	2302      	movs	r3, #2
 8003692:	4313      	orrs	r3, r2
 8003694:	602b      	str	r3, [r5, #0]
 8003696:	783b      	ldrb	r3, [r7, #0]
 8003698:	2b2e      	cmp	r3, #46	; 0x2e
 800369a:	d10a      	bne.n	80036b2 <_vfiprintf_r+0x182>
 800369c:	787b      	ldrb	r3, [r7, #1]
 800369e:	2b2a      	cmp	r3, #42	; 0x2a
 80036a0:	d137      	bne.n	8003712 <_vfiprintf_r+0x1e2>
 80036a2:	9b07      	ldr	r3, [sp, #28]
 80036a4:	3702      	adds	r7, #2
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	9207      	str	r2, [sp, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	db2d      	blt.n	800370c <_vfiprintf_r+0x1dc>
 80036b0:	9309      	str	r3, [sp, #36]	; 0x24
 80036b2:	2203      	movs	r2, #3
 80036b4:	7839      	ldrb	r1, [r7, #0]
 80036b6:	4837      	ldr	r0, [pc, #220]	; (8003794 <_vfiprintf_r+0x264>)
 80036b8:	f000 fc94 	bl	8003fe4 <memchr>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d007      	beq.n	80036d0 <_vfiprintf_r+0x1a0>
 80036c0:	4b34      	ldr	r3, [pc, #208]	; (8003794 <_vfiprintf_r+0x264>)
 80036c2:	682a      	ldr	r2, [r5, #0]
 80036c4:	1ac0      	subs	r0, r0, r3
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	4083      	lsls	r3, r0
 80036ca:	4313      	orrs	r3, r2
 80036cc:	3701      	adds	r7, #1
 80036ce:	602b      	str	r3, [r5, #0]
 80036d0:	7839      	ldrb	r1, [r7, #0]
 80036d2:	1c7b      	adds	r3, r7, #1
 80036d4:	2206      	movs	r2, #6
 80036d6:	4830      	ldr	r0, [pc, #192]	; (8003798 <_vfiprintf_r+0x268>)
 80036d8:	9303      	str	r3, [sp, #12]
 80036da:	7629      	strb	r1, [r5, #24]
 80036dc:	f000 fc82 	bl	8003fe4 <memchr>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d045      	beq.n	8003770 <_vfiprintf_r+0x240>
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <_vfiprintf_r+0x26c>)
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d127      	bne.n	800373a <_vfiprintf_r+0x20a>
 80036ea:	2207      	movs	r2, #7
 80036ec:	9b07      	ldr	r3, [sp, #28]
 80036ee:	3307      	adds	r3, #7
 80036f0:	4393      	bics	r3, r2
 80036f2:	3308      	adds	r3, #8
 80036f4:	9307      	str	r3, [sp, #28]
 80036f6:	696b      	ldr	r3, [r5, #20]
 80036f8:	9a04      	ldr	r2, [sp, #16]
 80036fa:	189b      	adds	r3, r3, r2
 80036fc:	616b      	str	r3, [r5, #20]
 80036fe:	e75d      	b.n	80035bc <_vfiprintf_r+0x8c>
 8003700:	210a      	movs	r1, #10
 8003702:	434b      	muls	r3, r1
 8003704:	4667      	mov	r7, ip
 8003706:	189b      	adds	r3, r3, r2
 8003708:	3909      	subs	r1, #9
 800370a:	e7a3      	b.n	8003654 <_vfiprintf_r+0x124>
 800370c:	2301      	movs	r3, #1
 800370e:	425b      	negs	r3, r3
 8003710:	e7ce      	b.n	80036b0 <_vfiprintf_r+0x180>
 8003712:	2300      	movs	r3, #0
 8003714:	001a      	movs	r2, r3
 8003716:	3701      	adds	r7, #1
 8003718:	606b      	str	r3, [r5, #4]
 800371a:	7839      	ldrb	r1, [r7, #0]
 800371c:	1c78      	adds	r0, r7, #1
 800371e:	3930      	subs	r1, #48	; 0x30
 8003720:	4684      	mov	ip, r0
 8003722:	2909      	cmp	r1, #9
 8003724:	d903      	bls.n	800372e <_vfiprintf_r+0x1fe>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0c3      	beq.n	80036b2 <_vfiprintf_r+0x182>
 800372a:	9209      	str	r2, [sp, #36]	; 0x24
 800372c:	e7c1      	b.n	80036b2 <_vfiprintf_r+0x182>
 800372e:	230a      	movs	r3, #10
 8003730:	435a      	muls	r2, r3
 8003732:	4667      	mov	r7, ip
 8003734:	1852      	adds	r2, r2, r1
 8003736:	3b09      	subs	r3, #9
 8003738:	e7ef      	b.n	800371a <_vfiprintf_r+0x1ea>
 800373a:	ab07      	add	r3, sp, #28
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	0022      	movs	r2, r4
 8003740:	0029      	movs	r1, r5
 8003742:	0030      	movs	r0, r6
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <_vfiprintf_r+0x270>)
 8003746:	e000      	b.n	800374a <_vfiprintf_r+0x21a>
 8003748:	bf00      	nop
 800374a:	9004      	str	r0, [sp, #16]
 800374c:	9b04      	ldr	r3, [sp, #16]
 800374e:	3301      	adds	r3, #1
 8003750:	d1d1      	bne.n	80036f6 <_vfiprintf_r+0x1c6>
 8003752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003754:	07db      	lsls	r3, r3, #31
 8003756:	d405      	bmi.n	8003764 <_vfiprintf_r+0x234>
 8003758:	89a3      	ldrh	r3, [r4, #12]
 800375a:	059b      	lsls	r3, r3, #22
 800375c:	d402      	bmi.n	8003764 <_vfiprintf_r+0x234>
 800375e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003760:	f7ff fe5e 	bl	8003420 <__retarget_lock_release_recursive>
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	065b      	lsls	r3, r3, #25
 8003768:	d500      	bpl.n	800376c <_vfiprintf_r+0x23c>
 800376a:	e70a      	b.n	8003582 <_vfiprintf_r+0x52>
 800376c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800376e:	e70a      	b.n	8003586 <_vfiprintf_r+0x56>
 8003770:	ab07      	add	r3, sp, #28
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	0022      	movs	r2, r4
 8003776:	0029      	movs	r1, r5
 8003778:	0030      	movs	r0, r6
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <_vfiprintf_r+0x270>)
 800377c:	f000 f882 	bl	8003884 <_printf_i>
 8003780:	e7e3      	b.n	800374a <_vfiprintf_r+0x21a>
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	080041d4 	.word	0x080041d4
 8003788:	080041f4 	.word	0x080041f4
 800378c:	080041b4 	.word	0x080041b4
 8003790:	08004214 	.word	0x08004214
 8003794:	0800421a 	.word	0x0800421a
 8003798:	0800421e 	.word	0x0800421e
 800379c:	00000000 	.word	0x00000000
 80037a0:	0800350b 	.word	0x0800350b

080037a4 <_printf_common>:
 80037a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037a6:	0015      	movs	r5, r2
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	688a      	ldr	r2, [r1, #8]
 80037ac:	690b      	ldr	r3, [r1, #16]
 80037ae:	000c      	movs	r4, r1
 80037b0:	9000      	str	r0, [sp, #0]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	da00      	bge.n	80037b8 <_printf_common+0x14>
 80037b6:	0013      	movs	r3, r2
 80037b8:	0022      	movs	r2, r4
 80037ba:	602b      	str	r3, [r5, #0]
 80037bc:	3243      	adds	r2, #67	; 0x43
 80037be:	7812      	ldrb	r2, [r2, #0]
 80037c0:	2a00      	cmp	r2, #0
 80037c2:	d001      	beq.n	80037c8 <_printf_common+0x24>
 80037c4:	3301      	adds	r3, #1
 80037c6:	602b      	str	r3, [r5, #0]
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	069b      	lsls	r3, r3, #26
 80037cc:	d502      	bpl.n	80037d4 <_printf_common+0x30>
 80037ce:	682b      	ldr	r3, [r5, #0]
 80037d0:	3302      	adds	r3, #2
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	2306      	movs	r3, #6
 80037d8:	0017      	movs	r7, r2
 80037da:	401f      	ands	r7, r3
 80037dc:	421a      	tst	r2, r3
 80037de:	d027      	beq.n	8003830 <_printf_common+0x8c>
 80037e0:	0023      	movs	r3, r4
 80037e2:	3343      	adds	r3, #67	; 0x43
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	4193      	sbcs	r3, r2
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	0692      	lsls	r2, r2, #26
 80037ee:	d430      	bmi.n	8003852 <_printf_common+0xae>
 80037f0:	0022      	movs	r2, r4
 80037f2:	9901      	ldr	r1, [sp, #4]
 80037f4:	9800      	ldr	r0, [sp, #0]
 80037f6:	9e08      	ldr	r6, [sp, #32]
 80037f8:	3243      	adds	r2, #67	; 0x43
 80037fa:	47b0      	blx	r6
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	d025      	beq.n	800384c <_printf_common+0xa8>
 8003800:	2306      	movs	r3, #6
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	682a      	ldr	r2, [r5, #0]
 8003806:	68e1      	ldr	r1, [r4, #12]
 8003808:	2500      	movs	r5, #0
 800380a:	4003      	ands	r3, r0
 800380c:	2b04      	cmp	r3, #4
 800380e:	d103      	bne.n	8003818 <_printf_common+0x74>
 8003810:	1a8d      	subs	r5, r1, r2
 8003812:	43eb      	mvns	r3, r5
 8003814:	17db      	asrs	r3, r3, #31
 8003816:	401d      	ands	r5, r3
 8003818:	68a3      	ldr	r3, [r4, #8]
 800381a:	6922      	ldr	r2, [r4, #16]
 800381c:	4293      	cmp	r3, r2
 800381e:	dd01      	ble.n	8003824 <_printf_common+0x80>
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	18ed      	adds	r5, r5, r3
 8003824:	2700      	movs	r7, #0
 8003826:	42bd      	cmp	r5, r7
 8003828:	d120      	bne.n	800386c <_printf_common+0xc8>
 800382a:	2000      	movs	r0, #0
 800382c:	e010      	b.n	8003850 <_printf_common+0xac>
 800382e:	3701      	adds	r7, #1
 8003830:	68e3      	ldr	r3, [r4, #12]
 8003832:	682a      	ldr	r2, [r5, #0]
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	42bb      	cmp	r3, r7
 8003838:	ddd2      	ble.n	80037e0 <_printf_common+0x3c>
 800383a:	0022      	movs	r2, r4
 800383c:	2301      	movs	r3, #1
 800383e:	9901      	ldr	r1, [sp, #4]
 8003840:	9800      	ldr	r0, [sp, #0]
 8003842:	9e08      	ldr	r6, [sp, #32]
 8003844:	3219      	adds	r2, #25
 8003846:	47b0      	blx	r6
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d1f0      	bne.n	800382e <_printf_common+0x8a>
 800384c:	2001      	movs	r0, #1
 800384e:	4240      	negs	r0, r0
 8003850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003852:	2030      	movs	r0, #48	; 0x30
 8003854:	18e1      	adds	r1, r4, r3
 8003856:	3143      	adds	r1, #67	; 0x43
 8003858:	7008      	strb	r0, [r1, #0]
 800385a:	0021      	movs	r1, r4
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	3145      	adds	r1, #69	; 0x45
 8003860:	7809      	ldrb	r1, [r1, #0]
 8003862:	18a2      	adds	r2, r4, r2
 8003864:	3243      	adds	r2, #67	; 0x43
 8003866:	3302      	adds	r3, #2
 8003868:	7011      	strb	r1, [r2, #0]
 800386a:	e7c1      	b.n	80037f0 <_printf_common+0x4c>
 800386c:	0022      	movs	r2, r4
 800386e:	2301      	movs	r3, #1
 8003870:	9901      	ldr	r1, [sp, #4]
 8003872:	9800      	ldr	r0, [sp, #0]
 8003874:	9e08      	ldr	r6, [sp, #32]
 8003876:	321a      	adds	r2, #26
 8003878:	47b0      	blx	r6
 800387a:	1c43      	adds	r3, r0, #1
 800387c:	d0e6      	beq.n	800384c <_printf_common+0xa8>
 800387e:	3701      	adds	r7, #1
 8003880:	e7d1      	b.n	8003826 <_printf_common+0x82>
	...

08003884 <_printf_i>:
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	b08b      	sub	sp, #44	; 0x2c
 8003888:	9206      	str	r2, [sp, #24]
 800388a:	000a      	movs	r2, r1
 800388c:	3243      	adds	r2, #67	; 0x43
 800388e:	9307      	str	r3, [sp, #28]
 8003890:	9005      	str	r0, [sp, #20]
 8003892:	9204      	str	r2, [sp, #16]
 8003894:	7e0a      	ldrb	r2, [r1, #24]
 8003896:	000c      	movs	r4, r1
 8003898:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800389a:	2a78      	cmp	r2, #120	; 0x78
 800389c:	d806      	bhi.n	80038ac <_printf_i+0x28>
 800389e:	2a62      	cmp	r2, #98	; 0x62
 80038a0:	d808      	bhi.n	80038b4 <_printf_i+0x30>
 80038a2:	2a00      	cmp	r2, #0
 80038a4:	d100      	bne.n	80038a8 <_printf_i+0x24>
 80038a6:	e0c0      	b.n	8003a2a <_printf_i+0x1a6>
 80038a8:	2a58      	cmp	r2, #88	; 0x58
 80038aa:	d052      	beq.n	8003952 <_printf_i+0xce>
 80038ac:	0026      	movs	r6, r4
 80038ae:	3642      	adds	r6, #66	; 0x42
 80038b0:	7032      	strb	r2, [r6, #0]
 80038b2:	e022      	b.n	80038fa <_printf_i+0x76>
 80038b4:	0010      	movs	r0, r2
 80038b6:	3863      	subs	r0, #99	; 0x63
 80038b8:	2815      	cmp	r0, #21
 80038ba:	d8f7      	bhi.n	80038ac <_printf_i+0x28>
 80038bc:	f7fc fc24 	bl	8000108 <__gnu_thumb1_case_shi>
 80038c0:	001f0016 	.word	0x001f0016
 80038c4:	fff6fff6 	.word	0xfff6fff6
 80038c8:	fff6fff6 	.word	0xfff6fff6
 80038cc:	fff6001f 	.word	0xfff6001f
 80038d0:	fff6fff6 	.word	0xfff6fff6
 80038d4:	00a8fff6 	.word	0x00a8fff6
 80038d8:	009a0036 	.word	0x009a0036
 80038dc:	fff6fff6 	.word	0xfff6fff6
 80038e0:	fff600b9 	.word	0xfff600b9
 80038e4:	fff60036 	.word	0xfff60036
 80038e8:	009efff6 	.word	0x009efff6
 80038ec:	0026      	movs	r6, r4
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	3642      	adds	r6, #66	; 0x42
 80038f2:	1d11      	adds	r1, r2, #4
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	7033      	strb	r3, [r6, #0]
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0a7      	b.n	8003a4e <_printf_i+0x1ca>
 80038fe:	6808      	ldr	r0, [r1, #0]
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	1d0a      	adds	r2, r1, #4
 8003904:	0605      	lsls	r5, r0, #24
 8003906:	d50b      	bpl.n	8003920 <_printf_i+0x9c>
 8003908:	680d      	ldr	r5, [r1, #0]
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	2d00      	cmp	r5, #0
 800390e:	da03      	bge.n	8003918 <_printf_i+0x94>
 8003910:	232d      	movs	r3, #45	; 0x2d
 8003912:	9a04      	ldr	r2, [sp, #16]
 8003914:	426d      	negs	r5, r5
 8003916:	7013      	strb	r3, [r2, #0]
 8003918:	4b61      	ldr	r3, [pc, #388]	; (8003aa0 <_printf_i+0x21c>)
 800391a:	270a      	movs	r7, #10
 800391c:	9303      	str	r3, [sp, #12]
 800391e:	e032      	b.n	8003986 <_printf_i+0x102>
 8003920:	680d      	ldr	r5, [r1, #0]
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	0641      	lsls	r1, r0, #25
 8003926:	d5f1      	bpl.n	800390c <_printf_i+0x88>
 8003928:	b22d      	sxth	r5, r5
 800392a:	e7ef      	b.n	800390c <_printf_i+0x88>
 800392c:	680d      	ldr	r5, [r1, #0]
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	1d08      	adds	r0, r1, #4
 8003932:	6018      	str	r0, [r3, #0]
 8003934:	062e      	lsls	r6, r5, #24
 8003936:	d501      	bpl.n	800393c <_printf_i+0xb8>
 8003938:	680d      	ldr	r5, [r1, #0]
 800393a:	e003      	b.n	8003944 <_printf_i+0xc0>
 800393c:	066d      	lsls	r5, r5, #25
 800393e:	d5fb      	bpl.n	8003938 <_printf_i+0xb4>
 8003940:	680d      	ldr	r5, [r1, #0]
 8003942:	b2ad      	uxth	r5, r5
 8003944:	4b56      	ldr	r3, [pc, #344]	; (8003aa0 <_printf_i+0x21c>)
 8003946:	270a      	movs	r7, #10
 8003948:	9303      	str	r3, [sp, #12]
 800394a:	2a6f      	cmp	r2, #111	; 0x6f
 800394c:	d117      	bne.n	800397e <_printf_i+0xfa>
 800394e:	2708      	movs	r7, #8
 8003950:	e015      	b.n	800397e <_printf_i+0xfa>
 8003952:	3145      	adds	r1, #69	; 0x45
 8003954:	700a      	strb	r2, [r1, #0]
 8003956:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <_printf_i+0x21c>)
 8003958:	9203      	str	r2, [sp, #12]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	6821      	ldr	r1, [r4, #0]
 800395e:	ca20      	ldmia	r2!, {r5}
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	0608      	lsls	r0, r1, #24
 8003964:	d550      	bpl.n	8003a08 <_printf_i+0x184>
 8003966:	07cb      	lsls	r3, r1, #31
 8003968:	d502      	bpl.n	8003970 <_printf_i+0xec>
 800396a:	2320      	movs	r3, #32
 800396c:	4319      	orrs	r1, r3
 800396e:	6021      	str	r1, [r4, #0]
 8003970:	2710      	movs	r7, #16
 8003972:	2d00      	cmp	r5, #0
 8003974:	d103      	bne.n	800397e <_printf_i+0xfa>
 8003976:	2320      	movs	r3, #32
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	439a      	bics	r2, r3
 800397c:	6022      	str	r2, [r4, #0]
 800397e:	0023      	movs	r3, r4
 8003980:	2200      	movs	r2, #0
 8003982:	3343      	adds	r3, #67	; 0x43
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	6863      	ldr	r3, [r4, #4]
 8003988:	60a3      	str	r3, [r4, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	db03      	blt.n	8003996 <_printf_i+0x112>
 800398e:	2204      	movs	r2, #4
 8003990:	6821      	ldr	r1, [r4, #0]
 8003992:	4391      	bics	r1, r2
 8003994:	6021      	str	r1, [r4, #0]
 8003996:	2d00      	cmp	r5, #0
 8003998:	d102      	bne.n	80039a0 <_printf_i+0x11c>
 800399a:	9e04      	ldr	r6, [sp, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00c      	beq.n	80039ba <_printf_i+0x136>
 80039a0:	9e04      	ldr	r6, [sp, #16]
 80039a2:	0028      	movs	r0, r5
 80039a4:	0039      	movs	r1, r7
 80039a6:	f7fc fc3f 	bl	8000228 <__aeabi_uidivmod>
 80039aa:	9b03      	ldr	r3, [sp, #12]
 80039ac:	3e01      	subs	r6, #1
 80039ae:	5c5b      	ldrb	r3, [r3, r1]
 80039b0:	7033      	strb	r3, [r6, #0]
 80039b2:	002b      	movs	r3, r5
 80039b4:	0005      	movs	r5, r0
 80039b6:	429f      	cmp	r7, r3
 80039b8:	d9f3      	bls.n	80039a2 <_printf_i+0x11e>
 80039ba:	2f08      	cmp	r7, #8
 80039bc:	d109      	bne.n	80039d2 <_printf_i+0x14e>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	07db      	lsls	r3, r3, #31
 80039c2:	d506      	bpl.n	80039d2 <_printf_i+0x14e>
 80039c4:	6863      	ldr	r3, [r4, #4]
 80039c6:	6922      	ldr	r2, [r4, #16]
 80039c8:	4293      	cmp	r3, r2
 80039ca:	dc02      	bgt.n	80039d2 <_printf_i+0x14e>
 80039cc:	2330      	movs	r3, #48	; 0x30
 80039ce:	3e01      	subs	r6, #1
 80039d0:	7033      	strb	r3, [r6, #0]
 80039d2:	9b04      	ldr	r3, [sp, #16]
 80039d4:	1b9b      	subs	r3, r3, r6
 80039d6:	6123      	str	r3, [r4, #16]
 80039d8:	9b07      	ldr	r3, [sp, #28]
 80039da:	0021      	movs	r1, r4
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	9805      	ldr	r0, [sp, #20]
 80039e0:	9b06      	ldr	r3, [sp, #24]
 80039e2:	aa09      	add	r2, sp, #36	; 0x24
 80039e4:	f7ff fede 	bl	80037a4 <_printf_common>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d135      	bne.n	8003a58 <_printf_i+0x1d4>
 80039ec:	2001      	movs	r0, #1
 80039ee:	4240      	negs	r0, r0
 80039f0:	b00b      	add	sp, #44	; 0x2c
 80039f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f4:	2220      	movs	r2, #32
 80039f6:	6809      	ldr	r1, [r1, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	6022      	str	r2, [r4, #0]
 80039fc:	0022      	movs	r2, r4
 80039fe:	2178      	movs	r1, #120	; 0x78
 8003a00:	3245      	adds	r2, #69	; 0x45
 8003a02:	7011      	strb	r1, [r2, #0]
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <_printf_i+0x220>)
 8003a06:	e7a7      	b.n	8003958 <_printf_i+0xd4>
 8003a08:	0648      	lsls	r0, r1, #25
 8003a0a:	d5ac      	bpl.n	8003966 <_printf_i+0xe2>
 8003a0c:	b2ad      	uxth	r5, r5
 8003a0e:	e7aa      	b.n	8003966 <_printf_i+0xe2>
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	680d      	ldr	r5, [r1, #0]
 8003a14:	1d10      	adds	r0, r2, #4
 8003a16:	6949      	ldr	r1, [r1, #20]
 8003a18:	6018      	str	r0, [r3, #0]
 8003a1a:	6813      	ldr	r3, [r2, #0]
 8003a1c:	062e      	lsls	r6, r5, #24
 8003a1e:	d501      	bpl.n	8003a24 <_printf_i+0x1a0>
 8003a20:	6019      	str	r1, [r3, #0]
 8003a22:	e002      	b.n	8003a2a <_printf_i+0x1a6>
 8003a24:	066d      	lsls	r5, r5, #25
 8003a26:	d5fb      	bpl.n	8003a20 <_printf_i+0x19c>
 8003a28:	8019      	strh	r1, [r3, #0]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9e04      	ldr	r6, [sp, #16]
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	e7d2      	b.n	80039d8 <_printf_i+0x154>
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	1d11      	adds	r1, r2, #4
 8003a36:	6019      	str	r1, [r3, #0]
 8003a38:	6816      	ldr	r6, [r2, #0]
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	0030      	movs	r0, r6
 8003a3e:	6862      	ldr	r2, [r4, #4]
 8003a40:	f000 fad0 	bl	8003fe4 <memchr>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d001      	beq.n	8003a4c <_printf_i+0x1c8>
 8003a48:	1b80      	subs	r0, r0, r6
 8003a4a:	6060      	str	r0, [r4, #4]
 8003a4c:	6863      	ldr	r3, [r4, #4]
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	2300      	movs	r3, #0
 8003a52:	9a04      	ldr	r2, [sp, #16]
 8003a54:	7013      	strb	r3, [r2, #0]
 8003a56:	e7bf      	b.n	80039d8 <_printf_i+0x154>
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	0032      	movs	r2, r6
 8003a5c:	9906      	ldr	r1, [sp, #24]
 8003a5e:	9805      	ldr	r0, [sp, #20]
 8003a60:	9d07      	ldr	r5, [sp, #28]
 8003a62:	47a8      	blx	r5
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	d0c1      	beq.n	80039ec <_printf_i+0x168>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	079b      	lsls	r3, r3, #30
 8003a6c:	d415      	bmi.n	8003a9a <_printf_i+0x216>
 8003a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a70:	68e0      	ldr	r0, [r4, #12]
 8003a72:	4298      	cmp	r0, r3
 8003a74:	dabc      	bge.n	80039f0 <_printf_i+0x16c>
 8003a76:	0018      	movs	r0, r3
 8003a78:	e7ba      	b.n	80039f0 <_printf_i+0x16c>
 8003a7a:	0022      	movs	r2, r4
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	9906      	ldr	r1, [sp, #24]
 8003a80:	9805      	ldr	r0, [sp, #20]
 8003a82:	9e07      	ldr	r6, [sp, #28]
 8003a84:	3219      	adds	r2, #25
 8003a86:	47b0      	blx	r6
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d0af      	beq.n	80039ec <_printf_i+0x168>
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	68e3      	ldr	r3, [r4, #12]
 8003a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	42ab      	cmp	r3, r5
 8003a96:	dcf0      	bgt.n	8003a7a <_printf_i+0x1f6>
 8003a98:	e7e9      	b.n	8003a6e <_printf_i+0x1ea>
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	e7f7      	b.n	8003a8e <_printf_i+0x20a>
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	08004225 	.word	0x08004225
 8003aa4:	08004236 	.word	0x08004236

08003aa8 <_sbrk_r>:
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	b570      	push	{r4, r5, r6, lr}
 8003aac:	4d06      	ldr	r5, [pc, #24]	; (8003ac8 <_sbrk_r+0x20>)
 8003aae:	0004      	movs	r4, r0
 8003ab0:	0008      	movs	r0, r1
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	f7fd f81a 	bl	8000aec <_sbrk>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d103      	bne.n	8003ac4 <_sbrk_r+0x1c>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d000      	beq.n	8003ac4 <_sbrk_r+0x1c>
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	bd70      	pop	{r4, r5, r6, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	20000184 	.word	0x20000184

08003acc <__sread>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	000c      	movs	r4, r1
 8003ad0:	250e      	movs	r5, #14
 8003ad2:	5f49      	ldrsh	r1, [r1, r5]
 8003ad4:	f000 faec 	bl	80040b0 <_read_r>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	db03      	blt.n	8003ae4 <__sread+0x18>
 8003adc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ade:	181b      	adds	r3, r3, r0
 8003ae0:	6563      	str	r3, [r4, #84]	; 0x54
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	4a02      	ldr	r2, [pc, #8]	; (8003af0 <__sread+0x24>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	e7f9      	b.n	8003ae2 <__sread+0x16>
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	ffffefff 	.word	0xffffefff

08003af4 <__swrite>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	001f      	movs	r7, r3
 8003af8:	898b      	ldrh	r3, [r1, #12]
 8003afa:	0005      	movs	r5, r0
 8003afc:	000c      	movs	r4, r1
 8003afe:	0016      	movs	r6, r2
 8003b00:	05db      	lsls	r3, r3, #23
 8003b02:	d505      	bpl.n	8003b10 <__swrite+0x1c>
 8003b04:	230e      	movs	r3, #14
 8003b06:	5ec9      	ldrsh	r1, [r1, r3]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	f000 f9ea 	bl	8003ee4 <_lseek_r>
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <__swrite+0x34>)
 8003b14:	0028      	movs	r0, r5
 8003b16:	4013      	ands	r3, r2
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	0032      	movs	r2, r6
 8003b1c:	230e      	movs	r3, #14
 8003b1e:	5ee1      	ldrsh	r1, [r4, r3]
 8003b20:	003b      	movs	r3, r7
 8003b22:	f000 f875 	bl	8003c10 <_write_r>
 8003b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b28:	ffffefff 	.word	0xffffefff

08003b2c <__sseek>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	000c      	movs	r4, r1
 8003b30:	250e      	movs	r5, #14
 8003b32:	5f49      	ldrsh	r1, [r1, r5]
 8003b34:	f000 f9d6 	bl	8003ee4 <_lseek_r>
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	1c42      	adds	r2, r0, #1
 8003b3c:	d103      	bne.n	8003b46 <__sseek+0x1a>
 8003b3e:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <__sseek+0x28>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	bd70      	pop	{r4, r5, r6, pc}
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	0152      	lsls	r2, r2, #5
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	6560      	str	r0, [r4, #84]	; 0x54
 8003b50:	e7f8      	b.n	8003b44 <__sseek+0x18>
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	ffffefff 	.word	0xffffefff

08003b58 <__sclose>:
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	230e      	movs	r3, #14
 8003b5c:	5ec9      	ldrsh	r1, [r1, r3]
 8003b5e:	f000 f8e3 	bl	8003d28 <_close_r>
 8003b62:	bd10      	pop	{r4, pc}

08003b64 <__swbuf_r>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	0005      	movs	r5, r0
 8003b68:	000e      	movs	r6, r1
 8003b6a:	0014      	movs	r4, r2
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d004      	beq.n	8003b7a <__swbuf_r+0x16>
 8003b70:	6983      	ldr	r3, [r0, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <__swbuf_r+0x16>
 8003b76:	f7ff fbb1 	bl	80032dc <__sinit>
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <__swbuf_r+0xa0>)
 8003b7c:	429c      	cmp	r4, r3
 8003b7e:	d12e      	bne.n	8003bde <__swbuf_r+0x7a>
 8003b80:	686c      	ldr	r4, [r5, #4]
 8003b82:	69a3      	ldr	r3, [r4, #24]
 8003b84:	60a3      	str	r3, [r4, #8]
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	d532      	bpl.n	8003bf2 <__swbuf_r+0x8e>
 8003b8c:	6923      	ldr	r3, [r4, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02f      	beq.n	8003bf2 <__swbuf_r+0x8e>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	6922      	ldr	r2, [r4, #16]
 8003b96:	b2f7      	uxtb	r7, r6
 8003b98:	1a98      	subs	r0, r3, r2
 8003b9a:	6963      	ldr	r3, [r4, #20]
 8003b9c:	b2f6      	uxtb	r6, r6
 8003b9e:	4283      	cmp	r3, r0
 8003ba0:	dc05      	bgt.n	8003bae <__swbuf_r+0x4a>
 8003ba2:	0021      	movs	r1, r4
 8003ba4:	0028      	movs	r0, r5
 8003ba6:	f000 f95d 	bl	8003e64 <_fflush_r>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d127      	bne.n	8003bfe <__swbuf_r+0x9a>
 8003bae:	68a3      	ldr	r3, [r4, #8]
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	60a3      	str	r3, [r4, #8]
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	6022      	str	r2, [r4, #0]
 8003bbc:	701f      	strb	r7, [r3, #0]
 8003bbe:	6963      	ldr	r3, [r4, #20]
 8003bc0:	4283      	cmp	r3, r0
 8003bc2:	d004      	beq.n	8003bce <__swbuf_r+0x6a>
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	07db      	lsls	r3, r3, #31
 8003bc8:	d507      	bpl.n	8003bda <__swbuf_r+0x76>
 8003bca:	2e0a      	cmp	r6, #10
 8003bcc:	d105      	bne.n	8003bda <__swbuf_r+0x76>
 8003bce:	0021      	movs	r1, r4
 8003bd0:	0028      	movs	r0, r5
 8003bd2:	f000 f947 	bl	8003e64 <_fflush_r>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d111      	bne.n	8003bfe <__swbuf_r+0x9a>
 8003bda:	0030      	movs	r0, r6
 8003bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <__swbuf_r+0xa4>)
 8003be0:	429c      	cmp	r4, r3
 8003be2:	d101      	bne.n	8003be8 <__swbuf_r+0x84>
 8003be4:	68ac      	ldr	r4, [r5, #8]
 8003be6:	e7cc      	b.n	8003b82 <__swbuf_r+0x1e>
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <__swbuf_r+0xa8>)
 8003bea:	429c      	cmp	r4, r3
 8003bec:	d1c9      	bne.n	8003b82 <__swbuf_r+0x1e>
 8003bee:	68ec      	ldr	r4, [r5, #12]
 8003bf0:	e7c7      	b.n	8003b82 <__swbuf_r+0x1e>
 8003bf2:	0021      	movs	r1, r4
 8003bf4:	0028      	movs	r0, r5
 8003bf6:	f000 f81f 	bl	8003c38 <__swsetup_r>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	d0c9      	beq.n	8003b92 <__swbuf_r+0x2e>
 8003bfe:	2601      	movs	r6, #1
 8003c00:	4276      	negs	r6, r6
 8003c02:	e7ea      	b.n	8003bda <__swbuf_r+0x76>
 8003c04:	080041d4 	.word	0x080041d4
 8003c08:	080041f4 	.word	0x080041f4
 8003c0c:	080041b4 	.word	0x080041b4

08003c10 <_write_r>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	0004      	movs	r4, r0
 8003c14:	0008      	movs	r0, r1
 8003c16:	0011      	movs	r1, r2
 8003c18:	001a      	movs	r2, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	4d05      	ldr	r5, [pc, #20]	; (8003c34 <_write_r+0x24>)
 8003c1e:	602b      	str	r3, [r5, #0]
 8003c20:	f7fc ff1c 	bl	8000a5c <_write>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	d103      	bne.n	8003c30 <_write_r+0x20>
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d000      	beq.n	8003c30 <_write_r+0x20>
 8003c2e:	6023      	str	r3, [r4, #0]
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	20000184 	.word	0x20000184

08003c38 <__swsetup_r>:
 8003c38:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <__swsetup_r+0xe0>)
 8003c3a:	b570      	push	{r4, r5, r6, lr}
 8003c3c:	681d      	ldr	r5, [r3, #0]
 8003c3e:	0006      	movs	r6, r0
 8003c40:	000c      	movs	r4, r1
 8003c42:	2d00      	cmp	r5, #0
 8003c44:	d005      	beq.n	8003c52 <__swsetup_r+0x1a>
 8003c46:	69ab      	ldr	r3, [r5, #24]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <__swsetup_r+0x1a>
 8003c4c:	0028      	movs	r0, r5
 8003c4e:	f7ff fb45 	bl	80032dc <__sinit>
 8003c52:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <__swsetup_r+0xe4>)
 8003c54:	429c      	cmp	r4, r3
 8003c56:	d10f      	bne.n	8003c78 <__swsetup_r+0x40>
 8003c58:	686c      	ldr	r4, [r5, #4]
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	5ee2      	ldrsh	r2, [r4, r3]
 8003c5e:	b293      	uxth	r3, r2
 8003c60:	0711      	lsls	r1, r2, #28
 8003c62:	d42d      	bmi.n	8003cc0 <__swsetup_r+0x88>
 8003c64:	06d9      	lsls	r1, r3, #27
 8003c66:	d411      	bmi.n	8003c8c <__swsetup_r+0x54>
 8003c68:	2309      	movs	r3, #9
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	6033      	str	r3, [r6, #0]
 8003c6e:	3337      	adds	r3, #55	; 0x37
 8003c70:	4313      	orrs	r3, r2
 8003c72:	81a3      	strh	r3, [r4, #12]
 8003c74:	4240      	negs	r0, r0
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <__swsetup_r+0xe8>)
 8003c7a:	429c      	cmp	r4, r3
 8003c7c:	d101      	bne.n	8003c82 <__swsetup_r+0x4a>
 8003c7e:	68ac      	ldr	r4, [r5, #8]
 8003c80:	e7eb      	b.n	8003c5a <__swsetup_r+0x22>
 8003c82:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <__swsetup_r+0xec>)
 8003c84:	429c      	cmp	r4, r3
 8003c86:	d1e8      	bne.n	8003c5a <__swsetup_r+0x22>
 8003c88:	68ec      	ldr	r4, [r5, #12]
 8003c8a:	e7e6      	b.n	8003c5a <__swsetup_r+0x22>
 8003c8c:	075b      	lsls	r3, r3, #29
 8003c8e:	d513      	bpl.n	8003cb8 <__swsetup_r+0x80>
 8003c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c92:	2900      	cmp	r1, #0
 8003c94:	d008      	beq.n	8003ca8 <__swsetup_r+0x70>
 8003c96:	0023      	movs	r3, r4
 8003c98:	3344      	adds	r3, #68	; 0x44
 8003c9a:	4299      	cmp	r1, r3
 8003c9c:	d002      	beq.n	8003ca4 <__swsetup_r+0x6c>
 8003c9e:	0030      	movs	r0, r6
 8003ca0:	f000 f9bc 	bl	800401c <_free_r>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	6363      	str	r3, [r4, #52]	; 0x34
 8003ca8:	2224      	movs	r2, #36	; 0x24
 8003caa:	89a3      	ldrh	r3, [r4, #12]
 8003cac:	4393      	bics	r3, r2
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	6063      	str	r3, [r4, #4]
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	2308      	movs	r3, #8
 8003cba:	89a2      	ldrh	r2, [r4, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	6923      	ldr	r3, [r4, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <__swsetup_r+0xa6>
 8003cc6:	21a0      	movs	r1, #160	; 0xa0
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	0089      	lsls	r1, r1, #2
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	400b      	ands	r3, r1
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <__swsetup_r+0xa6>
 8003cd6:	0021      	movs	r1, r4
 8003cd8:	0030      	movs	r0, r6
 8003cda:	f000 f93f 	bl	8003f5c <__smakebuf_r>
 8003cde:	220c      	movs	r2, #12
 8003ce0:	5ea3      	ldrsh	r3, [r4, r2]
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	b299      	uxth	r1, r3
 8003ce8:	4002      	ands	r2, r0
 8003cea:	4203      	tst	r3, r0
 8003cec:	d00f      	beq.n	8003d0e <__swsetup_r+0xd6>
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60a2      	str	r2, [r4, #8]
 8003cf2:	6962      	ldr	r2, [r4, #20]
 8003cf4:	4252      	negs	r2, r2
 8003cf6:	61a2      	str	r2, [r4, #24]
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	6922      	ldr	r2, [r4, #16]
 8003cfc:	4282      	cmp	r2, r0
 8003cfe:	d1ba      	bne.n	8003c76 <__swsetup_r+0x3e>
 8003d00:	060a      	lsls	r2, r1, #24
 8003d02:	d5b8      	bpl.n	8003c76 <__swsetup_r+0x3e>
 8003d04:	2240      	movs	r2, #64	; 0x40
 8003d06:	4313      	orrs	r3, r2
 8003d08:	81a3      	strh	r3, [r4, #12]
 8003d0a:	3801      	subs	r0, #1
 8003d0c:	e7b3      	b.n	8003c76 <__swsetup_r+0x3e>
 8003d0e:	0788      	lsls	r0, r1, #30
 8003d10:	d400      	bmi.n	8003d14 <__swsetup_r+0xdc>
 8003d12:	6962      	ldr	r2, [r4, #20]
 8003d14:	60a2      	str	r2, [r4, #8]
 8003d16:	e7ef      	b.n	8003cf8 <__swsetup_r+0xc0>
 8003d18:	2000000c 	.word	0x2000000c
 8003d1c:	080041d4 	.word	0x080041d4
 8003d20:	080041f4 	.word	0x080041f4
 8003d24:	080041b4 	.word	0x080041b4

08003d28 <_close_r>:
 8003d28:	2300      	movs	r3, #0
 8003d2a:	b570      	push	{r4, r5, r6, lr}
 8003d2c:	4d06      	ldr	r5, [pc, #24]	; (8003d48 <_close_r+0x20>)
 8003d2e:	0004      	movs	r4, r0
 8003d30:	0008      	movs	r0, r1
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	f7fc feae 	bl	8000a94 <_close>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d103      	bne.n	8003d44 <_close_r+0x1c>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d000      	beq.n	8003d44 <_close_r+0x1c>
 8003d42:	6023      	str	r3, [r4, #0]
 8003d44:	bd70      	pop	{r4, r5, r6, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	20000184 	.word	0x20000184

08003d4c <__sflush_r>:
 8003d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d4e:	898b      	ldrh	r3, [r1, #12]
 8003d50:	0005      	movs	r5, r0
 8003d52:	000c      	movs	r4, r1
 8003d54:	071a      	lsls	r2, r3, #28
 8003d56:	d45f      	bmi.n	8003e18 <__sflush_r+0xcc>
 8003d58:	684a      	ldr	r2, [r1, #4]
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	dc04      	bgt.n	8003d68 <__sflush_r+0x1c>
 8003d5e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	dc01      	bgt.n	8003d68 <__sflush_r+0x1c>
 8003d64:	2000      	movs	r0, #0
 8003d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d68:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003d6a:	2f00      	cmp	r7, #0
 8003d6c:	d0fa      	beq.n	8003d64 <__sflush_r+0x18>
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	682e      	ldr	r6, [r5, #0]
 8003d74:	602a      	str	r2, [r5, #0]
 8003d76:	001a      	movs	r2, r3
 8003d78:	0149      	lsls	r1, r1, #5
 8003d7a:	400a      	ands	r2, r1
 8003d7c:	420b      	tst	r3, r1
 8003d7e:	d034      	beq.n	8003dea <__sflush_r+0x9e>
 8003d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	075b      	lsls	r3, r3, #29
 8003d86:	d506      	bpl.n	8003d96 <__sflush_r+0x4a>
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	1ac0      	subs	r0, r0, r3
 8003d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <__sflush_r+0x4a>
 8003d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d94:	1ac0      	subs	r0, r0, r3
 8003d96:	0002      	movs	r2, r0
 8003d98:	6a21      	ldr	r1, [r4, #32]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	0028      	movs	r0, r5
 8003d9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003da0:	47b8      	blx	r7
 8003da2:	89a1      	ldrh	r1, [r4, #12]
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d106      	bne.n	8003db6 <__sflush_r+0x6a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	2b1d      	cmp	r3, #29
 8003dac:	d831      	bhi.n	8003e12 <__sflush_r+0xc6>
 8003dae:	4a2c      	ldr	r2, [pc, #176]	; (8003e60 <__sflush_r+0x114>)
 8003db0:	40da      	lsrs	r2, r3
 8003db2:	07d3      	lsls	r3, r2, #31
 8003db4:	d52d      	bpl.n	8003e12 <__sflush_r+0xc6>
 8003db6:	2300      	movs	r3, #0
 8003db8:	6063      	str	r3, [r4, #4]
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	04cb      	lsls	r3, r1, #19
 8003dc0:	d505      	bpl.n	8003dce <__sflush_r+0x82>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d102      	bne.n	8003dcc <__sflush_r+0x80>
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d100      	bne.n	8003dce <__sflush_r+0x82>
 8003dcc:	6560      	str	r0, [r4, #84]	; 0x54
 8003dce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dd0:	602e      	str	r6, [r5, #0]
 8003dd2:	2900      	cmp	r1, #0
 8003dd4:	d0c6      	beq.n	8003d64 <__sflush_r+0x18>
 8003dd6:	0023      	movs	r3, r4
 8003dd8:	3344      	adds	r3, #68	; 0x44
 8003dda:	4299      	cmp	r1, r3
 8003ddc:	d002      	beq.n	8003de4 <__sflush_r+0x98>
 8003dde:	0028      	movs	r0, r5
 8003de0:	f000 f91c 	bl	800401c <_free_r>
 8003de4:	2000      	movs	r0, #0
 8003de6:	6360      	str	r0, [r4, #52]	; 0x34
 8003de8:	e7bd      	b.n	8003d66 <__sflush_r+0x1a>
 8003dea:	2301      	movs	r3, #1
 8003dec:	0028      	movs	r0, r5
 8003dee:	6a21      	ldr	r1, [r4, #32]
 8003df0:	47b8      	blx	r7
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d1c5      	bne.n	8003d82 <__sflush_r+0x36>
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0c2      	beq.n	8003d82 <__sflush_r+0x36>
 8003dfc:	2b1d      	cmp	r3, #29
 8003dfe:	d001      	beq.n	8003e04 <__sflush_r+0xb8>
 8003e00:	2b16      	cmp	r3, #22
 8003e02:	d101      	bne.n	8003e08 <__sflush_r+0xbc>
 8003e04:	602e      	str	r6, [r5, #0]
 8003e06:	e7ad      	b.n	8003d64 <__sflush_r+0x18>
 8003e08:	2340      	movs	r3, #64	; 0x40
 8003e0a:	89a2      	ldrh	r2, [r4, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	e7a9      	b.n	8003d66 <__sflush_r+0x1a>
 8003e12:	2340      	movs	r3, #64	; 0x40
 8003e14:	430b      	orrs	r3, r1
 8003e16:	e7fa      	b.n	8003e0e <__sflush_r+0xc2>
 8003e18:	690f      	ldr	r7, [r1, #16]
 8003e1a:	2f00      	cmp	r7, #0
 8003e1c:	d0a2      	beq.n	8003d64 <__sflush_r+0x18>
 8003e1e:	680a      	ldr	r2, [r1, #0]
 8003e20:	600f      	str	r7, [r1, #0]
 8003e22:	1bd2      	subs	r2, r2, r7
 8003e24:	9201      	str	r2, [sp, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	079b      	lsls	r3, r3, #30
 8003e2a:	d100      	bne.n	8003e2e <__sflush_r+0xe2>
 8003e2c:	694a      	ldr	r2, [r1, #20]
 8003e2e:	60a2      	str	r2, [r4, #8]
 8003e30:	9b01      	ldr	r3, [sp, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dc00      	bgt.n	8003e38 <__sflush_r+0xec>
 8003e36:	e795      	b.n	8003d64 <__sflush_r+0x18>
 8003e38:	003a      	movs	r2, r7
 8003e3a:	0028      	movs	r0, r5
 8003e3c:	9b01      	ldr	r3, [sp, #4]
 8003e3e:	6a21      	ldr	r1, [r4, #32]
 8003e40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e42:	47b0      	blx	r6
 8003e44:	2800      	cmp	r0, #0
 8003e46:	dc06      	bgt.n	8003e56 <__sflush_r+0x10a>
 8003e48:	2340      	movs	r3, #64	; 0x40
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	89a2      	ldrh	r2, [r4, #12]
 8003e4e:	4240      	negs	r0, r0
 8003e50:	4313      	orrs	r3, r2
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	e787      	b.n	8003d66 <__sflush_r+0x1a>
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	183f      	adds	r7, r7, r0
 8003e5a:	1a1b      	subs	r3, r3, r0
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	e7e7      	b.n	8003e30 <__sflush_r+0xe4>
 8003e60:	20400001 	.word	0x20400001

08003e64 <_fflush_r>:
 8003e64:	690b      	ldr	r3, [r1, #16]
 8003e66:	b570      	push	{r4, r5, r6, lr}
 8003e68:	0005      	movs	r5, r0
 8003e6a:	000c      	movs	r4, r1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <_fflush_r+0x12>
 8003e70:	2500      	movs	r5, #0
 8003e72:	0028      	movs	r0, r5
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d004      	beq.n	8003e84 <_fflush_r+0x20>
 8003e7a:	6983      	ldr	r3, [r0, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <_fflush_r+0x20>
 8003e80:	f7ff fa2c 	bl	80032dc <__sinit>
 8003e84:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <_fflush_r+0x74>)
 8003e86:	429c      	cmp	r4, r3
 8003e88:	d11b      	bne.n	8003ec2 <_fflush_r+0x5e>
 8003e8a:	686c      	ldr	r4, [r5, #4]
 8003e8c:	220c      	movs	r2, #12
 8003e8e:	5ea3      	ldrsh	r3, [r4, r2]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ed      	beq.n	8003e70 <_fflush_r+0xc>
 8003e94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e96:	07d2      	lsls	r2, r2, #31
 8003e98:	d404      	bmi.n	8003ea4 <_fflush_r+0x40>
 8003e9a:	059b      	lsls	r3, r3, #22
 8003e9c:	d402      	bmi.n	8003ea4 <_fflush_r+0x40>
 8003e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ea0:	f7ff fabd 	bl	800341e <__retarget_lock_acquire_recursive>
 8003ea4:	0028      	movs	r0, r5
 8003ea6:	0021      	movs	r1, r4
 8003ea8:	f7ff ff50 	bl	8003d4c <__sflush_r>
 8003eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eae:	0005      	movs	r5, r0
 8003eb0:	07db      	lsls	r3, r3, #31
 8003eb2:	d4de      	bmi.n	8003e72 <_fflush_r+0xe>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	059b      	lsls	r3, r3, #22
 8003eb8:	d4db      	bmi.n	8003e72 <_fflush_r+0xe>
 8003eba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ebc:	f7ff fab0 	bl	8003420 <__retarget_lock_release_recursive>
 8003ec0:	e7d7      	b.n	8003e72 <_fflush_r+0xe>
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <_fflush_r+0x78>)
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	d101      	bne.n	8003ecc <_fflush_r+0x68>
 8003ec8:	68ac      	ldr	r4, [r5, #8]
 8003eca:	e7df      	b.n	8003e8c <_fflush_r+0x28>
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <_fflush_r+0x7c>)
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	d1dc      	bne.n	8003e8c <_fflush_r+0x28>
 8003ed2:	68ec      	ldr	r4, [r5, #12]
 8003ed4:	e7da      	b.n	8003e8c <_fflush_r+0x28>
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	080041d4 	.word	0x080041d4
 8003edc:	080041f4 	.word	0x080041f4
 8003ee0:	080041b4 	.word	0x080041b4

08003ee4 <_lseek_r>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	0004      	movs	r4, r0
 8003ee8:	0008      	movs	r0, r1
 8003eea:	0011      	movs	r1, r2
 8003eec:	001a      	movs	r2, r3
 8003eee:	2300      	movs	r3, #0
 8003ef0:	4d05      	ldr	r5, [pc, #20]	; (8003f08 <_lseek_r+0x24>)
 8003ef2:	602b      	str	r3, [r5, #0]
 8003ef4:	f7fc fdef 	bl	8000ad6 <_lseek>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d103      	bne.n	8003f04 <_lseek_r+0x20>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d000      	beq.n	8003f04 <_lseek_r+0x20>
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	20000184 	.word	0x20000184

08003f0c <__swhatbuf_r>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	000e      	movs	r6, r1
 8003f10:	001d      	movs	r5, r3
 8003f12:	230e      	movs	r3, #14
 8003f14:	5ec9      	ldrsh	r1, [r1, r3]
 8003f16:	0014      	movs	r4, r2
 8003f18:	b096      	sub	sp, #88	; 0x58
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	da07      	bge.n	8003f2e <__swhatbuf_r+0x22>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	602b      	str	r3, [r5, #0]
 8003f22:	89b3      	ldrh	r3, [r6, #12]
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	d411      	bmi.n	8003f4c <__swhatbuf_r+0x40>
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	e00f      	b.n	8003f4e <__swhatbuf_r+0x42>
 8003f2e:	466a      	mov	r2, sp
 8003f30:	f000 f8d2 	bl	80040d8 <_fstat_r>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	dbf2      	blt.n	8003f1e <__swhatbuf_r+0x12>
 8003f38:	23f0      	movs	r3, #240	; 0xf0
 8003f3a:	9901      	ldr	r1, [sp, #4]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	4019      	ands	r1, r3
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <__swhatbuf_r+0x4c>)
 8003f42:	18c9      	adds	r1, r1, r3
 8003f44:	424b      	negs	r3, r1
 8003f46:	4159      	adcs	r1, r3
 8003f48:	6029      	str	r1, [r5, #0]
 8003f4a:	e7ed      	b.n	8003f28 <__swhatbuf_r+0x1c>
 8003f4c:	2340      	movs	r3, #64	; 0x40
 8003f4e:	2000      	movs	r0, #0
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	b016      	add	sp, #88	; 0x58
 8003f54:	bd70      	pop	{r4, r5, r6, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	ffffe000 	.word	0xffffe000

08003f5c <__smakebuf_r>:
 8003f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f5e:	2602      	movs	r6, #2
 8003f60:	898b      	ldrh	r3, [r1, #12]
 8003f62:	0005      	movs	r5, r0
 8003f64:	000c      	movs	r4, r1
 8003f66:	4233      	tst	r3, r6
 8003f68:	d006      	beq.n	8003f78 <__smakebuf_r+0x1c>
 8003f6a:	0023      	movs	r3, r4
 8003f6c:	3347      	adds	r3, #71	; 0x47
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	2301      	movs	r3, #1
 8003f74:	6163      	str	r3, [r4, #20]
 8003f76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003f78:	466a      	mov	r2, sp
 8003f7a:	ab01      	add	r3, sp, #4
 8003f7c:	f7ff ffc6 	bl	8003f0c <__swhatbuf_r>
 8003f80:	9900      	ldr	r1, [sp, #0]
 8003f82:	0007      	movs	r7, r0
 8003f84:	0028      	movs	r0, r5
 8003f86:	f7ff fa4d 	bl	8003424 <_malloc_r>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d108      	bne.n	8003fa0 <__smakebuf_r+0x44>
 8003f8e:	220c      	movs	r2, #12
 8003f90:	5ea3      	ldrsh	r3, [r4, r2]
 8003f92:	059a      	lsls	r2, r3, #22
 8003f94:	d4ef      	bmi.n	8003f76 <__smakebuf_r+0x1a>
 8003f96:	2203      	movs	r2, #3
 8003f98:	4393      	bics	r3, r2
 8003f9a:	431e      	orrs	r6, r3
 8003f9c:	81a6      	strh	r6, [r4, #12]
 8003f9e:	e7e4      	b.n	8003f6a <__smakebuf_r+0xe>
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <__smakebuf_r+0x84>)
 8003fa2:	62ab      	str	r3, [r5, #40]	; 0x28
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	89a2      	ldrh	r2, [r4, #12]
 8003fa8:	6020      	str	r0, [r4, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	81a3      	strh	r3, [r4, #12]
 8003fae:	9b00      	ldr	r3, [sp, #0]
 8003fb0:	6120      	str	r0, [r4, #16]
 8003fb2:	6163      	str	r3, [r4, #20]
 8003fb4:	9b01      	ldr	r3, [sp, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <__smakebuf_r+0x7a>
 8003fba:	0028      	movs	r0, r5
 8003fbc:	230e      	movs	r3, #14
 8003fbe:	5ee1      	ldrsh	r1, [r4, r3]
 8003fc0:	f000 f89c 	bl	80040fc <_isatty_r>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d006      	beq.n	8003fd6 <__smakebuf_r+0x7a>
 8003fc8:	2203      	movs	r2, #3
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	4393      	bics	r3, r2
 8003fce:	001a      	movs	r2, r3
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	81a3      	strh	r3, [r4, #12]
 8003fd6:	89a0      	ldrh	r0, [r4, #12]
 8003fd8:	4307      	orrs	r7, r0
 8003fda:	81a7      	strh	r7, [r4, #12]
 8003fdc:	e7cb      	b.n	8003f76 <__smakebuf_r+0x1a>
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	08003261 	.word	0x08003261

08003fe4 <memchr>:
 8003fe4:	b2c9      	uxtb	r1, r1
 8003fe6:	1882      	adds	r2, r0, r2
 8003fe8:	4290      	cmp	r0, r2
 8003fea:	d101      	bne.n	8003ff0 <memchr+0xc>
 8003fec:	2000      	movs	r0, #0
 8003fee:	4770      	bx	lr
 8003ff0:	7803      	ldrb	r3, [r0, #0]
 8003ff2:	428b      	cmp	r3, r1
 8003ff4:	d0fb      	beq.n	8003fee <memchr+0xa>
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	e7f6      	b.n	8003fe8 <memchr+0x4>
	...

08003ffc <__malloc_lock>:
 8003ffc:	b510      	push	{r4, lr}
 8003ffe:	4802      	ldr	r0, [pc, #8]	; (8004008 <__malloc_lock+0xc>)
 8004000:	f7ff fa0d 	bl	800341e <__retarget_lock_acquire_recursive>
 8004004:	bd10      	pop	{r4, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	2000017c 	.word	0x2000017c

0800400c <__malloc_unlock>:
 800400c:	b510      	push	{r4, lr}
 800400e:	4802      	ldr	r0, [pc, #8]	; (8004018 <__malloc_unlock+0xc>)
 8004010:	f7ff fa06 	bl	8003420 <__retarget_lock_release_recursive>
 8004014:	bd10      	pop	{r4, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	2000017c 	.word	0x2000017c

0800401c <_free_r>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	0005      	movs	r5, r0
 8004020:	2900      	cmp	r1, #0
 8004022:	d010      	beq.n	8004046 <_free_r+0x2a>
 8004024:	1f0c      	subs	r4, r1, #4
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	da00      	bge.n	800402e <_free_r+0x12>
 800402c:	18e4      	adds	r4, r4, r3
 800402e:	0028      	movs	r0, r5
 8004030:	f7ff ffe4 	bl	8003ffc <__malloc_lock>
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <_free_r+0x90>)
 8004036:	6813      	ldr	r3, [r2, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <_free_r+0x2c>
 800403c:	6063      	str	r3, [r4, #4]
 800403e:	6014      	str	r4, [r2, #0]
 8004040:	0028      	movs	r0, r5
 8004042:	f7ff ffe3 	bl	800400c <__malloc_unlock>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	42a3      	cmp	r3, r4
 800404a:	d908      	bls.n	800405e <_free_r+0x42>
 800404c:	6821      	ldr	r1, [r4, #0]
 800404e:	1860      	adds	r0, r4, r1
 8004050:	4283      	cmp	r3, r0
 8004052:	d1f3      	bne.n	800403c <_free_r+0x20>
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	1841      	adds	r1, r0, r1
 800405a:	6021      	str	r1, [r4, #0]
 800405c:	e7ee      	b.n	800403c <_free_r+0x20>
 800405e:	001a      	movs	r2, r3
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <_free_r+0x4e>
 8004066:	42a3      	cmp	r3, r4
 8004068:	d9f9      	bls.n	800405e <_free_r+0x42>
 800406a:	6811      	ldr	r1, [r2, #0]
 800406c:	1850      	adds	r0, r2, r1
 800406e:	42a0      	cmp	r0, r4
 8004070:	d10b      	bne.n	800408a <_free_r+0x6e>
 8004072:	6820      	ldr	r0, [r4, #0]
 8004074:	1809      	adds	r1, r1, r0
 8004076:	1850      	adds	r0, r2, r1
 8004078:	6011      	str	r1, [r2, #0]
 800407a:	4283      	cmp	r3, r0
 800407c:	d1e0      	bne.n	8004040 <_free_r+0x24>
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	1841      	adds	r1, r0, r1
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	6053      	str	r3, [r2, #4]
 8004088:	e7da      	b.n	8004040 <_free_r+0x24>
 800408a:	42a0      	cmp	r0, r4
 800408c:	d902      	bls.n	8004094 <_free_r+0x78>
 800408e:	230c      	movs	r3, #12
 8004090:	602b      	str	r3, [r5, #0]
 8004092:	e7d5      	b.n	8004040 <_free_r+0x24>
 8004094:	6821      	ldr	r1, [r4, #0]
 8004096:	1860      	adds	r0, r4, r1
 8004098:	4283      	cmp	r3, r0
 800409a:	d103      	bne.n	80040a4 <_free_r+0x88>
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	1841      	adds	r1, r0, r1
 80040a2:	6021      	str	r1, [r4, #0]
 80040a4:	6063      	str	r3, [r4, #4]
 80040a6:	6054      	str	r4, [r2, #4]
 80040a8:	e7ca      	b.n	8004040 <_free_r+0x24>
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	20000098 	.word	0x20000098

080040b0 <_read_r>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	0004      	movs	r4, r0
 80040b4:	0008      	movs	r0, r1
 80040b6:	0011      	movs	r1, r2
 80040b8:	001a      	movs	r2, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	4d05      	ldr	r5, [pc, #20]	; (80040d4 <_read_r+0x24>)
 80040be:	602b      	str	r3, [r5, #0]
 80040c0:	f7fc fcaf 	bl	8000a22 <_read>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d103      	bne.n	80040d0 <_read_r+0x20>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d000      	beq.n	80040d0 <_read_r+0x20>
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	20000184 	.word	0x20000184

080040d8 <_fstat_r>:
 80040d8:	2300      	movs	r3, #0
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	4d06      	ldr	r5, [pc, #24]	; (80040f8 <_fstat_r+0x20>)
 80040de:	0004      	movs	r4, r0
 80040e0:	0008      	movs	r0, r1
 80040e2:	0011      	movs	r1, r2
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	f7fc fcdf 	bl	8000aa8 <_fstat>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d103      	bne.n	80040f6 <_fstat_r+0x1e>
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d000      	beq.n	80040f6 <_fstat_r+0x1e>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	20000184 	.word	0x20000184

080040fc <_isatty_r>:
 80040fc:	2300      	movs	r3, #0
 80040fe:	b570      	push	{r4, r5, r6, lr}
 8004100:	4d06      	ldr	r5, [pc, #24]	; (800411c <_isatty_r+0x20>)
 8004102:	0004      	movs	r4, r0
 8004104:	0008      	movs	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fc fcdc 	bl	8000ac4 <_isatty>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d103      	bne.n	8004118 <_isatty_r+0x1c>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d000      	beq.n	8004118 <_isatty_r+0x1c>
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	20000184 	.word	0x20000184

08004120 <_init>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr

0800412c <_fini>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr
